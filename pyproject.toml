[tool.pyprojectx]
main = ["pdm==2.12.4"]

[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
dev = ["pylint>=3.0.0a7", "ruff>=0.2.2"]

[tool.pdm.version]
source = "call"
getter = "get_version:get_version"

[tool.pdm.scripts]
update = "pdm update"
refresh_lockfile = "pdm lock --update-reuse"
typecheck = 'basedpyright'
ruff_check = { composite = ['ruff check', 'ruff format --check --diff'] }
ruff_fix = { composite = ['ruff check --fix', 'ruff format --fix'] }
pylint = 'pylint basedpyright'

[project]
name = "basedpyright"
description = "static type checking for Python (but based)"
dynamic = ["version"]
authors = [
    { name = "detachhead", email = "detachhead@users.noreply.github.com" },
]
dependencies = ["nodejs-bin>=18.4.0a4"]
requires-python = ">=3.8"
readme = "README.md"
license = { text = "MIT" }

[project.urls]
repository = "https://github.com/detachhead/basedpyright"

[project.scripts]
basedpyright = 'basedpyright.pyright:main'
basedpyright-langserver = 'basedpyright.langserver:main'

[build-system]
requires = ["pdm-backend", "nodejs-bin>=18.4.0a4"]
build-backend = "pdm.backend"

[tool.pylint.MASTER]
fail-on = "I"
bad-names = ["foo", "bar", "baz", "retval"]
load-plugins = [
    # we don't use all of these but enabling them all for completeness since there's no error if a rule is not found
    "pylint.extensions.bad_builtin",
    "pylint.extensions.broad_try_caluse",
    "pylint.extensions.check_elif",
    "pylint.extensions.code_style",
    "pylint.extensions.comparetozero",
    "pylint.extensions.comparison_placement",
    "pylint.extensions.confusing_elif",
    "pylint.extensions.consider_refactoring_into_while_condition",
    "pylint.extensions.consider_ternary_expression",
    "pylint.extensions.dict_init_mutate",
    "pylint.extensions.docparams",
    "pylint.extensions.docstyle",
    "pylint.extensions.dunder",
    "pylint.extensions.empty_comment",
    "pylint.extensions.emptystring",
    "pylint.extensions.eq_without_hash",
    "pylint.extensions.for_any_all",
    "pylint.extensions.magic_value",
    "pylint.extensions.no_self_use",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.private_import",
    "pylint.extensions.redefined_loop_name",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.set_membership",
    "pylint.extensions.typing",
    "pylint.extensions.while_used",
]

[tool.pylint."MESSAGE CONTROL"]
disable = ["R", "C", "E", "F", "W", "I"]
enable = [
    "useless-suppression",
    # rules that have not yet been implemented in ruff. once all of these are implemented in ruff, we should remove pylint
    # (see https://github.com/astral-sh/ruff/issues/970):
    "access-member-before-definition",
    "assignment-from-none",
    "dict-iter-missing-items",
    "invalid-bool-returned",
    "invalid-bytes-returned",
    "invalid-getnewargs-ex-returned",
    "invalid-getnewargs-returned",
    "invalid-index-returned",
    "invalid-length-hint-returned",
    "invalid-length-returned",
    "invalid-slice-index",
    "invalid-slice-step",
    "invalid-slots",
    "invalid-slots-object",
    "invalid-unicode-codec",
    "logging-format-truncated",
    "logging-unsupported-format",
    "method-hidden",
    "modified-iterating-dict",
    "modified-iterating-set",
    "potential-index-error",
    "relative-beyond-top-level",
    "singledispatchmethod-function",
    "abstract-method",
    "arguments-out-of-order",
    "attribute-defined-outside-init",
    "confusing-with-statement",
    "deprecated-decorator",
    "deprecated-module",
    "differing-param-doc",
    "global-variable-undefined",
    "missing-param-doc",
    "modified-iterating-list",
    "multiple-constructor-doc",
    "nan-comparison",
    "non-parent-init-called",
    "overlapping-except",
    "preferred-module",
    "raising-format-tuple",
    "redeclared-assigned-name",
    "redefined-outer-name",
    "redefined-slots-in-subclass",
    "redundant-returns-doc",
    "redundant-yields-doc",
    "self-cls-assignment",
    "shallow-copy-environ",
    "useless-param-doc",
    "useless-parent-delegation",
    "useless-type-doc",
    "using-constant-test",
    "bad-file-encoding",
    "dict-init-mutate",
    "use-implicit-booleaness-not-comparison",
    "chained-comparison",
    "confusing-consecutive-elif",
    "consider-using-augmented-assign",
    "consider-using-join",
    "consider-using-max-builtin",
    "consider-using-min-builtin",
    "consider-using-namedtuple-or-dataclass",
    "consider-using-tuple",
    "simplifiable-condition",
    "simplify-boolean-expression",
]

[tool.pylint.REPORTS]
reports = "no"
output-format = "colorized"
score = "no"

[tool.pylint.FORMAT]
max-line-length = 200

[tool.basedpyright]
ignore = ["pw", "basedpyright/dist", "packages"]
pythonVersion = "3.8"
include = ["basedpyright", "get_version.py", "pdm_build.py"]
exclude = ["pw", "basedpyright/dist", "packages"]
typeCheckingMode = "all"
reportImplicitStringConcatenation = false                    # conflicts with ruff formatter

[tool.ruff]
target-version = "py38"
respect-gitignore = true
line-length = 100
preview = true
unsafe-fixes = true
extend-exclude = ["pw", "packages/pyright-internal/typeshed-fallback", "packages/pyright-internal/src/tests/samples"]

[tool.ruff.lint]
extend-select = ["ALL"]
ignore = [
    "ANN",     # flake8-annotations (covered by pyright)
    "EM",      # flake8-errmsg
    "FIX",     # flake8-fixme
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "PLR1722", # Use `sys.exit()` instead of `exit`
    "PLW2901", # `for` loop variable overwritten by assignment target
    "PLE0605", # Invalid format for `__all__`, must be `tuple` or `list` (covered by pyright)
    "PLR0911", # Too many return statements
    "PLW0603", # Using the global statement is discouraged
    "PLC0105", # `TypeVar` name does not reflect its covariance
    "PLC0414", # Import alias does not rename original package (used by pyright for explicit re-export)
    "RUF013",  # PEP 484 prohibits implicit Optional (covered by pyright)
    "RUF016",  # Slice in indexed access to type (covered by pyright)
    "TRY002",  # Create your own exception
    "TRY003",  # Avoid specifying long messages outside the exception class
    "D10",     # Missing docstring
    "D203",    # 1 blank line required before class docstring
    "D205",    # 1 blank line required between summary line and description
    "D209",    # Multi-line docstring closing quotes should be on a separate line
    "D212",    # Multi-line docstring summary should start at the first line
    "D213",    # Multi-line docstring summary should start at the second line
    "D400",    # First line should end with a period
    "D401",    # First line should be in imperative mood
    "D403",    # First word of the first line should be properly capitalized
    "D404",    # First word of the docstring should not be `This`
    "D405",    # Section name should be properly capitalized
    "D406",    # Section name should end with a newline
    "D415",    # First line should end with a period, question mark, or exclamation point
    "D418",    # Function/Method decorated with @overload shouldn't contain a docstring (vscode supports it)
    "PT013",   # Found incorrect import of pytest, use simple import pytest instead (only for bad linters that can't check the qualname)
    "TD002",   # Missing author in TODO
    "CPY001",  # missing-copyright-notice
    "C901",    # max-complexity
    "ISC001",  # single-line-implicit-string-concatenation (conflicts with formatter)
    "COM812",  # missing-trailing-comma (conflicts with formatter)
]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.lint.per-file-ignores]
"*.pyi" = ["A001", "A002", "N"] # we don't control names in 3rd party modules
"tests/**/*.py" = [
    "S101", # Use of assert detected (pytest uses assert statements)
]
[tool.ruff.lint.isort]
combine-as-imports = true
required-imports = ["from __future__ import annotations"]
split-on-trailing-comma = false

[tool.ruff.format]
skip-magic-trailing-comma = true