{
  "files": {
    "mypy/binder.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 61,
        "src": "def __repr__(self) -> str:",
        "target": "mypy.binder.Frame.__repr__"
      }
    ],
    "mypy/build.py": [
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 341,
        "src": "plugin_data: Any  # config data from plugins",
        "target": "mypy.build"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 14,
        "src": "def cache_meta_from_dict(meta: dict[str, Any], data_json: str) -> CacheMeta:",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 7,
        "src": "sentinel: Any = None  # Values to be validated by the caller",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "return CacheMeta(",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"id\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"id\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"id\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"path\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"path\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"path\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 1,
        "src": "int(meta[\"mtime\"]) if \"mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "int(meta[\"mtime\"]) if \"mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "int(meta[\"mtime\"]) if \"mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "int(meta[\"mtime\"]) if \"mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "int(meta[\"mtime\"]) if \"mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"size\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"size\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"size\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"hash\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"hash\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"hash\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"dependencies\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"dependencies\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "meta.get(\"dependencies\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 1,
        "src": "int(meta[\"data_mtime\"]) if \"data_mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "int(meta[\"data_mtime\"]) if \"data_mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "int(meta[\"data_mtime\"]) if \"data_mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "int(meta[\"data_mtime\"]) if \"data_mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "int(meta[\"data_mtime\"]) if \"data_mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "meta.get(\"suppressed\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"suppressed\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "meta.get(\"suppressed\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"options\"),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "meta.get(\"options\"),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"dep_prios\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"dep_prios\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "meta.get(\"dep_prios\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"dep_lines\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"dep_lines\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "meta.get(\"dep_lines\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"interface_hash\", \"\"),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"interface_hash\", \"\"),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"version_id\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"version_id\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"version_id\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"ignore_all\", True),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"ignore_all\", True),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"plugin_data\", None),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"plugin_data\", None),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 93,
        "src": "plugin_type = getattr(module, func_name)(__version__)",
        "target": "mypy.build.load_plugins_from_config"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "if not isinstance(plugin_type, type):",
        "target": "mypy.build.load_plugins_from_config"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "plugin_type, plugin_path",
        "target": "mypy.build.load_plugins_from_config"
      },
      {
        "code": "no-any-expr",
        "column": 10,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 52,
        "src": "ver = getattr(module, \"__version__\", \"none\")",
        "target": "mypy.build.take_module_snapshot"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 1,
        "src": "return f\"{ver}:{digest}\"",
        "target": "mypy.build.take_module_snapshot"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 85,
        "src": "self.stats: dict[str, Any] = {}  # Values are ints or floats",
        "target": "mypy.build.BuildManager.__init__"
      },
      {
        "code": "helpful-string",
        "column": 22,
        "message": "The string for \"object\" isn't helpful in a user-facing or semantic string",
        "offset": 103,
        "src": "print(f\"{key + ':':24}{value}\")",
        "target": "mypy.build.BuildManager.dump_stats"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 145,
        "src": "deps = json.loads(self.metastore.read(self.fg_deps_meta[id][\"path\"]))",
        "target": "mypy.build.BuildManager.load_fine_grained_deps"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"dict[Any, Any]\")",
        "offset": 2,
        "src": "deps = {}",
        "target": "mypy.build.BuildManager.load_fine_grained_deps"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "val = {k: set(v) for k, v in deps.items()}",
        "target": "mypy.build.BuildManager.load_fine_grained_deps"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression type contains \"Any\" (has type \"dict[Any, set[Any]]\")",
        "offset": 0,
        "src": "val = {k: set(v) for k, v in deps.items()}",
        "target": "mypy.build.BuildManager.load_fine_grained_deps"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = {k: set(v) for k, v in deps.items()}",
        "target": "mypy.build.BuildManager.load_fine_grained_deps"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 0,
        "src": "val = {k: set(v) for k, v in deps.items()}",
        "target": "mypy.build.BuildManager.load_fine_grained_deps"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = {k: set(v) for k, v in deps.items()}",
        "target": "mypy.build.BuildManager.load_fine_grained_deps"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = {k: set(v) for k, v in deps.items()}",
        "target": "mypy.build.BuildManager.load_fine_grained_deps"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[Any, set[Any]]\")",
        "offset": 2,
        "src": "return val",
        "target": "mypy.build.BuildManager.load_fine_grained_deps"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 37,
        "src": "def add_stats(self, **kwds: Any) -> None:",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 1,
        "src": "for key, value in kwds.items():",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for key, value in kwds.items():",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "for key, value in kwds.items():",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict_items[str, Any]\")",
        "offset": 0,
        "src": "for key, value in kwds.items():",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "if key in self.stats:",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "self.stats[key] += value",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.stats[key] += value",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.stats[key] += value",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "self.stats[key] = value",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.stats[key] = value",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 3,
        "src": "return self.stats",
        "target": "mypy.build.BuildManager.stats_summary"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[Any, Any]\")",
        "offset": 4,
        "src": "return json.dumps({k: list(v) for k, v in x.items()}, separators=(\",\", \":\"))",
        "target": "mypy.build.deps_to_json"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "return json.dumps({k: list(v) for k, v in x.items()}, separators=(\",\", \":\"))",
        "target": "mypy.build.deps_to_json"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 62,
        "src": "assert st.meta, \"Module must be either parsed or cached\"",
        "target": "mypy.build.write_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "hash = st.meta.hash",
        "target": "mypy.build.write_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 137,
        "src": "data = json.load(file.open())",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 24,
        "src": "if not isinstance(data, dict) and error():",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "baseline_format = data.get(\"format\")",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if not baseline_format:",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "metadata = data.get(\"__baseline_metadata__\")",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 63,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "baseline_format = metadata.get(\"format\") if isinstance(metadata, dict) else None",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if baseline_format is None and error():",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 9,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif baseline_format != \"1.7\":",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "not isinstance(data.get(\"files\"), dict) or not isinstance(data.get(\"targets\"), list)",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 66,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "not isinstance(data.get(\"files\"), dict) or not isinstance(data.get(\"targets\"), list)",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "baseline_errors = data.get(\"files\", {})",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "targets = data.get(\"targets\")",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if baseline_errors and targets:",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if baseline_errors and targets:",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | None\")",
        "offset": 24,
        "src": "snapshot = _load_json_file(",
        "target": "mypy.build.read_plugins_snapshot"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | None\")",
        "offset": 6,
        "src": "if snapshot is None:",
        "target": "mypy.build.read_plugins_snapshot"
      },
      {
        "code": "redundant-expr",
        "column": 7,
        "message": "Condition is always false",
        "offset": 2,
        "src": "if not isinstance(snapshot, dict):",
        "target": "mypy.build.read_plugins_snapshot"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "if not isinstance(snapshot, dict):",
        "target": "mypy.build.read_plugins_snapshot"
      },
      {
        "code": "unreachable",
        "column": 8,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "manager.log(f\"Could not load plugins snapshot: cache is not a dict: {type(snapshot)}\")",
        "target": "mypy.build.read_plugins_snapshot"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 12,
        "src": "raw_quickstart: dict[str, Any] = {}",
        "target": "mypy.build.read_quickstart_file"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 6,
        "src": "for file, (x, y, z) in raw_quickstart.items():",
        "target": "mypy.build.read_quickstart_file"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for file, (x, y, z) in raw_quickstart.items():",
        "target": "mypy.build.read_quickstart_file"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "for file, (x, y, z) in raw_quickstart.items():",
        "target": "mypy.build.read_quickstart_file"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"dict_items[str, Any]\")",
        "offset": 0,
        "src": "for file, (x, y, z) in raw_quickstart.items():",
        "target": "mypy.build.read_quickstart_file"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"(Any, Any, Any)\")",
        "offset": 1,
        "src": "quickstart[file] = (x, y, z)",
        "target": "mypy.build.read_quickstart_file"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "quickstart[file] = (x, y, z)",
        "target": "mypy.build.read_quickstart_file"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "quickstart[file] = (x, y, z)",
        "target": "mypy.build.read_quickstart_file"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "quickstart[file] = (x, y, z)",
        "target": "mypy.build.read_quickstart_file"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | None\")",
        "offset": 14,
        "src": "deps_meta = _load_json_file(",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | None\")",
        "offset": 6,
        "src": "if deps_meta is None:",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "meta_snapshot = deps_meta[\"snapshot\"]",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta_snapshot = deps_meta[\"snapshot\"]",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 8,
        "src": "common = set(meta_snapshot.keys()) & set(current_meta_snapshot.keys())",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "common = set(meta_snapshot.keys()) & set(current_meta_snapshot.keys())",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 10,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if any(meta_snapshot[id] != current_meta_snapshot[id] for id in common):",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if any(meta_snapshot[id] != current_meta_snapshot[id] for id in common):",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if any(meta_snapshot[id] != current_meta_snapshot[id] for id in common):",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if any(meta_snapshot[id] != current_meta_snapshot[id] for id in common):",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 68,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 0,
        "src": "if any(meta_snapshot[id] != current_meta_snapshot[id] for id in common):",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 5,
        "src": "module_deps_metas = deps_meta[\"deps_meta\"]",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "module_deps_metas = deps_meta[\"deps_meta\"]",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert isinstance(module_deps_metas, dict)",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "matched = manager.getmtime(meta[\"path\"]) == meta[\"mtime\"]",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "matched = manager.getmtime(meta[\"path\"]) == meta[\"mtime\"]",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "matched = manager.getmtime(meta[\"path\"]) == meta[\"mtime\"]",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if not matched:",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "manager.log(f\"Invalid or missing fine-grained deps cache: {meta['path']}\")",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 6,
        "src": "def _load_json_file(",
        "target": "mypy.build._load_json_file"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 16,
        "src": "result = json.loads(data)",
        "target": "mypy.build._load_json_file"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 15,
        "src": "assert isinstance(result, dict)",
        "target": "mypy.build._load_json_file"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 92,
        "src": "def find_cache_meta(id: str, path: str, manager: BuildManager) -> CacheMeta | None:",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | None\")",
        "offset": 16,
        "src": "meta = _load_json_file(",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | None\")",
        "offset": 4,
        "src": "if meta is None:",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "redundant-expr",
        "column": 7,
        "message": "Condition is always false",
        "offset": 2,
        "src": "if not isinstance(meta, dict):",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "if not isinstance(meta, dict):",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "unreachable",
        "column": 8,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "manager.log(f\"Could not load cache for {id}: meta cache is not a dict: {repr(meta)}\")",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 2,
        "src": "m = cache_meta_from_dict(meta, data_json)",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 8,
        "src": "m.id != id",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "or m.mtime is None",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Left operand of \"or\" is always false",
        "offset": 0,
        "src": "or m.mtime is None",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "or m.size is None",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Left operand of \"or\" is always false",
        "offset": 0,
        "src": "or m.size is None",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "or m.dependencies is None",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Left operand of \"or\" is always false",
        "offset": 0,
        "src": "or m.dependencies is None",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "or m.data_mtime is None",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 9,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 7,
        "src": "(m.version_id != manager.version_id and not manager.options.skip_version_check)",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "or m.options is None",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "or len(m.dependencies) + len(m.suppressed) != len(m.dep_prios)",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 0,
        "src": "or len(m.dependencies) + len(m.suppressed) != len(m.dep_prios)",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 0,
        "src": "or len(m.dependencies) + len(m.suppressed) != len(m.dep_prios)",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "or len(m.dependencies) + len(m.suppressed) != len(m.dep_lines)",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 0,
        "src": "or len(m.dependencies) + len(m.suppressed) != len(m.dep_lines)",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 0,
        "src": "or len(m.dependencies) + len(m.suppressed) != len(m.dep_lines)",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 7,
        "src": "cached_options = m.options",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "helpful-string",
        "column": 24,
        "message": "The string for \"object\" isn't helpful in a user-facing or semantic string",
        "offset": 14,
        "src": "\"    {}: {} != {}\".format(",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 13,
        "src": "plugin_data = json.loads(",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "json.dumps(manager.plugin.report_config_data(ReportConfigContext(id, path, is_check=True)))",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 2,
        "src": "if m.plugin_data != plugin_data:",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if m.plugin_data != plugin_data:",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if m.plugin_data != plugin_data:",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 5,
        "src": "return m",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def validate_meta(",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 15,
        "src": "if meta is None:",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 4,
        "src": "if meta.ignore_all and not ignore_all:",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 10,
        "src": "data_mtime = manager.getmtime(meta.data_json)",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 4,
        "src": "if data_mtime != meta.data_mtime:",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 34,
        "src": "if size != meta.size and not bazel and not fine_grained_cache:",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 6,
        "src": "if not bazel and (mtime != meta.mtime or path != meta.path):",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 0,
        "src": "if not bazel and (mtime != meta.mtime or path != meta.path):",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 7,
        "src": "if int(qmtime) == mtime and qsize == size and qhash == meta.hash:",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 2,
        "src": "meta = meta._replace(mtime=mtime, path=path)",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "return meta",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 12,
        "src": "if source_hash != meta.hash:",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 3,
        "src": "return meta",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 7,
        "src": "meta = meta._replace(mtime=mtime, path=path)",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | int | list[str] | Mapping[str, object] | list[int] | Any]\")",
        "offset": 2,
        "src": "meta_dict = {",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 6,
        "src": "\"data_mtime\": meta.data_mtime,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "\"dependencies\": meta.dependencies,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "\"suppressed\": meta.suppressed,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 2,
        "src": "\"dep_prios\": meta.dep_prios,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "\"dep_lines\": meta.dep_lines,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "\"interface_hash\": meta.interface_hash,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 2,
        "src": "\"ignore_all\": meta.ignore_all,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 1,
        "src": "\"plugin_data\": meta.plugin_data,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 0,
        "src": "\"plugin_data\": meta.plugin_data,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "\"plugin_data\": meta.plugin_data,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | int | list[str] | Mapping[str, object] | list[int] | Any]\")",
        "offset": 3,
        "src": "meta_str = json.dumps(meta_dict, indent=2, sort_keys=True)",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | int | list[str] | Mapping[str, object] | list[int] | Any]\")",
        "offset": 2,
        "src": "meta_str = json.dumps(meta_dict, separators=(\",\", \":\"))",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 4,
        "src": "id, path, meta_json, meta.mtime",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 6,
        "src": "return meta",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 4,
        "src": "return meta",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 12,
        "src": "def json_dumps(obj: Any, debug_cache: bool) -> str:",
        "target": "mypy.build.json_dumps"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "return json.dumps(obj, indent=2, sort_keys=True)",
        "target": "mypy.build.json_dumps"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "return json.dumps(obj, sort_keys=True, separators=(\",\", \":\"))",
        "target": "mypy.build.json_dumps"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def write_cache(",
        "target": "mypy.build.write_cache"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 55,
        "src": "plugin_data = manager.plugin.report_config_data(ReportConfigContext(id, path, is_check=False))",
        "target": "mypy.build.write_cache"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | int | list[str] | Mapping[str, object] | list[int] | Any]\")",
        "offset": 52,
        "src": "meta = {",
        "target": "mypy.build.write_cache"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 15,
        "src": "\"plugin_data\": plugin_data,",
        "target": "mypy.build.write_cache"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "\"plugin_data\": plugin_data,",
        "target": "mypy.build.write_cache"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | int | list[str] | Mapping[str, object] | list[int] | Any]\")",
        "offset": 4,
        "src": "meta_str = json_dumps(meta, manager.options.debug_cache)",
        "target": "mypy.build.write_cache"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"(str, CacheMeta)\")",
        "offset": 7,
        "src": "return interface_hash, cache_meta_from_dict(meta, data_json)",
        "target": "mypy.build.write_cache"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 0,
        "src": "return interface_hash, cache_meta_from_dict(meta, data_json)",
        "target": "mypy.build.write_cache"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | int | list[str] | Mapping[str, object] | list[int] | Any]\")",
        "offset": 0,
        "src": "return interface_hash, cache_meta_from_dict(meta, data_json)",
        "target": "mypy.build.write_cache"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 183,
        "src": "meta: CacheMeta | None = None",
        "target": "mypy.build"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 120,
        "src": "if self.meta is not None:",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "self.interface_hash = self.meta.interface_hash",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "self.meta_source_hash = self.meta.hash",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 7,
        "src": "self.meta = validate_meta(self.meta, self.id, self.path, self.ignore_all, manager)",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 2,
        "src": "if self.meta:",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 3,
        "src": "self.dependencies = list(self.meta.dependencies)",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 2,
        "src": "self.suppressed = list(self.meta.suppressed)",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 3,
        "src": "assert len(all_deps) == len(self.meta.dep_prios)",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 68,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "self.priorities = {id: pri for id, pri in zip(all_deps, self.meta.dep_prios)}",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "assert len(all_deps) == len(self.meta.dep_lines)",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 72,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "self.dep_line_map = {id: line for id, line in zip(all_deps, self.meta.dep_lines)}",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "helpful-string",
        "column": 28,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 21,
        "src": "manager.log(f\"Deferring module to fine-grained update {path} ({id})\")",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 8,
        "src": "def xmeta(self) -> CacheMeta:",
        "target": "mypy.build.State.xmeta"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (self: State) -> CacheMeta\")",
        "offset": 0,
        "src": "def xmeta(self) -> CacheMeta:",
        "target": "mypy.build"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 1,
        "src": "assert self.meta, \"missing meta on allegedly fresh module\"",
        "target": "mypy.build.State.xmeta"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "return self.meta",
        "target": "mypy.build.State.xmeta"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 25,
        "src": "self.meta is not None",
        "target": "mypy.build.State.is_fresh"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 2,
        "src": "and self.dependencies == self.meta.dependencies",
        "target": "mypy.build.State.is_fresh"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 59,
        "src": "self.meta is not None",
        "target": "mypy.build.State.load_tree"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | None\")",
        "offset": 3,
        "src": "data = _load_json_file(",
        "target": "mypy.build.State.load_tree"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "self.meta.data_json, self.manager, \"Load tree \", \"Could not load tree: \"",
        "target": "mypy.build.State.load_tree"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | None\")",
        "offset": 2,
        "src": "if data is None:",
        "target": "mypy.build.State.load_tree"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 5,
        "src": "self.tree = MypyFile.deserialize(data)",
        "target": "mypy.build.State.load_tree"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"(str, CacheMeta | None)\")",
        "offset": 412,
        "src": "new_interface_hash, self.meta = write_cache(",
        "target": "mypy.build.State.write_cache"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 79,
        "src": "if self.meta:",
        "target": "mypy.build.State.generate_unused_ignore_notes"
      },
      {
        "code": "possibly-undefined",
        "column": 68,
        "message": "Name \"module\" may be undefined",
        "offset": 222,
        "src": "note = note.format(stub_dist=stub_distribution_name(module))",
        "target": "mypy.build"
      },
      {
        "code": "possibly-undefined",
        "column": 69,
        "message": "Name \"module\" may be undefined",
        "offset": 3,
        "src": "manager.missing_stub_packages.add(stub_distribution_name(module))",
        "target": "mypy.build"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 72,
        "src": "for pth in paths:",
        "target": "mypy.build.log_configuration"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "manager.trace(f\"    {pth}\")",
        "target": "mypy.build.log_configuration"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 50,
        "src": "elif manager.stats.get(\"fresh_metas\", 0) > 0:",
        "target": "mypy.build.dispatch"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "elif manager.stats.get(\"fresh_metas\", 0) > 0:",
        "target": "mypy.build.dispatch"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "manager.stats.clear()",
        "target": "mypy.build.dispatch"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 339,
        "src": "oldest_in_scc = min(graph[id].xmeta.data_mtime for id in scc)",
        "target": "mypy.build.process_graph"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 1,
        "src": "viable = {id for id in stale_deps if graph[id].meta is not None}",
        "target": "mypy.build.process_graph"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 2,
        "src": "0 if not viable else max(graph[dep].xmeta.data_mtime for dep in viable)",
        "target": "mypy.build.process_graph"
      },
      {
        "code": "no-any-expr",
        "column": 63,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 3,
        "src": "all_ids = sorted(ascc | viable, key=lambda id: graph[id].xmeta.data_mtime)",
        "target": "mypy.build.process_graph"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 3,
        "src": "if graph[id].xmeta.data_mtime < newest_in_deps:",
        "target": "mypy.build.process_graph"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 5,
        "src": "if graph[id].xmeta.data_mtime > oldest_in_scc:",
        "target": "mypy.build.process_graph"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 4,
        "src": "manager.trace(\" %5s %.0f %s\" % (key, graph[id].xmeta.data_mtime, id))",
        "target": "mypy.build.process_graph"
      }
    ],
    "mypy/checker.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"type_context\" is not using @override but is overriding a method in class \"mypy.plugin.CheckerPluginInterface\"",
        "offset": 454,
        "src": "def type_context(self) -> list[Type | None]:",
        "target": "mypy.checker"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded_func_def\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 192,
        "src": "def visit_overloaded_func_def(self, defn: OverloadedFuncDef, do_items=True) -> None:",
        "target": "mypy.checker.TypeChecker.visit_overloaded_func_def"
      },
      {
        "code": "redundant-expr",
        "column": 17,
        "message": "Condition is always true",
        "offset": 101,
        "src": "elif isinstance(defn.impl, Decorator):",
        "target": "mypy.checker.TypeChecker.check_overlapping_overloads"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 283,
        "src": "def visit_func_def(self, defn: FuncDef) -> None:",
        "target": "mypy.checker.TypeChecker.visit_func_def"
      },
      {
        "code": "redundant-expr",
        "column": 31,
        "message": "Condition is always true",
        "offset": 483,
        "src": "if new_frame is None:",
        "target": "mypy.checker.TypeChecker.check_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 586,
        "src": "for substitutions in itertools.product(*subst):",
        "target": "mypy.checker.TypeChecker.expand_typevars"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"product[tuple[Any, ...]]\")",
        "offset": 0,
        "src": "for substitutions in itertools.product(*subst):",
        "target": "mypy.checker.TypeChecker.expand_typevars"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 1,
        "src": "mapping = dict(substitutions)",
        "target": "mypy.checker.TypeChecker.expand_typevars"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 434,
        "src": "def visit_class_def(self, defn: ClassDef) -> None:",
        "target": "mypy.checker.TypeChecker.visit_class_def"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always false",
        "offset": 290,
        "src": "if isinstance(sym.node, FuncBase):",
        "target": "mypy.checker.TypeChecker.determine_type_of_member"
      },
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "return self.function_type(sym.node)",
        "target": "mypy.checker.TypeChecker.determine_type_of_member"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_from\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 136,
        "src": "def visit_import_from(self, node: ImportFrom) -> None:",
        "target": "mypy.checker.TypeChecker.visit_import_from"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_all\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_import_all(self, node: ImportAll) -> None:",
        "target": "mypy.checker.TypeChecker.visit_import_all"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_import(self, node: Import) -> None:",
        "target": "mypy.checker.TypeChecker.visit_import"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_block\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 25,
        "src": "def visit_block(self, b: Block) -> None:",
        "target": "mypy.checker.TypeChecker.visit_block"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 68,
        "src": "def visit_assignment_stmt(self, s: AssignmentStmt) -> None:",
        "target": "mypy.checker.TypeChecker.visit_assignment_stmt"
      },
      {
        "code": "truthy-bool",
        "column": 23,
        "message": "\"signature\" has type \"Type\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 93,
        "src": "if signature:",
        "target": "mypy.checker.TypeChecker.check_assignment"
      },
      {
        "code": "truthy-bool",
        "column": 24,
        "message": "\"rvalue_type\" has type \"Type\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 220,
        "src": "and rvalue_type",
        "target": "mypy.checker.TypeChecker.check_assignment"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "\"compare_type\" has type \"ProperType\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 175,
        "src": "if compare_type:",
        "target": "mypy.checker.TypeChecker.check_compatibility_super"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 254,
        "src": "if getattr(lvalue, \"node\", None):",
        "target": "mypy.checker.TypeChecker.is_assignable_slot"
      },
      {
        "code": "redundant-expr",
        "column": 27,
        "message": "Condition is always false",
        "offset": 69,
        "src": "if iterable_type is not None and iterable_type != self.iterable_item_type(",
        "target": "mypy.checker.TypeChecker.check_assignment_to_multiple_lvalues"
      },
      {
        "code": "unreachable",
        "column": 57,
        "message": "Right operand of \"and\" is never evaluated",
        "offset": 0,
        "src": "if iterable_type is not None and iterable_type != self.iterable_item_type(",
        "target": "mypy.checker.TypeChecker.check_assignment_to_multiple_lvalues"
      },
      {
        "code": "unreachable",
        "column": 28,
        "message": "Statement is unreachable",
        "offset": 3,
        "src": "self.fail(message_registry.CONTIGUOUS_ITERABLE_EXPECTED, context)",
        "target": "mypy.checker.TypeChecker.check_assignment_to_multiple_lvalues"
      },
      {
        "code": "redundant-expr",
        "column": 31,
        "message": "Condition is always true",
        "offset": 2,
        "src": "if last_idx is None or last_idx + 1 == idx_rval:",
        "target": "mypy.checker.TypeChecker.check_assignment_to_multiple_lvalues"
      },
      {
        "code": "unreachable",
        "column": 51,
        "message": "Right operand of \"or\" is never evaluated",
        "offset": 0,
        "src": "if last_idx is None or last_idx + 1 == idx_rval:",
        "target": "mypy.checker.TypeChecker.check_assignment_to_multiple_lvalues"
      },
      {
        "code": "unreachable",
        "column": 32,
        "message": "Statement is unreachable",
        "offset": 5,
        "src": "self.fail(message_registry.CONTIGUOUS_ITERABLE_EXPECTED, context)",
        "target": "mypy.checker.TypeChecker.check_assignment_to_multiple_lvalues"
      },
      {
        "code": "redundant-expr",
        "column": 27,
        "message": "Condition is always true",
        "offset": 11,
        "src": "if iterable_start is None:",
        "target": "mypy.checker.TypeChecker.check_assignment_to_multiple_lvalues"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"zip[tuple[Any, ...]]\")",
        "offset": 186,
        "src": "types, declared_types = zip(*clean_items)",
        "target": "mypy.checker.TypeChecker.check_multi_assignment_from_union"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "types, declared_types = zip(*clean_items)",
        "target": "mypy.checker.TypeChecker.check_multi_assignment_from_union"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 3,
        "src": "make_simplified_union(list(types)),",
        "target": "mypy.checker.TypeChecker.check_multi_assignment_from_union"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 1,
        "src": "make_simplified_union(list(declared_types)),",
        "target": "mypy.checker.TypeChecker.check_multi_assignment_from_union"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "\"var\" has type \"Var\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 360,
        "src": "if var and not self.current_node_deferred:",
        "target": "mypy.checker.TypeChecker.set_inferred_type"
      },
      {
        "code": "redundant-expr",
        "column": 15,
        "message": "Condition is always false",
        "offset": 41,
        "src": "if isinstance(rvalue.callee, RefExpr) and isinstance(rvalue.callee.node, FuncBase):",
        "target": "mypy.checker.TypeChecker.simple_rvalue"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "typ = rvalue.callee.node.type",
        "target": "mypy.checker.TypeChecker.simple_rvalue"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_expression_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 288,
        "src": "def visit_expression_stmt(self, s: ExpressionStmt) -> None:",
        "target": "mypy.checker.TypeChecker.visit_expression_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 12,
        "src": "def visit_return_stmt(self, s: ReturnStmt) -> None:",
        "target": "mypy.checker.TypeChecker.visit_return_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_if_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 104,
        "src": "def visit_if_stmt(self, s: IfStmt) -> None:",
        "target": "mypy.checker.TypeChecker.visit_if_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_while_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 36,
        "src": "def visit_while_stmt(self, s: WhileStmt) -> None:",
        "target": "mypy.checker.TypeChecker.visit_while_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_operator_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 11,
        "src": "def visit_operator_assignment_stmt(self, s: OperatorAssignmentStmt) -> None:",
        "target": "mypy.checker.TypeChecker.visit_operator_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 24,
        "src": "def visit_assert_stmt(self, s: AssertStmt) -> None:",
        "target": "mypy.checker.TypeChecker.visit_assert_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raise_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 12,
        "src": "def visit_raise_stmt(self, s: RaiseStmt) -> None:",
        "target": "mypy.checker.TypeChecker.visit_raise_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_try_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 29,
        "src": "def visit_try_stmt(self, s: TryStmt) -> None:",
        "target": "mypy.checker.TypeChecker.visit_try_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_for_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 148,
        "src": "def visit_for_stmt(self, s: ForStmt) -> None:",
        "target": "mypy.checker.TypeChecker.visit_for_stmt"
      },
      {
        "code": "redundant-expr",
        "column": 23,
        "message": "Condition is always true",
        "offset": 70,
        "src": "if native_int is None:",
        "target": "mypy.checker.TypeChecker.analyze_range_native_int_type"
      },
      {
        "code": "unreachable",
        "column": 20,
        "message": "Statement is unreachable",
        "offset": 2,
        "src": "elif argt != native_int:",
        "target": "mypy.checker.TypeChecker.analyze_range_native_int_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_del_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 34,
        "src": "def visit_del_stmt(self, s: DelStmt) -> None:",
        "target": "mypy.checker.TypeChecker.visit_del_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_decorator\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 21,
        "src": "def visit_decorator(self, e: Decorator) -> None:",
        "target": "mypy.checker.TypeChecker.visit_decorator"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_with_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 117,
        "src": "def visit_with_stmt(self, s: WithStmt) -> None:",
        "target": "mypy.checker.TypeChecker.visit_with_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_break_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 77,
        "src": "def visit_break_stmt(self, s: BreakStmt) -> None:",
        "target": "mypy.checker.TypeChecker.visit_break_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_continue_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_continue_stmt(self, s: ContinueStmt) -> None:",
        "target": "mypy.checker.TypeChecker.visit_continue_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_match_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_match_stmt(self, s: MatchStmt) -> None:",
        "target": "mypy.checker.TypeChecker.visit_match_stmt"
      },
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always false",
        "offset": 529,
        "src": "if type_being_compared is not None:",
        "target": "mypy.checker.TypeChecker.find_type_equals_check"
      },
      {
        "code": "unreachable",
        "column": 20,
        "message": "Statement is unreachable",
        "offset": 7,
        "src": "return {}, {}",
        "target": "mypy.checker.TypeChecker.find_type_equals_check"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 139,
        "src": "if called_type.items[0].def_extras.get(\"first_arg\"):",
        "target": "mypy.checker.TypeChecker.find_isinstance_check_helper"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "if called_type.items[0].def_extras.get(\"first_arg\"):",
        "target": "mypy.checker.TypeChecker.find_isinstance_check_helper"
      },
      {
        "code": "redundant-expr",
        "column": 15,
        "message": "Condition is always false",
        "offset": 519,
        "src": "if target and not is_same_type(target, expr_type):",
        "target": "mypy.checker.TypeChecker.refine_identity_comparison_expression"
      },
      {
        "code": "unreachable",
        "column": 26,
        "message": "Right operand of \"and\" is never evaluated",
        "offset": 0,
        "src": "if target and not is_same_type(target, expr_type):",
        "target": "mypy.checker.TypeChecker.refine_identity_comparison_expression"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 3,
        "src": "return None, {}",
        "target": "mypy.checker.TypeChecker.refine_identity_comparison_expression"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"named_generic_type\" is not using @override but is overriding a method in class \"mypy.plugin.CheckerPluginInterface\"",
        "offset": 566,
        "src": "def named_generic_type(self, name: str, args: list[Type]) -> Instance:",
        "target": "mypy.checker.TypeChecker.named_generic_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"fail\" is not using @override but is overriding a method in class \"mypy.plugin.CheckerPluginInterface\"",
        "offset": 251,
        "src": "def fail(",
        "target": "mypy.checker.TypeChecker.fail"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_expression_type\" is not using @override but is overriding a method in class \"mypy.plugin.CheckerPluginInterface\"",
        "offset": 368,
        "src": "def get_expression_type(self, node: Expression, type_context: Type | None = None) -> Type:",
        "target": "mypy.checker.TypeChecker.get_expression_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.typetraverser.TypeTraverserVisitor\"",
        "offset": 10,
        "src": "def visit_type_var(self, t: TypeVarType) -> None:",
        "target": "mypy.checker.CollectArgTypeVarTypes.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"type\" is not using @override but is overriding a method in class \"mypy.treetransform.TransformVisitor\"",
        "offset": 349,
        "src": "def type(self, type: Type) -> Type:",
        "target": "mypy.checker.TypeTransformVisitor.type"
      },
      {
        "code": "redundant-expr",
        "column": 9,
        "message": "Condition is always true",
        "offset": 130,
        "src": "elif isinstance(t, FunctionLike):",
        "target": "mypy.checker.is_more_general_arg_prefix"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always true",
        "offset": 1,
        "src": "if isinstance(s, FunctionLike):",
        "target": "mypy.checker.is_more_general_arg_prefix"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 81,
        "src": "def visit_uninhabited_type(self, t: UninhabitedType) -> bool:",
        "target": "mypy.checker.InvalidInferredTypes.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 3,
        "src": "def visit_erased_type(self, t: ErasedType) -> bool:",
        "target": "mypy.checker.InvalidInferredTypes.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 4,
        "src": "def visit_type_var(self, t: TypeVarType) -> bool:",
        "target": "mypy.checker.InvalidInferredTypes.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 9,
        "src": "def visit_uninhabited_type(self, t: UninhabitedType) -> Type:",
        "target": "mypy.checker.SetNothingToAny.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 5,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> Type:",
        "target": "mypy.checker.SetNothingToAny.visit_type_alias_type"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always true",
        "offset": 233,
        "src": "if last_operator is None:",
        "target": "mypy.checker.group_comparison_operands"
      },
      {
        "code": "redundant-expr",
        "column": 9,
        "message": "Condition is always true",
        "offset": 83,
        "src": "elif isinstance(func, FuncBase):",
        "target": "mypy.checker.is_static"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 88,
        "src": "def visit_assignment_stmt(self, s: AssignmentStmt) -> None:",
        "target": "mypy.checker.VarAssignVisitor.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_name_expr(self, e: NameExpr) -> None:",
        "target": "mypy.checker.VarAssignVisitor.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_member_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_member_expr(self, e: MemberExpr) -> None:",
        "target": "mypy.checker.VarAssignVisitor.visit_member_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_index_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 6,
        "src": "def visit_index_expr(self, e: IndexExpr) -> None:",
        "target": "mypy.checker.VarAssignVisitor.visit_index_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_with_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 6,
        "src": "def visit_with_stmt(self, s: WithStmt) -> None:",
        "target": "mypy.checker.VarAssignVisitor.visit_with_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_for_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 8,
        "src": "def visit_for_stmt(self, s: ForStmt) -> None:",
        "target": "mypy.checker.VarAssignVisitor.visit_for_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 8,
        "src": "def visit_assignment_expr(self, e: AssignmentExpr) -> None:",
        "target": "mypy.checker.VarAssignVisitor.visit_assignment_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_as_pattern\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 6,
        "src": "def visit_as_pattern(self, p: AsPattern) -> None:",
        "target": "mypy.checker.VarAssignVisitor.visit_as_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_starred_pattern\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 8,
        "src": "def visit_starred_pattern(self, p: StarredPattern) -> None:",
        "target": "mypy.checker.VarAssignVisitor.visit_starred_pattern"
      }
    ],
    "mypy/checkexpr.py": [
      {
        "code": "helpful-string",
        "column": 33,
        "message": "The type \"type[mypy.nodes.RefExpr]\" doesn't define a __format__, __str__ or __repr__ method",
        "offset": 284,
        "src": "raise AssertionError(f\"Unknown RefExpr subclass: {type(expr)}\")",
        "target": "mypy.checkexpr.extract_refexpr_names"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 78,
        "src": "def visit_name_expr(self, e: NameExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 113,
        "src": "def visit_call_expr(self, e: CallExpr, allow_none_return: bool = False) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_call_expr"
      },
      {
        "code": "truthy-bool",
        "column": 34,
        "message": "\"item_name_expr\" has type \"Expression\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 409,
        "src": "key_context = item_name_expr or item_arg",
        "target": "mypy.checkexpr.ExpressionChecker.validate_typeddict_kwargs"
      },
      {
        "code": "possibly-undefined",
        "column": 23,
        "message": "Name \"actual_types\" may be undefined",
        "offset": 1723,
        "src": "assert len(actual_types) == len(actuals) == len(actual_kinds)",
        "target": "mypy.checkexpr"
      },
      {
        "code": "possibly-undefined",
        "column": 19,
        "message": "Name \"callee_arg_types\" may be undefined",
        "offset": 2,
        "src": "if len(callee_arg_types) != len(actual_types):",
        "target": "mypy.checkexpr"
      },
      {
        "code": "possibly-undefined",
        "column": 48,
        "message": "Name \"callee_arg_kinds\" may be undefined",
        "offset": 8,
        "src": "assert len(callee_arg_types) == len(callee_arg_kinds)",
        "target": "mypy.checkexpr"
      },
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always false",
        "offset": 4,
        "src": "if actual_type is None:",
        "target": "mypy.checkexpr.ExpressionChecker.check_argument_types"
      },
      {
        "code": "unreachable",
        "column": 20,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "continue  # Some kind of error was already reported.",
        "target": "mypy.checkexpr.ExpressionChecker.check_argument_types"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"zip[tuple[Any, ...]]\")",
        "offset": 135,
        "src": "returns, inferred_types = zip(*unioned_return)",
        "target": "mypy.checkexpr.ExpressionChecker.check_overload_call"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "returns, inferred_types = zip(*unioned_return)",
        "target": "mypy.checkexpr.ExpressionChecker.check_overload_call"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 6,
        "src": "make_simplified_union(list(returns), context.line, context.column),",
        "target": "mypy.checkexpr.ExpressionChecker.check_overload_call"
      },
      {
        "code": "no-any-expr",
        "column": 74,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 1,
        "src": "self.combine_function_signatures(get_proper_types(inferred_types)),",
        "target": "mypy.checkexpr.ExpressionChecker.check_overload_call"
      },
      {
        "code": "helpful-string",
        "column": 19,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 620,
        "src": "name = f\"{context.callee.name} of {object_type}\"",
        "target": "mypy.checkexpr.ExpressionChecker.check_intersection_call"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_member_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 5,
        "src": "def visit_member_expr(self, e: MemberExpr, is_lvalue: bool = False) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_member_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_int_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 98,
        "src": "def visit_int_expr(self, e: IntExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_int_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_str_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 4,
        "src": "def visit_str_expr(self, e: StrExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_str_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_bytes_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 4,
        "src": "def visit_bytes_expr(self, e: BytesExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_bytes_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 4,
        "src": "def visit_float_expr(self, e: FloatExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_float_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_complex_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 4,
        "src": "def visit_complex_expr(self, e: ComplexExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_complex_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_ellipsis\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 4,
        "src": "def visit_ellipsis(self, e: EllipsisExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_ellipsis"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_op_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 4,
        "src": "def visit_op_expr(self, e: OpExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_op_expr"
      },
      {
        "code": "redundant-expr",
        "column": 17,
        "message": "Condition is always true",
        "offset": 93,
        "src": "elif use_reverse is UseReverse.ALWAYS:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_op_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_comparison_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 16,
        "src": "def visit_comparison_expr(self, e: ComparisonExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_comparison_expr"
      },
      {
        "code": "redundant-expr",
        "column": 15,
        "message": "Condition is always true",
        "offset": 141,
        "src": "if result is None:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_comparison_expr"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 3,
        "src": "result = join.join_types(result, sub_result)",
        "target": "mypy.checkexpr.ExpressionChecker.visit_comparison_expr"
      },
      {
        "code": "possibly-undefined",
        "column": 16,
        "message": "Name \"left_map\" may be undefined",
        "offset": 552,
        "src": "and left_map is None",
        "target": "mypy.checkexpr"
      },
      {
        "code": "possibly-undefined",
        "column": 16,
        "message": "Name \"right_map\" may be undefined",
        "offset": 8,
        "src": "and right_map is None",
        "target": "mypy.checkexpr"
      },
      {
        "code": "possibly-undefined",
        "column": 22,
        "message": "Name \"restricted_left_type\" may be undefined",
        "offset": 31,
        "src": "if isinstance(restricted_left_type, UninhabitedType):",
        "target": "mypy.checkexpr"
      },
      {
        "code": "possibly-undefined",
        "column": 13,
        "message": "Name \"result_is_left\" may be undefined",
        "offset": 3,
        "src": "elif result_is_left:",
        "target": "mypy.checkexpr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 22,
        "src": "def visit_assignment_expr(self, e: AssignmentExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_assignment_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unary_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 11,
        "src": "def visit_unary_expr(self, e: UnaryExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_unary_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_index_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 12,
        "src": "def visit_index_expr(self, e: IndexExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_index_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_cast_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 294,
        "src": "def visit_cast_expr(self, expr: CastExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_cast_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_type_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 29,
        "src": "def visit_assert_type_expr(self, expr: AssertTypeExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_assert_type_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_reveal_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 26,
        "src": "def visit_reveal_expr(self, expr: RevealExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_reveal_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_application\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 72,
        "src": "def visit_type_application(self, tapp: TypeApplication) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_type_application"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 41,
        "src": "def visit_type_alias_expr(self, alias: TypeAliasExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_type_alias_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 164,
        "src": "def visit_list_expr(self, e: ListExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_list_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 4,
        "src": "def visit_set_expr(self, e: SetExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_set_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 85,
        "src": "def visit_tuple_expr(self, e: TupleExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 163,
        "src": "def visit_dict_expr(self, e: DictExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_dict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_lambda_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 101,
        "src": "def visit_lambda_expr(self, e: LambdaExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_lambda_expr"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 60,
        "src": "if called_type.items[0].def_extras.get(\"first_arg\") == target:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_lambda_expr"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "if called_type.items[0].def_extras.get(\"first_arg\") == target:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_lambda_expr"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "if called_type.items[0].def_extras.get(\"first_arg\") == target:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_lambda_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_super_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 98,
        "src": "def visit_super_expr(self, e: SuperExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_super_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_slice_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 166,
        "src": "def visit_slice_expr(self, e: SliceExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_slice_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 12,
        "src": "def visit_list_comprehension(self, e: ListComprehension) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_list_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 5,
        "src": "def visit_set_comprehension(self, e: SetComprehension) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_set_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_generator_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 5,
        "src": "def visit_generator_expr(self, e: GeneratorExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_generator_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dictionary_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 49,
        "src": "def visit_dictionary_comprehension(self, e: DictionaryComprehension) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_dictionary_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_conditional_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 65,
        "src": "def visit_conditional_expr(self, e: ConditionalExpr, allow_none_return: bool = False) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_conditional_expr"
      },
      {
        "code": "possibly-undefined",
        "column": 82,
        "message": "Name \"t0\" may be undefined",
        "offset": 160,
        "src": "self.per_line_checking_time_ns[node.line] += time.perf_counter_ns() - t0",
        "target": "mypy.checkexpr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 83,
        "src": "def visit_yield_expr(self, e: YieldExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_yield_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_await_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 21,
        "src": "def visit_await_expr(self, e: AwaitExpr, allow_none_return: bool = False) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_await_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_from_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 37,
        "src": "def visit_yield_from_expr(self, e: YieldFromExpr, allow_none_return: bool = False) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_yield_from_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_temp_node\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 69,
        "src": "def visit_temp_node(self, e: TempNode) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_temp_node"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_type_var_expr(self, e: TypeVarExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_type_var_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_paramspec_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 12,
        "src": "def visit_paramspec_expr(self, e: ParamSpecExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_paramspec_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_type_var_tuple_expr(self, e: TypeVarTupleExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_type_var_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_newtype_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_newtype_expr(self, e: NewTypeExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_newtype_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_namedtuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_namedtuple_expr(self, e: NamedTupleExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_namedtuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_enum_call_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 12,
        "src": "def visit_enum_call_expr(self, e: EnumCallExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_enum_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 15,
        "src": "def visit_typeddict_expr(self, e: TypedDictExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_typeddict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit__promote_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit__promote_expr(self, e: PromoteExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit__promote_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_star_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_star_expr(self, e: StarExpr) -> Type:",
        "target": "mypy.checkexpr.ExpressionChecker.visit_star_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 85,
        "src": "def visit_any(self, t: AnyType) -> bool:",
        "target": "mypy.checkexpr.HasAnyType.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 12,
        "src": "def visit_callable_type(self, t: CallableType) -> bool:",
        "target": "mypy.checkexpr.HasAnyType.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 5,
        "src": "def visit_type_var(self, t: TypeVarType) -> bool:",
        "target": "mypy.checkexpr.HasAnyType.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 4,
        "src": "def visit_param_spec(self, t: ParamSpecType) -> bool:",
        "target": "mypy.checkexpr.HasAnyType.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 4,
        "src": "def visit_type_var_tuple(self, t: TypeVarTupleType) -> bool:",
        "target": "mypy.checkexpr.HasAnyType.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.checkexpr.HasAnyType\"",
        "offset": 9,
        "src": "def visit_any(self, t: AnyType) -> bool:",
        "target": "mypy.checkexpr.HasUntypedType.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 127,
        "src": "def visit_callable_type(self, t: CallableType) -> Type:",
        "target": "mypy.checkexpr.PolyTranslator.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 10,
        "src": "def visit_type_var(self, t: TypeVarType) -> Type:",
        "target": "mypy.checkexpr.PolyTranslator.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 5,
        "src": "def visit_param_spec(self, t: ParamSpecType) -> Type:",
        "target": "mypy.checkexpr.PolyTranslator.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 5,
        "src": "def visit_type_var_tuple(self, t: TypeVarTupleType) -> Type:",
        "target": "mypy.checkexpr.PolyTranslator.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 5,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> Type:",
        "target": "mypy.checkexpr.PolyTranslator.visit_type_alias_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 9,
        "src": "def visit_instance(self, t: Instance) -> Type:",
        "target": "mypy.checkexpr.PolyTranslator.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 45,
        "src": "def visit_callable_type(self, t: CallableType) -> bool:",
        "target": "mypy.checkexpr.ArgInferSecondPassQuery.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 11,
        "src": "def visit_type_var(self, t: TypeVarType) -> bool:",
        "target": "mypy.checkexpr.HasTypeVarQuery.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 3,
        "src": "def visit_param_spec(self, t: ParamSpecType) -> bool:",
        "target": "mypy.checkexpr.HasTypeVarQuery.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 3,
        "src": "def visit_type_var_tuple(self, t: TypeVarTupleType) -> bool:",
        "target": "mypy.checkexpr.HasTypeVarQuery.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 14,
        "src": "def visit_erased_type(self, t: ErasedType) -> bool:",
        "target": "mypy.checkexpr.HasErasedComponentsQuery.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 14,
        "src": "def visit_uninhabited_type(self, t: UninhabitedType) -> bool:",
        "target": "mypy.checkexpr.HasUninhabitedComponentsQuery.visit_uninhabited_type"
      }
    ],
    "mypy/checkmember.py": [
      {
        "code": "possibly-undefined",
        "column": 26,
        "message": "Name \"impl\" may be undefined",
        "offset": 372,
        "src": "if isinstance(impl.type, CallableType)",
        "target": "mypy.checkmember"
      },
      {
        "code": "truthy-bool",
        "column": 7,
        "message": "\"result\" has type \"Type\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 498,
        "src": "if result and not mx.is_lvalue and not implicit:",
        "target": "mypy.checkmember.analyze_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.typetraverser.TypeTraverserVisitor\"",
        "offset": 14,
        "src": "def visit_callable_type(self, t: CallableType) -> None:",
        "target": "mypy.checkmember.FreezeTypeVarsVisitor.visit_callable_type"
      },
      {
        "code": "unreachable",
        "column": 48,
        "message": "Right operand of \"and\" is never evaluated",
        "offset": 206,
        "src": "isinstance(node.node, FuncBase) and node.node.is_class",
        "target": "mypy.checkmember.analyze_class_attribute_access"
      },
      {
        "code": "unreachable",
        "column": 8,
        "message": "Statement is unreachable",
        "offset": 43,
        "src": "typ = function_type(node.node, mx.named_type(\"builtins.function\"))",
        "target": "mypy.checkmember.analyze_class_attribute_access"
      },
      {
        "code": "redundant-expr",
        "column": 7,
        "message": "Condition is always false",
        "offset": 234,
        "src": "if isinstance(n, FuncBase):",
        "target": "mypy.checkmember.is_valid_constructor"
      },
      {
        "code": "unreachable",
        "column": 8,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "return True",
        "target": "mypy.checkmember.is_valid_constructor"
      }
    ],
    "mypy/checkpattern.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_as_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.PatternVisitor\"",
        "offset": 134,
        "src": "def visit_as_pattern(self, o: AsPattern) -> PatternType:",
        "target": "mypy.checkpattern.PatternChecker.visit_as_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_or_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.PatternVisitor\"",
        "offset": 17,
        "src": "def visit_or_pattern(self, o: OrPattern) -> PatternType:",
        "target": "mypy.checkpattern.PatternChecker.visit_or_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_value_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.PatternVisitor\"",
        "offset": 49,
        "src": "def visit_value_pattern(self, o: ValuePattern) -> PatternType:",
        "target": "mypy.checkpattern.PatternChecker.visit_value_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_singleton_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.PatternVisitor\"",
        "offset": 11,
        "src": "def visit_singleton_pattern(self, o: SingletonPattern) -> PatternType:",
        "target": "mypy.checkpattern.PatternChecker.visit_singleton_pattern"
      },
      {
        "code": "redundant-expr",
        "column": 13,
        "message": "Condition is always true",
        "offset": 5,
        "src": "elif value is None:",
        "target": "mypy.checkpattern.PatternChecker.visit_singleton_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_sequence_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.PatternVisitor\"",
        "offset": 10,
        "src": "def visit_sequence_pattern(self, o: SequencePattern) -> PatternType:",
        "target": "mypy.checkpattern.PatternChecker.visit_sequence_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_starred_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.PatternVisitor\"",
        "offset": 215,
        "src": "def visit_starred_pattern(self, o: StarredPattern) -> PatternType:",
        "target": "mypy.checkpattern.PatternChecker.visit_starred_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_mapping_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.PatternVisitor\"",
        "offset": 7,
        "src": "def visit_mapping_pattern(self, o: MappingPattern) -> PatternType:",
        "target": "mypy.checkpattern.PatternChecker.visit_mapping_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.PatternVisitor\"",
        "offset": 67,
        "src": "def visit_class_pattern(self, o: ClassPattern) -> PatternType:",
        "target": "mypy.checkpattern.PatternChecker.visit_class_pattern"
      },
      {
        "code": "helpful-string",
        "column": 20,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 152,
        "src": "message_registry.CLASS_PATTERN_UNKNOWN_KEYWORD.format(",
        "target": "mypy.checkpattern.PatternChecker.visit_class_pattern"
      }
    ],
    "mypy/checkstrformat.py": [
      {
        "code": "helpful-string",
        "column": 16,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 722,
        "src": "\"Only index and member expressions are allowed in\"",
        "target": "mypy.checkstrformat.StringFormatterChecker.validate_and_transform_accessors"
      },
      {
        "code": "redundant-expr",
        "column": 13,
        "message": "Condition is always true",
        "offset": 54,
        "src": "elif isinstance(expr, StrExpr):",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_str_interpolation"
      },
      {
        "code": "redundant-expr",
        "column": 13,
        "message": "Condition is always true",
        "offset": 163,
        "src": "elif isinstance(expr, StrExpr):",
        "target": "mypy.checkstrformat.StringFormatterChecker.build_dict_type"
      }
    ],
    "mypy/config_parser.py": [
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 41,
        "src": "_INI_PARSER_CALLABLE: _TypeAlias = Callable[[Any], _CONFIG_VALUE_TYPES]",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 163,
        "src": "\"exclude\": lambda s: [s.strip()],",
        "target": ""
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 59,
        "src": "toml_data = tomllib.load(f)",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "toml_data = toml_data.get(\"tool\", {})",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression type contains \"Any\" (has type \"dict[Any, Any]\")",
        "offset": 0,
        "src": "toml_data = toml_data.get(\"tool\", {})",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "if \"mypy\" not in toml_data:",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 2,
        "src": "toml_data = {\"mypy\": toml_data[\"mypy\"]}",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "toml_data = {\"mypy\": toml_data[\"mypy\"]}",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "toml_data = {\"mypy\": toml_data[\"mypy\"]}",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-explicit",
        "column": 16,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "parser: MutableMapping[str, Any] = destructure_overrides(toml_data)",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 73,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "parser: MutableMapping[str, Any] = destructure_overrides(toml_data)",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 77,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | RawConfigParser\")",
        "offset": 9,
        "src": "if config_file in defaults.SHARED_CONFIG_FILES and \"mypy\" not in parser:",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | RawConfigParser\")",
        "offset": 10,
        "src": "if \"mypy\" not in parser:",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "possibly-undefined",
        "column": 21,
        "message": "Name \"parser\" may be undefined",
        "offset": 0,
        "src": "if \"mypy\" not in parser:",
        "target": "mypy.config_parser"
      },
      {
        "code": "possibly-undefined",
        "column": 23,
        "message": "Name \"file_read\" may be undefined",
        "offset": 1,
        "src": "if filename or file_read not in defaults.SHARED_CONFIG_FILES:",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | RawConfigParser\")",
        "offset": 3,
        "src": "section = parser[\"mypy\"]",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | SectionProxy\")",
        "offset": 0,
        "src": "section = parser[\"mypy\"]",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "possibly-undefined",
        "column": 17,
        "message": "Name \"file_read\" may be undefined",
        "offset": 1,
        "src": "prefix = f\"{file_read}: [mypy]: \"",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression type contains \"Any\" (has type \"Any | SectionProxy\")",
        "offset": 2,
        "src": "prefix, options, set_strict_flags, section, config_types, stderr",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "possibly-undefined",
        "column": 56,
        "message": "Name \"config_types\" may be undefined",
        "offset": 0,
        "src": "prefix, options, set_strict_flags, section, config_types, stderr",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"(str, Any) | (str, SectionProxy)\")",
        "offset": 6,
        "src": "for name, section in parser.items():",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | RawConfigParser\")",
        "offset": 0,
        "src": "for name, section in parser.items():",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"dict_items[str, Any] | ItemsView[str, SectionProxy]\")",
        "offset": 0,
        "src": "for name, section in parser.items():",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression type contains \"Any\" (has type \"Any | SectionProxy\")",
        "offset": 4,
        "src": "prefix, options, set_strict_flags, section, config_types, stderr",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "possibly-undefined",
        "column": 60,
        "message": "Name \"config_types\" may be undefined",
        "offset": 0,
        "src": "prefix, options, set_strict_flags, section, config_types, stderr",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 53,
        "src": "def destructure_overrides(toml_data: dict[str, Any]) -> dict[str, Any]:",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 32,
        "src": "if \"overrides\" not in toml_data[\"mypy\"]:",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if \"overrides\" not in toml_data[\"mypy\"]:",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return toml_data",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "if not isinstance(toml_data[\"mypy\"][\"overrides\"], list):",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if not isinstance(toml_data[\"mypy\"][\"overrides\"], list):",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 6,
        "src": "result = toml_data.copy()",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "for override in result[\"mypy\"][\"overrides\"]:",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "for override in result[\"mypy\"][\"overrides\"]:",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for override in result[\"mypy\"][\"overrides\"]:",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if \"module\" not in override:",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "if isinstance(override[\"module\"], str):",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "modules = [override[\"module\"]]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "elif isinstance(override[\"module\"], list):",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "modules = override[\"module\"]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "module_overrides = override.copy()",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "del module_overrides[\"module\"]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "del module_overrides[\"module\"]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "if old_config_name not in result:",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "result[old_config_name] = module_overrides",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "result[old_config_name] = module_overrides",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "for new_key, new_value in module_overrides.items():",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for new_key, new_value in module_overrides.items():",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "new_key in result[old_config_name]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"False | Any\")",
        "offset": 0,
        "src": "new_key in result[old_config_name]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "new_key in result[old_config_name]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "new_key in result[old_config_name]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "and result[old_config_name][new_key] != new_value",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "and result[old_config_name][new_key] != new_value",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "and result[old_config_name][new_key] != new_value",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 64,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "and result[old_config_name][new_key] != new_value",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "\"toml config file contains \"",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 4,
        "src": "result[old_config_name][new_key] = new_value",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "result[old_config_name][new_key] = new_value",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "result[old_config_name][new_key] = new_value",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "result[old_config_name][new_key] = new_value",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "del result[\"mypy\"][\"overrides\"]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "del result[\"mypy\"][\"overrides\"]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "del result[\"mypy\"][\"overrides\"]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return result",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def parse_section(",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Mapping[str, Any]\")",
        "offset": 22,
        "src": "for key in section:",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 3,
        "src": "if key in config_types:",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "ct = config_types[key]",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ct = config_types[key]",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "f\"{prefix}Unrecognized option: {key} = {section[key]}\"",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression type contains \"Any\" (has type \"Mapping[str, Any]\")",
        "offset": 0,
        "src": "f\"{prefix}Unrecognized option: {key} = {section[key]}\"",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 11,
        "src": "dv = getattr(template, key, None)",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "if dv is None:",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression type contains \"Any\" (has type \"Mapping[str, Any]\")",
        "offset": 4,
        "src": "report_dirs[report_type] = str(section[key])",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "report_dirs[report_type] = str(section[key])",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 21,
        "src": "print(f\"{prefix}Unrecognized option: {key} = {section[key]}\", file=stderr)",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 66,
        "message": "Expression type contains \"Any\" (has type \"Mapping[str, Any]\")",
        "offset": 0,
        "src": "print(f\"{prefix}Unrecognized option: {key} = {section[key]}\", file=stderr)",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"type[Any] | type[None]\")",
        "offset": 5,
        "src": "ct = type(dv)",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "ct = type(dv)",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "v: Any = None",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if ct is bool:",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"Mapping[str, Any]\")",
        "offset": 1,
        "src": "if isinstance(section, dict):",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"Mapping[str, Any]\")",
        "offset": 3,
        "src": "v = section.getboolean(key)  # type: ignore[attr-defined]  # Until better stub",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": null,
        "column": 24,
        "message": "Error code \"no-any-expr\" not covered by \"type: ignore\" comment",
        "offset": 0,
        "src": "v = section.getboolean(key)  # type: ignore[attr-defined]  # Until better stub",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "v = not v",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "elif callable(ct):",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "v = ct(section.get(key))",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"Mapping[str, Any]\")",
        "offset": 0,
        "src": "v = ct(section.get(key))",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "v = ct(section.get(key))",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 11,
        "src": "if v:",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "results[options_key] = v",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 11,
        "src": "def convert_to_boolean(value: Any | None) -> bool:",
        "target": "mypy.config_parser.convert_to_boolean"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 2,
        "src": "if isinstance(value, bool):",
        "target": "mypy.config_parser.convert_to_boolean"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 2,
        "src": "if not isinstance(value, str):",
        "target": "mypy.config_parser.convert_to_boolean"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "value = str(value)",
        "target": "mypy.config_parser.convert_to_boolean"
      }
    ],
    "mypy/constant_fold.py": [
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 144,
        "src": "ret = left**right",
        "target": "mypy.constant_fold.constant_fold_binary_int_op"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert isinstance(ret, int)",
        "target": "mypy.constant_fold.constant_fold_binary_int_op"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"Any | float\")",
        "offset": 25,
        "src": "ret = left**right",
        "target": "mypy.constant_fold.constant_fold_binary_float_op"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"Any | float\")",
        "offset": 4,
        "src": "assert isinstance(ret, float), ret",
        "target": "mypy.constant_fold.constant_fold_binary_float_op"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "assert isinstance(ret, float), ret",
        "target": "mypy.constant_fold.constant_fold_binary_float_op"
      }
    ],
    "mypy/constraints.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 93,
        "src": "def __repr__(self) -> str:",
        "target": "mypy.constraints.Constraint.__repr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 6,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.constraints.Constraint.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.constraints.Constraint.__eq__"
      },
      {
        "code": "redundant-expr",
        "column": 15,
        "message": "Condition is always false",
        "offset": 29,
        "src": "if actual is None and callee.arg_kinds[i] in (ARG_STAR, ARG_STAR2):",
        "target": "mypy.constraints.infer_constraints_for_callable"
      },
      {
        "code": "unreachable",
        "column": 34,
        "message": "Right operand of \"and\" is never evaluated",
        "offset": 0,
        "src": "if actual is None and callee.arg_kinds[i] in (ARG_STAR, ARG_STAR2):",
        "target": "mypy.constraints.infer_constraints_for_callable"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 3,
        "src": "incomplete_star_mapping = True",
        "target": "mypy.constraints.infer_constraints_for_callable"
      },
      {
        "code": "redundant-expr",
        "column": 17,
        "message": "Condition is always true",
        "offset": 52,
        "src": "elif isinstance(unpacked_type, TupleType):",
        "target": "mypy.constraints.infer_constraints_for_callable"
      },
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always true",
        "offset": 367,
        "src": "if option is not None:",
        "target": "mypy.constraints.any_constraints"
      },
      {
        "code": "unreachable",
        "column": 20,
        "message": "Statement is unreachable",
        "offset": 3,
        "src": "merged_option = None",
        "target": "mypy.constraints.any_constraints"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeQuery\"",
        "offset": 111,
        "src": "def visit_uninhabited_type(self, t: UninhabitedType) -> bool:",
        "target": "mypy.constraints.CompleteTypeVisitor.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 22,
        "src": "def visit_unbound_type(self, template: UnboundType) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_any(self, template: AnyType) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_none_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_none_type(self, template: NoneType) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_none_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_uninhabited_type(self, template: UninhabitedType) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_erased_type(self, template: ErasedType) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_deleted_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_deleted_type(self, template: DeletedType) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_deleted_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_literal_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_literal_type(self, template: LiteralType) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_literal_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_partial_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_partial_type(self, template: PartialType) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_partial_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_type_var(self, template: TypeVarType) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_param_spec(self, template: ParamSpecType) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_type_var_tuple(self, template: TypeVarTupleType) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unpack_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_unpack_type(self, template: UnpackType) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_unpack_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_parameters\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_parameters(self, template: Parameters) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_parameters"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 13,
        "src": "def visit_instance(self, template: Instance) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 303,
        "src": "def visit_callable_type(self, template: CallableType) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 161,
        "src": "def visit_tuple_type(self, template: TupleType) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 97,
        "src": "def visit_typeddict_type(self, template: TypedDictType) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 14,
        "src": "def visit_union_type(self, template: UnionType) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_union_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_intersection_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_intersection_type(self, template: IntersectionType) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_intersection_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_alias_type(self, template: TypeAliasType) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_type_alias_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 20,
        "src": "def visit_overloaded(self, template: Overloaded) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_overloaded"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 10,
        "src": "def visit_type_type(self, template: TypeType) -> list[Constraint]:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_type_type"
      }
    ],
    "mypy/copytype.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 47,
        "src": "def visit_unbound_type(self, t: UnboundType) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_any(self, t: AnyType) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_none_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_none_type(self, t: NoneType) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_none_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_uninhabited_type(self, t: UninhabitedType) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_erased_type(self, t: ErasedType) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_deleted_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_deleted_type(self, t: DeletedType) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_deleted_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_instance(self, t: Instance) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_type_var(self, t: TypeVarType) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_param_spec(self, t: ParamSpecType) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_parameters\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_parameters(self, t: Parameters) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_parameters"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 10,
        "src": "def visit_type_var_tuple(self, t: TypeVarTupleType) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unpack_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_unpack_type(self, t: UnpackType) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_unpack_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_partial_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_partial_type(self, t: PartialType) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_partial_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_callable_type(self, t: CallableType) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_tuple_type(self, t: TupleType) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_typeddict_type(self, t: TypedDictType) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_literal_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_literal_type(self, t: LiteralType) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_literal_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_union_type(self, t: UnionType) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_union_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_intersection_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_intersection_type(self, t: IntersectionType) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_intersection_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_overloaded(self, t: Overloaded) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_overloaded"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_type(self, t: TypeType) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_type_type"
      },
      {
        "code": "no-any-explicit",
        "column": 44,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 2,
        "src": "return self.copy_common(t, TypeType(cast(Any, t.item)))",
        "target": "mypy.copytype.TypeShallowCopier.visit_type_type"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return self.copy_common(t, TypeType(cast(Any, t.item)))",
        "target": "mypy.copytype.TypeShallowCopier.visit_type_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 2,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> ProperType:",
        "target": "mypy.copytype.TypeShallowCopier.visit_type_alias_type"
      }
    ],
    "mypy/dmypy/client.py": [
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 277,
        "src": "if not args.action:",
        "target": "mypy.dmypy.client.main"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 6,
        "src": "fail(err.args[0])",
        "target": "mypy.dmypy.client.main"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "fail(err.args[0])",
        "target": "mypy.dmypy.client.main"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 42,
        "src": "get_status(args.status_file)",
        "target": "mypy.dmypy.client.do_start"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 34,
        "src": "start_options = process_start_options(args.flags, allow_sources)",
        "target": "mypy.dmypy.client.start_server"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if daemonize(start_options, args.status_file, timeout=args.timeout, log_file=args.log_file):",
        "target": "mypy.dmypy.client.start_server"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if daemonize(start_options, args.status_file, timeout=args.timeout, log_file=args.log_file):",
        "target": "mypy.dmypy.client.start_server"
      },
      {
        "code": "no-any-expr",
        "column": 81,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if daemonize(start_options, args.status_file, timeout=args.timeout, log_file=args.log_file):",
        "target": "mypy.dmypy.client.start_server"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "wait_for_server(args.status_file)",
        "target": "mypy.dmypy.client.start_server"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 37,
        "src": "if not is_running(args.status_file):",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 4,
        "src": "response = request(",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "args.status_file,",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "args=args.flags,",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "export_types=args.export_types,",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 3,
        "src": "if \"restart\" in response:",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "print(f\"Restarting: {response['restart']}\")",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "print(f\"Restarting: {response['restart']}\")",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "args.status_file,",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "args=args.flags,",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "export_types=args.export_types,",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 4,
        "src": "response[\"roundtrip_time\"] = t1 - t0",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "status = read_status(args.status_file)",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if args.verbose:",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 5,
        "src": "response = request(",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "args.status_file, \"status\", fswatcher_dump_file=args.fswatcher_dump_file, timeout=5",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "args.status_file, \"status\", fswatcher_dump_file=args.fswatcher_dump_file, timeout=5",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if args.verbose or \"error\" in response:",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "if args.verbose or \"error\" in response:",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "if args.verbose or \"error\" in response:",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "show_stats(response)",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "if \"error\" in response:",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 9,
        "src": "response = request(args.status_file, \"stop\", timeout=5)",
        "target": "mypy.dmypy.client.do_stop"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "response = request(args.status_file, \"stop\", timeout=5)",
        "target": "mypy.dmypy.client.do_stop"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "if \"error\" in response:",
        "target": "mypy.dmypy.client.do_stop"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "show_stats(response)",
        "target": "mypy.dmypy.client.do_stop"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "pid, _ = get_status(args.status_file)",
        "target": "mypy.dmypy.client.do_kill"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 13,
        "src": "response = request(args.status_file, \"check\", files=args.files, export_types=args.export_types)",
        "target": "mypy.dmypy.client.do_check"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "response = request(args.status_file, \"check\", files=args.files, export_types=args.export_types)",
        "target": "mypy.dmypy.client.do_check"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "response = request(args.status_file, \"check\", files=args.files, export_types=args.export_types)",
        "target": "mypy.dmypy.client.do_check"
      },
      {
        "code": "no-any-expr",
        "column": 81,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "response = request(args.status_file, \"check\", files=args.files, export_types=args.export_types)",
        "target": "mypy.dmypy.client.do_check"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "response[\"roundtrip_time\"] = t1 - t0",
        "target": "mypy.dmypy.client.do_check"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_check"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_check"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_check"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_check"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 19,
        "src": "if args.remove is not None or args.update is not None:",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if args.remove is not None or args.update is not None:",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "response = request(",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "args.status_file,",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "export_types=args.export_types,",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "remove=args.remove,",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "update=args.update,",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "response = request(args.status_file, \"recheck\", export_types=args.export_types)",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 69,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "response = request(args.status_file, \"recheck\", export_types=args.export_types)",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "response[\"roundtrip_time\"] = t1 - t0",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 10,
        "src": "response = request(",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "args.status_file,",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "function=args.function,",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "json=args.json,",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "callsites=args.callsites,",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "no_errors=args.no_errors,",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "no_any=args.no_any,",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "flex_any=args.flex_any,",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "use_fixme=args.use_fixme,",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "max_guesses=args.max_guesses,",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "check_output(response, verbose=False, junit_xml=None, perf_stats_file=None)",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 6,
        "src": "response = request(",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "args.status_file,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "show=args.show,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "location=args.location,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "verbosity=args.verbose,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "limit=args.limit,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "include_span=args.include_span,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "include_kind=args.include_kind,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "include_object_attrs=args.include_object_attrs,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "union_attrs=args.union_attrs,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "force_reload=args.force_reload,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "check_output(response, verbose=False, junit_xml=None, perf_stats_file=None)",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def check_output(",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 7,
        "src": "if \"error\" in response:",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "fail(response[\"error\"])",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "fail(response[\"error\"])",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "out, err, status_code = response[\"out\"], response[\"err\"], response[\"status\"]",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "out, err, status_code = response[\"out\"], response[\"err\"], response[\"status\"]",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "out, err, status_code = response[\"out\"], response[\"err\"], response[\"status\"]",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "out, err, status_code = response[\"out\"], response[\"err\"], response[\"status\"]",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 66,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "out, err, status_code = response[\"out\"], response[\"err\"], response[\"status\"]",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 66,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "out, err, status_code = response[\"out\"], response[\"err\"], response[\"status\"]",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "fail(f\"Response: {str(response)}\")",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "sys.stdout.write(out)",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "sys.stderr.write(err)",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 3,
        "src": "show_stats(response)",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "messages = (out + err).splitlines()",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "messages = (out + err).splitlines()",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "messages = (out + err).splitlines()",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "response[\"roundtrip_time\"],",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "response[\"roundtrip_time\"],",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "bool(err),",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression type contains \"Any\" (has type \"(None, Any)\")",
        "offset": 1,
        "src": "{None: messages} if messages else {},",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "{None: messages} if messages else {},",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "{None: messages} if messages else {},",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "response[\"python_version\"],",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "response[\"python_version\"],",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "response[\"platform\"],",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "response[\"platform\"],",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 3,
        "src": "telemetry = response.get(\"stats\", {})",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "telemetry = response.get(\"stats\", {})",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"dict[Any, Any]\")",
        "offset": 0,
        "src": "telemetry = response.get(\"stats\", {})",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "json.dump(telemetry, f)",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if status_code:",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "sys.exit(status_code)",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 10,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 18,
        "src": "print(request(args.status_file, \"hang\", timeout=1))",
        "target": "mypy.dmypy.client.do_hang"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "print(request(args.status_file, \"hang\", timeout=1))",
        "target": "mypy.dmypy.client.do_hang"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 10,
        "src": "if args.log_file:",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "sys.stdout = sys.stderr = open(args.log_file, \"a\", buffering=1)",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "if args.legacy:",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if args.options_data:",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "options_dict = pickle.loads(base64.b64decode(args.options_data))",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "options_dict = pickle.loads(base64.b64decode(args.options_data))",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "options = options_obj.apply_changes(options_dict)",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "options = process_start_options(args.flags, allow_sources=False)",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if args.legacy:",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "Server(options, args.status_file, timeout=args.timeout).serve()",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "Server(options, args.status_file, timeout=args.timeout).serve()",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 12,
        "src": "def request(",
        "target": "mypy.dmypy.client.request"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 40,
        "src": "return {\"error\": str(err)}",
        "target": "mypy.dmypy.client.request"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 17,
        "src": "def check_status(data: dict[str, Any]) -> tuple[int, str]:",
        "target": "mypy.dmypy.client.check_status"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 7,
        "src": "if \"pid\" not in data:",
        "target": "mypy.dmypy.client.check_status"
      },
      {
        "code": "no-any-expr",
        "column": 10,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "pid = data[\"pid\"]",
        "target": "mypy.dmypy.client.check_status"
      },
      {
        "code": "no-any-expr",
        "column": 10,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "pid = data[\"pid\"]",
        "target": "mypy.dmypy.client.check_status"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if not isinstance(pid, int):",
        "target": "mypy.dmypy.client.check_status"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 4,
        "src": "if \"connection_name\" not in data:",
        "target": "mypy.dmypy.client.check_status"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "connection_name = data[\"connection_name\"]",
        "target": "mypy.dmypy.client.check_status"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "connection_name = data[\"connection_name\"]",
        "target": "mypy.dmypy.client.check_status"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if not isinstance(connection_name, str):",
        "target": "mypy.dmypy.client.check_status"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 15,
        "src": "data = json.load(f)",
        "target": "mypy.dmypy.client.read_status"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if not isinstance(data, dict):",
        "target": "mypy.dmypy.client.read_status"
      }
    ],
    "mypy/dmypy_server.py": [
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 209,
        "src": "return {\"platform\": self.options.platform, \"python_version\": py_version}",
        "target": "mypy.dmypy_server.Server._response_metadata"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return {\"platform\": self.options.platform, \"python_version\": py_version}",
        "target": "mypy.dmypy_server.Server._response_metadata"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[Any, Any]\")",
        "offset": 12,
        "src": "json.dump({\"pid\": os.getpid(), \"connection_name\": server.connection_name}, f)",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "data = receive(server)",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-explicit",
        "column": 20,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 4,
        "src": "resp: dict[str, Any] = {}",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if \"command\" not in data:",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "command = data[\"command\"]",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if not isinstance(command, str):",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "command = data.pop(\"command\")",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "resp = self.run_command(command, data)",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 65,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "resp = self.run_command(command, data)",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 5,
        "src": "resp.update(self._response_metadata())",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "resp[\"final\"] = True",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "send(server, resp)",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | dict[str, object]\")",
        "offset": 2,
        "src": "resp[\"final\"] = True",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | dict[str, object]\")",
        "offset": 2,
        "src": "resp.update(self._response_metadata())",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | dict[str, object]\")",
        "offset": 1,
        "src": "send(server, resp)",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 3,
        "src": "if command == \"stop\":",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "if command == \"stop\":",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 13,
        "src": "if command != \"stop\":",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "if command != \"stop\":",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 13,
        "src": "method = getattr(self.__class__, key, None)",
        "target": "mypy.dmypy_server.Server.run_command"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "if method is None:",
        "target": "mypy.dmypy_server.Server.run_command"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "ret = method(self, **data)",
        "target": "mypy.dmypy_server.Server.run_command"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert isinstance(ret, dict)",
        "target": "mypy.dmypy_server.Server.run_command"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 8,
        "src": "res.update(get_meminfo())",
        "target": "mypy.dmypy_server.Server.cmd_status"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 59,
        "src": "return self.check(sources, export_types, is_tty, terminal_width)",
        "target": "mypy.dmypy_server.Server.cmd_run"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 10,
        "src": "return self.check(sources, export_types, is_tty, terminal_width)",
        "target": "mypy.dmypy_server.Server.cmd_check"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 44,
        "src": "res = self.increment_output(messages, sources, is_tty, terminal_width)",
        "target": "mypy.dmypy_server.Server.cmd_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "self.update_stats(res)",
        "target": "mypy.dmypy_server.Server.cmd_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "return res",
        "target": "mypy.dmypy_server.Server.cmd_recheck"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 2,
        "src": "def check(",
        "target": "mypy.dmypy_server.Server.check"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 11,
        "src": "res = self.initialize_fine_grained(sources, is_tty, terminal_width)",
        "target": "mypy.dmypy_server.Server.check"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 10,
        "src": "self.update_stats(res)",
        "target": "mypy.dmypy_server.Server.check"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "return res",
        "target": "mypy.dmypy_server.Server.check"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 7,
        "src": "def update_stats(self, res: dict[str, Any]) -> None:",
        "target": "mypy.dmypy_server.Server.update_stats"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 4,
        "src": "res[\"stats\"] = manager.stats",
        "target": "mypy.dmypy_server.Server.update_stats"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "res[\"stats\"] = manager.stats",
        "target": "mypy.dmypy_server.Server.update_stats"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 8,
        "src": "def initialize_fine_grained(",
        "target": "mypy.dmypy_server.Server.initialize_fine_grained"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 15,
        "src": "return {\"out\": out, \"err\": err, \"status\": 2}",
        "target": "mypy.dmypy_server.Server.initialize_fine_grained"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 19,
        "src": "meta = state.meta",
        "target": "mypy.dmypy_server.Server.initialize_fine_grained"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 1,
        "src": "if meta is None:",
        "target": "mypy.dmypy_server.Server.initialize_fine_grained"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 5,
        "src": "FileData(st_mtime=float(meta.mtime), st_size=meta.size, hash=meta.hash),",
        "target": "mypy.dmypy_server.Server.initialize_fine_grained"
      },
      {
        "code": "no-any-expr",
        "column": 65,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 0,
        "src": "FileData(st_mtime=float(meta.mtime), st_size=meta.size, hash=meta.hash),",
        "target": "mypy.dmypy_server.Server.initialize_fine_grained"
      },
      {
        "code": "no-any-expr",
        "column": 81,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 0,
        "src": "FileData(st_mtime=float(meta.mtime), st_size=meta.size, hash=meta.hash),",
        "target": "mypy.dmypy_server.Server.initialize_fine_grained"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 46,
        "src": "return {\"out\": \"\".join(s + \"\\n\" for s in messages), \"err\": \"\", \"status\": status}",
        "target": "mypy.dmypy_server.Server.initialize_fine_grained"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 275,
        "src": "def increment_output(",
        "target": "mypy.dmypy_server.Server.increment_output"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 5,
        "src": "return {\"out\": \"\".join(s + \"\\n\" for s in messages), \"err\": \"\", \"status\": status}",
        "target": "mypy.dmypy_server.Server.increment_output"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 139,
        "src": "def cmd_suggest(self, function: str, callsites: bool, **kwargs: Any) -> dict[str, object]:",
        "target": "mypy.dmypy_server.Server.cmd_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 63,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 7,
        "src": "engine = SuggestionEngine(self.fine_grained_manager, **kwargs)",
        "target": "mypy.dmypy_server.Server.cmd_suggest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 29,
        "src": "def get_meminfo() -> dict[str, Any]:",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "res: dict[str, Any] = {}",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 4,
        "src": "res[\"memory_psutil_missing\"] = (",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"pmem\")",
        "offset": 6,
        "src": "meminfo = process.memory_info()",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "res[\"memory_rss_mib\"] = meminfo.rss / MiB",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"pmem\")",
        "offset": 0,
        "src": "res[\"memory_rss_mib\"] = meminfo.rss / MiB",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "res[\"memory_rss_mib\"] = meminfo.rss / MiB",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "res[\"memory_vms_mib\"] = meminfo.vms / MiB",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"pmem\")",
        "offset": 0,
        "src": "res[\"memory_vms_mib\"] = meminfo.vms / MiB",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "res[\"memory_vms_mib\"] = meminfo.vms / MiB",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 12,
        "src": "res[\"memory_maxrss_mib\"] = rusage.ru_maxrss * factor / MiB",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return res",
        "target": "mypy.dmypy_server.get_meminfo"
      }
    ],
    "mypy/dmypy_util.py": [
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 16,
        "src": "def receive(connection: IPCBase) -> Any:",
        "target": "mypy.dmypy_util.receive"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 10,
        "src": "data = json.loads(bdata)",
        "target": "mypy.dmypy_util.receive"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if not isinstance(data, dict):",
        "target": "mypy.dmypy_util.receive"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 1,
        "src": "raise OSError(f\"Data received is not a dict ({type(data)})\")",
        "target": "mypy.dmypy_util.receive"
      },
      {
        "code": "helpful-string",
        "column": 22,
        "message": "The type \"type[Any]\" doesn't define a __format__, __str__ or __repr__ method",
        "offset": 0,
        "src": "raise OSError(f\"Data received is not a dict ({type(data)})\")",
        "target": "mypy.dmypy_util.receive"
      },
      {
        "code": "no-any-expr",
        "column": 59,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "raise OSError(f\"Data received is not a dict ({type(data)})\")",
        "target": "mypy.dmypy_util.receive"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 4,
        "src": "def send(connection: IPCBase, data: Any) -> None:",
        "target": "mypy.dmypy_util.send"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "connection.write(json.dumps(data))",
        "target": "mypy.dmypy_util.send"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 11,
        "src": "resp: dict[str, Any] = {}",
        "target": "mypy.dmypy_util.WriteToConn.write"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "resp[self.output_key] = output",
        "target": "mypy.dmypy_util.WriteToConn.write"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "send(self.server, resp)",
        "target": "mypy.dmypy_util.WriteToConn.write"
      }
    ],
    "mypy/erasetype.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 57,
        "src": "def visit_unbound_type(self, t: UnboundType) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_any(self, t: AnyType) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_none_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_none_type(self, t: NoneType) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_none_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_uninhabited_type(self, t: UninhabitedType) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_erased_type(self, t: ErasedType) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_partial_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_partial_type(self, t: PartialType) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_partial_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_deleted_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_deleted_type(self, t: DeletedType) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_deleted_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_instance(self, t: Instance) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 14,
        "src": "def visit_type_var(self, t: TypeVarType) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_param_spec(self, t: ParamSpecType) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_parameters\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_parameters(self, t: Parameters) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_parameters"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_var_tuple(self, t: TypeVarTupleType) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unpack_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_unpack_type(self, t: UnpackType) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_unpack_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_callable_type(self, t: CallableType) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 13,
        "src": "def visit_overloaded(self, t: Overloaded) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_overloaded"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_tuple_type(self, t: TupleType) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_typeddict_type(self, t: TypedDictType) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_literal_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_literal_type(self, t: LiteralType) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_literal_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_union_type(self, t: UnionType) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_union_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_intersection_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_intersection_type(self, t: IntersectionType) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_intersection_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_type_type(self, t: TypeType) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_type_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> ProperType:",
        "target": "mypy.erasetype.EraseTypeVisitor.visit_type_alias_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 29,
        "src": "def visit_type_var(self, t: TypeVarType) -> Type:",
        "target": "mypy.erasetype.TypeVarEraser.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 7,
        "src": "def visit_instance(self, t: Instance) -> Type:",
        "target": "mypy.erasetype.TypeVarEraser.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 13,
        "src": "def visit_tuple_type(self, t: TupleType) -> Type:",
        "target": "mypy.erasetype.TypeVarEraser.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 17,
        "src": "def visit_type_var_tuple(self, t: TypeVarTupleType) -> Type:",
        "target": "mypy.erasetype.TypeVarEraser.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 5,
        "src": "def visit_param_spec(self, t: ParamSpecType) -> Type:",
        "target": "mypy.erasetype.TypeVarEraser.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 5,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> Type:",
        "target": "mypy.erasetype.TypeVarEraser.visit_type_alias_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 14,
        "src": "def visit_instance(self, t: Instance) -> Type:",
        "target": "mypy.erasetype.LastKnownValueEraser.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 5,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> Type:",
        "target": "mypy.erasetype.LastKnownValueEraser.visit_type_alias_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 5,
        "src": "def visit_union_type(self, t: UnionType) -> Type:",
        "target": "mypy.erasetype.LastKnownValueEraser.visit_union_type"
      }
    ],
    "mypy/errorcodes.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__str__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 37,
        "src": "def __str__(self) -> str:",
        "target": "mypy.errorcodes.ErrorCode.__str__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.errorcodes.ErrorCode.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 5,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.errorcodes.ErrorCode.__hash__"
      }
    ],
    "mypy/errors.py": [
      {
        "code": "redundant-expr",
        "column": 13,
        "message": "Condition is always true",
        "offset": 232,
        "src": "elif callable(self._filter):",
        "target": "mypy.errors.ErrorWatcher.on_error"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"options\" has type \"Options\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 518,
        "src": "if self.options:",
        "target": "mypy.errors.Errors.is_error_code_enabled"
      },
      {
        "code": "truthy-bool",
        "column": 69,
        "message": "Member \"options\" has type \"Options\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 33,
        "src": "is_typeshed_file(self.options.abs_custom_typeshed_dir if self.options else None, file)",
        "target": "mypy.errors.Errors.generate_unused_ignore_errors"
      },
      {
        "code": "truthy-bool",
        "column": 69,
        "message": "Member \"options\" has type \"Options\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 53,
        "src": "is_typeshed_file(self.options.abs_custom_typeshed_dir if self.options else None, file)",
        "target": "mypy.errors.Errors.generate_ignore_without_code_errors"
      },
      {
        "code": "redundant-expr",
        "column": 15,
        "message": "Condition is always false",
        "offset": 378,
        "src": "if isinstance(e.message, ErrorMessage):",
        "target": "mypy.errors.Errors.render_messages"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "result.append(",
        "target": "mypy.errors.Errors.render_messages"
      }
    ],
    "mypy/evalexpr.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_int_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 19,
        "src": "def visit_int_expr(self, o: mypy.nodes.IntExpr) -> int:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_int_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_str_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_str_expr(self, o: mypy.nodes.StrExpr) -> str:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_str_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_bytes_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_bytes_expr(self, o: mypy.nodes.BytesExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_bytes_expr"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "return ast.literal_eval(f\"b'{o.value}'\")",
        "target": "mypy.evalexpr._NodeEvaluator.visit_bytes_expr"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "return ast.literal_eval(f'b\"{o.value}\"')",
        "target": "mypy.evalexpr._NodeEvaluator.visit_bytes_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 2,
        "src": "def visit_float_expr(self, o: mypy.nodes.FloatExpr) -> float:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_float_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_complex_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_complex_expr(self, o: mypy.nodes.ComplexExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_complex_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_ellipsis\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_ellipsis(self, o: mypy.nodes.EllipsisExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_ellipsis"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_star_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_star_expr(self, o: mypy.nodes.StarExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_star_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_name_expr(self, o: mypy.nodes.NameExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_member_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 11,
        "src": "def visit_member_expr(self, o: mypy.nodes.MemberExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_member_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_from_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_yield_from_expr(self, o: mypy.nodes.YieldFromExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_yield_from_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_yield_expr(self, o: mypy.nodes.YieldExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_yield_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_call_expr(self, o: mypy.nodes.CallExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_op_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_op_expr(self, o: mypy.nodes.OpExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_op_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_comparison_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_comparison_expr(self, o: mypy.nodes.ComparisonExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_comparison_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_cast_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_cast_expr(self, o: mypy.nodes.CastExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_cast_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_type_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_assert_type_expr(self, o: mypy.nodes.AssertTypeExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_assert_type_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_reveal_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_reveal_expr(self, o: mypy.nodes.RevealExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_reveal_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_super_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_super_expr(self, o: mypy.nodes.SuperExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_super_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unary_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_unary_expr(self, o: mypy.nodes.UnaryExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_unary_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 18,
        "src": "def visit_assignment_expr(self, o: mypy.nodes.AssignmentExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_assignment_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_list_expr(self, o: mypy.nodes.ListExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_list_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 6,
        "src": "def visit_dict_expr(self, o: mypy.nodes.DictExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_dict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 9,
        "src": "def visit_tuple_expr(self, o: mypy.nodes.TupleExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 6,
        "src": "def visit_set_expr(self, o: mypy.nodes.SetExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_set_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_index_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 6,
        "src": "def visit_index_expr(self, o: mypy.nodes.IndexExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_index_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_application\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_type_application(self, o: mypy.nodes.TypeApplication) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_type_application"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_lambda_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_lambda_expr(self, o: mypy.nodes.LambdaExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_lambda_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_list_comprehension(self, o: mypy.nodes.ListComprehension) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_list_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_set_comprehension(self, o: mypy.nodes.SetComprehension) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_set_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dictionary_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_dictionary_comprehension(self, o: mypy.nodes.DictionaryComprehension) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_dictionary_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_generator_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_generator_expr(self, o: mypy.nodes.GeneratorExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_generator_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_slice_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_slice_expr(self, o: mypy.nodes.SliceExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_slice_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_conditional_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_conditional_expr(self, o: mypy.nodes.ConditionalExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_conditional_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_type_var_expr(self, o: mypy.nodes.TypeVarExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_type_var_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_paramspec_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_paramspec_expr(self, o: mypy.nodes.ParamSpecExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_paramspec_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_type_var_tuple_expr(self, o: mypy.nodes.TypeVarTupleExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_type_var_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_type_alias_expr(self, o: mypy.nodes.TypeAliasExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_type_alias_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_namedtuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_namedtuple_expr(self, o: mypy.nodes.NamedTupleExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_namedtuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_enum_call_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_enum_call_expr(self, o: mypy.nodes.EnumCallExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_enum_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_typeddict_expr(self, o: mypy.nodes.TypedDictExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_typeddict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_newtype_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_newtype_expr(self, o: mypy.nodes.NewTypeExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_newtype_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit__promote_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit__promote_expr(self, o: mypy.nodes.PromoteExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit__promote_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_await_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_await_expr(self, o: mypy.nodes.AwaitExpr) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_await_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_temp_node\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_temp_node(self, o: mypy.nodes.TempNode) -> object:",
        "target": "mypy.evalexpr._NodeEvaluator.visit_temp_node"
      }
    ],
    "mypy/expandtype.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 151,
        "src": "def visit_callable_type(self, t: CallableType) -> bool:",
        "target": "mypy.expandtype.HasGenericCallable.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 23,
        "src": "def visit_callable_type(self, t: CallableType) -> Type:",
        "target": "mypy.expandtype.FreshenCallableVisitor.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 5,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> Type:",
        "target": "mypy.expandtype.FreshenCallableVisitor.visit_type_alias_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 13,
        "src": "def visit_unbound_type(self, t: UnboundType) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 3,
        "src": "def visit_any(self, t: AnyType) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_none_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 3,
        "src": "def visit_none_type(self, t: NoneType) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_none_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 3,
        "src": "def visit_uninhabited_type(self, t: UninhabitedType) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_deleted_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 3,
        "src": "def visit_deleted_type(self, t: DeletedType) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_deleted_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 3,
        "src": "def visit_erased_type(self, t: ErasedType) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 9,
        "src": "def visit_instance(self, t: Instance) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 12,
        "src": "def visit_type_var(self, t: TypeVarType) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 12,
        "src": "def visit_param_spec(self, t: ParamSpecType) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 26,
        "src": "def visit_type_var_tuple(self, t: TypeVarTupleType) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unpack_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 8,
        "src": "def visit_unpack_type(self, t: UnpackType) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_unpack_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_parameters\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 35,
        "src": "def visit_parameters(self, t: Parameters) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_parameters"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 23,
        "src": "def visit_callable_type(self, t: CallableType) -> CallableType:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 57,
        "src": "def visit_overloaded(self, t: Overloaded) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_overloaded"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 19,
        "src": "def visit_tuple_type(self, t: TupleType) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 18,
        "src": "def visit_typeddict_type(self, t: TypedDictType) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_literal_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 5,
        "src": "def visit_literal_type(self, t: LiteralType) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_literal_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 4,
        "src": "def visit_union_type(self, t: UnionType) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_union_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_intersection_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 15,
        "src": "def visit_intersection_type(self, t: IntersectionType) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_intersection_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_partial_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 15,
        "src": "def visit_partial_type(self, t: PartialType) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_partial_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 3,
        "src": "def visit_type_type(self, t: TypeType) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_type_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 7,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_type_alias_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeguard_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 7,
        "src": "def visit_typeguard_type(self, t: TypeGuardType) -> Type:",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_typeguard_type"
      }
    ],
    "mypy/exprtotype.py": [
      {
        "code": "redundant-expr",
        "column": 23,
        "message": "Condition is always false",
        "offset": 161,
        "src": "if name is not None:",
        "target": "mypy.exprtotype.expr_to_unanalyzed_type"
      }
    ],
    "mypy/fastparse.py": [
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 154,
        "src": "ast_TypeAlias = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 14,
        "src": "Match = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "MatchValue = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "MatchSingleton = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "MatchSequence = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "MatchStar = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "MatchMapping = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "MatchClass = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "MatchAs = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "MatchOr = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "TryStar = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 50,
        "src": "tree = ASTConverter(",
        "target": "mypy.fastparse.parse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "tree.path = fnam",
        "target": "mypy.fastparse.parse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "tree.is_stub = is_stub_file",
        "target": "mypy.fastparse.parse"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 25,
        "src": "assert isinstance(tree, MypyFile)",
        "target": "mypy.fastparse.parse"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 139,
        "src": "self.visitor_cache: dict[type, Callable[[AST | None], Any]] = {}",
        "target": "mypy.fastparse.ASTConverter.__init__"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 17,
        "src": "def visit(self, node: AST | None) -> Any:",
        "target": "mypy.fastparse.ASTConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"dict[type, (AST | None) -> Any]\")",
        "offset": 4,
        "src": "visitor = self.visitor_cache.get(typeobj)",
        "target": "mypy.fastparse.ASTConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"(AST | None) -> Any | None\")",
        "offset": 0,
        "src": "visitor = self.visitor_cache.get(typeobj)",
        "target": "mypy.fastparse.ASTConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"(AST | None) -> Any | None\")",
        "offset": 1,
        "src": "if visitor is None:",
        "target": "mypy.fastparse.ASTConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[type, (AST | None) -> Any]\")",
        "offset": 3,
        "src": "self.visitor_cache[typeobj] = visitor",
        "target": "mypy.fastparse.ASTConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"(AST | None) -> Any | Any\")",
        "offset": 0,
        "src": "self.visitor_cache[typeobj] = visitor",
        "target": "mypy.fastparse.ASTConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return visitor(node)",
        "target": "mypy.fastparse.ASTConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 13,
        "src": "exp = self.visit(e)",
        "target": "mypy.fastparse.ASTConverter.translate_opt_expr_list"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "res.append(exp)",
        "target": "mypy.fastparse.ASTConverter.translate_opt_expr_list"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 60,
        "src": "node = self.visit(stmt)",
        "target": "mypy.fastparse.ASTConverter.translate_stmt_list"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "res.append(node)",
        "target": "mypy.fastparse.ASTConverter.translate_stmt_list"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Right operand of \"and\" is never evaluated",
        "offset": 144,
        "src": "current_overload_name is not None",
        "target": "mypy.fastparse.ASTConverter.fix_function_overloads"
      },
      {
        "code": "redundant-expr",
        "column": 16,
        "message": "Condition is always false",
        "offset": 0,
        "src": "current_overload_name is not None",
        "target": "mypy.fastparse.ASTConverter.fix_function_overloads"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 4,
        "src": "if last_if_stmt is not None:",
        "target": "mypy.fastparse.ASTConverter.fix_function_overloads"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Right operand of \"and\" is never evaluated",
        "offset": 17,
        "src": "current_overload_name is not None",
        "target": "mypy.fastparse.ASTConverter.fix_function_overloads"
      },
      {
        "code": "redundant-expr",
        "column": 16,
        "message": "Condition is always false",
        "offset": 0,
        "src": "current_overload_name is not None",
        "target": "mypy.fastparse.ASTConverter.fix_function_overloads"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 8,
        "src": "skipped_if_stmts.append(stmt)",
        "target": "mypy.fastparse.ASTConverter.fix_function_overloads"
      },
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always false",
        "offset": 21,
        "src": "if last_if_stmt is not None:",
        "target": "mypy.fastparse.ASTConverter.fix_function_overloads"
      },
      {
        "code": "unreachable",
        "column": 20,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "ret.append(last_if_stmt)",
        "target": "mypy.fastparse.ASTConverter.fix_function_overloads"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 235,
        "src": "and func_type_ast.argtypes[0].value is Ellipsis",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 79,
        "src": "end_line = getattr(n, \"end_lineno\", None)",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "end_column = getattr(n, \"end_col_offset\", None)",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 26,
        "src": "func_def.set_line(lineno, n.col_offset, end_line, end_column)",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "func_def.set_line(lineno, n.col_offset, end_line, end_column)",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 4,
        "src": "deco.set_line(first.lineno, first.col_offset, end_line, end_column)",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 68,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "deco.set_line(first.lineno, first.col_offset, end_line, end_column)",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 4,
        "src": "func_def.set_line(lineno, n.col_offset, end_line, end_column)",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "func_def.set_line(lineno, n.col_offset, end_line, end_column)",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"Any | list[Any]\")",
        "offset": 20,
        "src": "posonlyargs = getattr(args, \"posonlyargs\", cast(List[ast3.arg], []))",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"Any | list[Any]\")",
        "offset": 1,
        "src": "args_args = posonlyargs + args.args",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"Any | list[Any]\")",
        "offset": 2,
        "src": "num_no_defaults = len(args_args) - len(args_defaults)",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(int, Any)\")",
        "offset": 2,
        "src": "for i, a in enumerate(args_args[:num_no_defaults]):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for i, a in enumerate(args_args[:num_no_defaults]):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"enumerate[Any]\")",
        "offset": 0,
        "src": "for i, a in enumerate(args_args[:num_no_defaults]):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"Any | list[Any]\")",
        "offset": 0,
        "src": "for i, a in enumerate(args_args[:num_no_defaults]):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"Any | list[Any]\")",
        "offset": 1,
        "src": "pos_only = i < len(posonlyargs)",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "new_args.append(self.make_argument(a, None, ARG_POS, no_type_check, pos_only))",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "names.append(a)",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(int, (Any, expr))\")",
        "offset": 3,
        "src": "for i, (a, d) in enumerate(zip(args_args[num_no_defaults:], args_defaults)):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(Any, expr)\")",
        "offset": 0,
        "src": "for i, (a, d) in enumerate(zip(args_args[num_no_defaults:], args_defaults)):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for i, (a, d) in enumerate(zip(args_args[num_no_defaults:], args_defaults)):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"enumerate[(Any, expr)]\")",
        "offset": 0,
        "src": "for i, (a, d) in enumerate(zip(args_args[num_no_defaults:], args_defaults)):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"zip[(Any, expr)]\")",
        "offset": 0,
        "src": "for i, (a, d) in enumerate(zip(args_args[num_no_defaults:], args_defaults)):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"Any | list[Any]\")",
        "offset": 0,
        "src": "for i, (a, d) in enumerate(zip(args_args[num_no_defaults:], args_defaults)):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"Any | list[Any]\")",
        "offset": 1,
        "src": "pos_only = num_no_defaults + i < len(posonlyargs)",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "new_args.append(self.make_argument(a, d, ARG_OPT, no_type_check, pos_only))",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "names.append(a)",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 11,
        "src": "a, kd, ARG_NAMED if kd is None else ARG_NAMED_OPT, no_type_check",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "names.append(a)",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 34,
        "src": "argument = Argument(Var(arg.arg), arg_type, self.visit(default), kind, pos_only)",
        "target": "mypy.fastparse.ASTConverter.make_argument"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 4,
        "src": "getattr(arg, \"end_lineno\", None),",
        "target": "mypy.fastparse.ASTConverter.make_argument"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "getattr(arg, \"end_col_offset\", None),",
        "target": "mypy.fastparse.ASTConverter.make_argument"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 14,
        "src": "keywords = [(kw.arg, self.visit(kw.value)) for kw in n.keywords if kw.arg]",
        "target": "mypy.fastparse.ASTConverter.visit_ClassDef"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 0,
        "src": "keywords = [(kw.arg, self.visit(kw.value)) for kw in n.keywords if kw.arg]",
        "target": "mypy.fastparse.ASTConverter.visit_ClassDef"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "keywords = [(kw.arg, self.visit(kw.value)) for kw in n.keywords if kw.arg]",
        "target": "mypy.fastparse.ASTConverter.visit_ClassDef"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 15,
        "src": "metaclass=dict(keywords).get(\"metaclass\"),",
        "target": "mypy.fastparse.ASTConverter.visit_ClassDef"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "metaclass=dict(keywords).get(\"metaclass\"),",
        "target": "mypy.fastparse.ASTConverter.visit_ClassDef"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 0,
        "src": "metaclass=dict(keywords).get(\"metaclass\"),",
        "target": "mypy.fastparse.ASTConverter.visit_ClassDef"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 1,
        "src": "keywords=keywords,",
        "target": "mypy.fastparse.ASTConverter.visit_ClassDef"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 18,
        "src": "node = ReturnStmt(self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_Return"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 10,
        "src": "node = DelStmt(self.visit(n.targets[0]))",
        "target": "mypy.fastparse.ASTConverter.visit_Delete"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "rvalue = self.visit(n.value)",
        "target": "mypy.fastparse.ASTConverter.visit_Assign"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "s = AssignmentStmt(lvalues, rvalue, type=typ, new_syntax=False)",
        "target": "mypy.fastparse.ASTConverter.visit_Assign"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 15,
        "src": "s = AssignmentStmt([self.visit(n.target)], rvalue, type=typ, new_syntax=True)",
        "target": "mypy.fastparse.ASTConverter.visit_AnnAssign"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "self.from_operator(n.op), self.visit(n.target), self.visit(n.value)",
        "target": "mypy.fastparse.ASTConverter.visit_AugAssign"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.from_operator(n.op), self.visit(n.target), self.visit(n.value)",
        "target": "mypy.fastparse.ASTConverter.visit_AugAssign"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "self.visit(n.target),",
        "target": "mypy.fastparse.ASTConverter.visit_For"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "self.visit(n.iter),",
        "target": "mypy.fastparse.ASTConverter.visit_For"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 11,
        "src": "self.visit(n.target),",
        "target": "mypy.fastparse.ASTConverter.visit_AsyncFor"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "self.visit(n.iter),",
        "target": "mypy.fastparse.ASTConverter.visit_AsyncFor"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 11,
        "src": "self.visit(n.test), self.as_required_block(n.body), self.as_block(n.orelse)",
        "target": "mypy.fastparse.ASTConverter.visit_While"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "[self.visit(n.test)], [self.as_required_block(n.body)], self.as_block(n.orelse)",
        "target": "mypy.fastparse.ASTConverter.visit_If"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "[self.visit(i.context_expr) for i in n.items],",
        "target": "mypy.fastparse.ASTConverter.visit_With"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "[self.visit(i.optional_vars) for i in n.items],",
        "target": "mypy.fastparse.ASTConverter.visit_With"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 10,
        "src": "[self.visit(i.context_expr) for i in n.items],",
        "target": "mypy.fastparse.ASTConverter.visit_AsyncWith"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "[self.visit(i.optional_vars) for i in n.items],",
        "target": "mypy.fastparse.ASTConverter.visit_AsyncWith"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "node = RaiseStmt(self.visit(n.exc), self.visit(n.cause))",
        "target": "mypy.fastparse.ASTConverter.visit_Raise"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "node = RaiseStmt(self.visit(n.exc), self.visit(n.cause))",
        "target": "mypy.fastparse.ASTConverter.visit_Raise"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 8,
        "src": "types = [self.visit(h.type) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_Try"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "types = [self.visit(h.type) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_Try"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 6,
        "src": "types,",
        "target": "mypy.fastparse.ASTConverter.visit_Try"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "vs = [",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "self.set_line(NameExpr(h.name), h) if h.name is not None else None for h in n.handlers",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.set_line(NameExpr(h.name), h) if h.name is not None else None for h in n.handlers",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.set_line(NameExpr(h.name), h) if h.name is not None else None for h in n.handlers",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 88,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.set_line(NameExpr(h.name), h) if h.name is not None else None for h in n.handlers",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "types = [self.visit(h.type) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "types = [self.visit(h.type) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "types = [self.visit(h.type) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "types = [self.visit(h.type) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "types = [self.visit(h.type) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "handlers = [self.as_required_block(h.body) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "handlers = [self.as_required_block(h.body) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "handlers = [self.as_required_block(h.body) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "self.as_required_block(n.body),",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "types,",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "self.as_block(n.orelse),",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "self.as_block(n.finalbody),",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "node = AssertStmt(self.visit(n.test), self.visit(n.msg))",
        "target": "mypy.fastparse.ASTConverter.visit_Assert"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "node = AssertStmt(self.visit(n.test), self.visit(n.msg))",
        "target": "mypy.fastparse.ASTConverter.visit_Assert"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 46,
        "src": "value = self.visit(n.value)",
        "target": "mypy.fastparse.ASTConverter.visit_Expr"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "node = ExpressionStmt(value)",
        "target": "mypy.fastparse.ASTConverter.visit_Expr"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 21,
        "src": "s = AssignmentExpr(self.visit(n.target), self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_NamedExpr"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "s = AssignmentExpr(self.visit(n.target), self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_NamedExpr"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always false",
        "offset": 29,
        "src": "if op is None:",
        "target": "mypy.fastparse.ASTConverter.visit_BinOp"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "e = OpExpr(op, self.visit(n.left), self.visit(n.right))",
        "target": "mypy.fastparse.ASTConverter.visit_BinOp"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "e = OpExpr(op, self.visit(n.left), self.visit(n.right))",
        "target": "mypy.fastparse.ASTConverter.visit_BinOp"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 18,
        "src": "e = UnaryExpr(op, self.visit(n.operand))",
        "target": "mypy.fastparse.ASTConverter.visit_UnaryOp"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 17,
        "src": "e = ConditionalExpr(self.visit(n.test), self.visit(n.body), self.visit(n.orelse))",
        "target": "mypy.fastparse.ASTConverter.visit_IfExp"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "e = ConditionalExpr(self.visit(n.test), self.visit(n.body), self.visit(n.orelse))",
        "target": "mypy.fastparse.ASTConverter.visit_IfExp"
      },
      {
        "code": "no-any-expr",
        "column": 68,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "e = ConditionalExpr(self.visit(n.test), self.visit(n.body), self.visit(n.orelse))",
        "target": "mypy.fastparse.ASTConverter.visit_IfExp"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 27,
        "src": "targets = [self.visit(c.target) for c in n.generators]",
        "target": "mypy.fastparse.ASTConverter.visit_DictComp"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "targets = [self.visit(c.target) for c in n.generators]",
        "target": "mypy.fastparse.ASTConverter.visit_DictComp"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "iters = [self.visit(c.iter) for c in n.generators]",
        "target": "mypy.fastparse.ASTConverter.visit_DictComp"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "iters = [self.visit(c.iter) for c in n.generators]",
        "target": "mypy.fastparse.ASTConverter.visit_DictComp"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "self.visit(n.key), self.visit(n.value), targets, iters, ifs_list, is_async",
        "target": "mypy.fastparse.ASTConverter.visit_DictComp"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.visit(n.key), self.visit(n.value), targets, iters, ifs_list, is_async",
        "target": "mypy.fastparse.ASTConverter.visit_DictComp"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "self.visit(n.key), self.visit(n.value), targets, iters, ifs_list, is_async",
        "target": "mypy.fastparse.ASTConverter.visit_DictComp"
      },
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "self.visit(n.key), self.visit(n.value), targets, iters, ifs_list, is_async",
        "target": "mypy.fastparse.ASTConverter.visit_DictComp"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 6,
        "src": "targets = [self.visit(c.target) for c in n.generators]",
        "target": "mypy.fastparse.ASTConverter.visit_GeneratorExp"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "targets = [self.visit(c.target) for c in n.generators]",
        "target": "mypy.fastparse.ASTConverter.visit_GeneratorExp"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "iters = [self.visit(c.iter) for c in n.generators]",
        "target": "mypy.fastparse.ASTConverter.visit_GeneratorExp"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "iters = [self.visit(c.iter) for c in n.generators]",
        "target": "mypy.fastparse.ASTConverter.visit_GeneratorExp"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "e = GeneratorExpr(self.visit(n.elt), targets, iters, ifs_list, is_async)",
        "target": "mypy.fastparse.ASTConverter.visit_GeneratorExp"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "e = GeneratorExpr(self.visit(n.elt), targets, iters, ifs_list, is_async)",
        "target": "mypy.fastparse.ASTConverter.visit_GeneratorExp"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "e = GeneratorExpr(self.visit(n.elt), targets, iters, ifs_list, is_async)",
        "target": "mypy.fastparse.ASTConverter.visit_GeneratorExp"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "v = self.visit(n.value)",
        "target": "mypy.fastparse.ASTConverter.visit_Await"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "e = AwaitExpr(v)",
        "target": "mypy.fastparse.ASTConverter.visit_Await"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "e = YieldExpr(self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_Yield"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "e = YieldFromExpr(self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_YieldFrom"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 23,
        "src": "self.visit(n.func),",
        "target": "mypy.fastparse.ASTConverter.visit_Call"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 3,
        "src": "cast(\"List[Optional[str]]\", [None] * len(args)) + keyword_names,",
        "target": "mypy.fastparse.ASTConverter.visit_Call"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "def visit_Constant(self, n: Constant) -> Any:",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "val = n.value",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "e: Any = None",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if val is None:",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif isinstance(val, str):",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif isinstance(val, bytes):",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif isinstance(val, bool):  # Must check before int!",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif isinstance(val, int):",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif isinstance(val, float):",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif isinstance(val, complex):",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif val is Ellipsis:",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 69,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 3,
        "src": "raise RuntimeError(\"Constant not implemented for \" + str(type(val)))",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 74,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "raise RuntimeError(\"Constant not implemented for \" + str(type(val)))",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return self.set_line(e, n)",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return self.set_line(e, n)",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 32,
        "src": "val_exp = self.visit(n.value)",
        "target": "mypy.fastparse.ASTConverter.visit_FormattedValue"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "val_exp.set_line(n.lineno, n.col_offset)",
        "target": "mypy.fastparse.ASTConverter.visit_FormattedValue"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "format_spec_exp = self.visit(n.format_spec) if n.format_spec is not None else StrExpr(\"\")",
        "target": "mypy.fastparse.ASTConverter.visit_FormattedValue"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"Any | StrExpr\")",
        "offset": 0,
        "src": "format_spec_exp = self.visit(n.format_spec) if n.format_spec is not None else StrExpr(\"\")",
        "target": "mypy.fastparse.ASTConverter.visit_FormattedValue"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "format_method, [val_exp, format_spec_exp], [ARG_POS, ARG_POS], [None, None]",
        "target": "mypy.fastparse.ASTConverter.visit_FormattedValue"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"Any | StrExpr\")",
        "offset": 0,
        "src": "format_method, [val_exp, format_spec_exp], [ARG_POS, ARG_POS], [None, None]",
        "target": "mypy.fastparse.ASTConverter.visit_FormattedValue"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "member_expr = MemberExpr(self.visit(value), n.attr)",
        "target": "mypy.fastparse.ASTConverter.visit_Attribute"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 14,
        "src": "e = IndexExpr(self.visit(n.value), self.visit(n.slice))",
        "target": "mypy.fastparse.ASTConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "e = IndexExpr(self.visit(n.value), self.visit(n.slice))",
        "target": "mypy.fastparse.ASTConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 17,
        "src": "e = StarExpr(self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_Starred"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 10,
        "src": "expr_list: list[Expression] = [self.visit(e) for e in n.elts]",
        "target": "mypy.fastparse.ASTConverter.visit_List"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 17,
        "src": "return SliceExpr(self.visit(n.lower), self.visit(n.upper), self.visit(n.step))",
        "target": "mypy.fastparse.ASTConverter.visit_Slice"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return SliceExpr(self.visit(n.lower), self.visit(n.upper), self.visit(n.step))",
        "target": "mypy.fastparse.ASTConverter.visit_Slice"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return SliceExpr(self.visit(n.lower), self.visit(n.upper), self.visit(n.step))",
        "target": "mypy.fastparse.ASTConverter.visit_Slice"
      },
      {
        "code": "no-any-explicit",
        "column": 50,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "return TupleExpr(self.translate_expr_list(cast(Any, n).dims))",
        "target": "mypy.fastparse.ASTConverter.visit_ExtSlice"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return TupleExpr(self.translate_expr_list(cast(Any, n).dims))",
        "target": "mypy.fastparse.ASTConverter.visit_ExtSlice"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "value = self.visit(cast(Any, n).value)",
        "target": "mypy.fastparse.ASTConverter.visit_Index"
      },
      {
        "code": "no-any-explicit",
        "column": 27,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 0,
        "src": "value = self.visit(cast(Any, n).value)",
        "target": "mypy.fastparse.ASTConverter.visit_Index"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "value = self.visit(cast(Any, n).value)",
        "target": "mypy.fastparse.ASTConverter.visit_Index"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert isinstance(value, Node)",
        "target": "mypy.fastparse.ASTConverter.visit_Index"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "self.visit(n.subject),",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.visit(n.subject),",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "[self.visit(c.pattern) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[self.visit(c.pattern) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[self.visit(c.pattern) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[self.visit(c.pattern) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "[self.visit(c.guard) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[self.visit(c.guard) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[self.visit(c.guard) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[self.visit(c.guard) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "[self.as_required_block(c.body) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[self.as_required_block(c.body) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[self.as_required_block(c.body) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "node = ValuePattern(self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_MatchValue"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "node = ValuePattern(self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_MatchValue"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "node = SingletonPattern(n.value)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchSingleton"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "patterns = [self.visit(p) for p in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchSequence"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "patterns = [self.visit(p) for p in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchSequence"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "patterns = [self.visit(p) for p in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchSequence"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "patterns = [self.visit(p) for p in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchSequence"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "patterns = [self.visit(p) for p in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchSequence"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "stars = [p for p in patterns if isinstance(p, StarredPattern)]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchSequence"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "stars = [p for p in patterns if isinstance(p, StarredPattern)]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchSequence"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "stars = [p for p in patterns if isinstance(p, StarredPattern)]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchSequence"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 3,
        "src": "node = SequencePattern(patterns)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchSequence"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "if n.name is None:",
        "target": "mypy.fastparse.ASTConverter.visit_MatchStar"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "name = self.set_line(NameExpr(n.name), n)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchStar"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "keys = [self.visit(k) for k in n.keys]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "keys = [self.visit(k) for k in n.keys]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "keys = [self.visit(k) for k in n.keys]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "keys = [self.visit(k) for k in n.keys]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "keys = [self.visit(k) for k in n.keys]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "values = [self.visit(v) for v in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "values = [self.visit(v) for v in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "values = [self.visit(v) for v in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "values = [self.visit(v) for v in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "values = [self.visit(v) for v in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if n.rest is None:",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "rest = NameExpr(n.rest)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "node = MappingPattern(keys, values, rest)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "node = MappingPattern(keys, values, rest)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "class_ref = self.visit(n.cls)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "class_ref = self.visit(n.cls)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert isinstance(class_ref, RefExpr)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "positionals = [self.visit(p) for p in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "positionals = [self.visit(p) for p in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "positionals = [self.visit(p) for p in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "positionals = [self.visit(p) for p in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "positionals = [self.visit(p) for p in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "keyword_keys = n.kwd_attrs",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "keyword_values = [self.visit(p) for p in n.kwd_patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "keyword_values = [self.visit(p) for p in n.kwd_patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "keyword_values = [self.visit(p) for p in n.kwd_patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "keyword_values = [self.visit(p) for p in n.kwd_patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "keyword_values = [self.visit(p) for p in n.kwd_patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "node = ClassPattern(class_ref, positionals, keyword_keys, keyword_values)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "node = ClassPattern(class_ref, positionals, keyword_keys, keyword_values)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 66,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "node = ClassPattern(class_ref, positionals, keyword_keys, keyword_values)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "if n.name is None:",
        "target": "mypy.fastparse.ASTConverter.visit_MatchAs"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "name = NameExpr(n.name)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchAs"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "node = AsPattern(self.visit(n.pattern), name)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchAs"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "node = AsPattern(self.visit(n.pattern), name)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchAs"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "node = OrPattern([self.visit(pattern) for pattern in n.patterns])",
        "target": "mypy.fastparse.ASTConverter.visit_MatchOr"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "node = OrPattern([self.visit(pattern) for pattern in n.patterns])",
        "target": "mypy.fastparse.ASTConverter.visit_MatchOr"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "node = OrPattern([self.visit(pattern) for pattern in n.patterns])",
        "target": "mypy.fastparse.ASTConverter.visit_MatchOr"
      },
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "node = OrPattern([self.visit(pattern) for pattern in n.patterns])",
        "target": "mypy.fastparse.ASTConverter.visit_MatchOr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "n.lineno,",
        "target": "mypy.fastparse.ASTConverter.visit_TypeAlias"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "n.col_offset,",
        "target": "mypy.fastparse.ASTConverter.visit_TypeAlias"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "node = AssignmentStmt([NameExpr(n.name.id)], self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_TypeAlias"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "node = AssignmentStmt([NameExpr(n.name.id)], self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_TypeAlias"
      },
      {
        "code": "no-any-expr",
        "column": 64,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "node = AssignmentStmt([NameExpr(n.name.id)], self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_TypeAlias"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression type contains \"Any\" (has type \"Any | int\")",
        "offset": 40,
        "src": "None, \"typing.Any\", line=self.line, column=getattr(node, \"col_offset\", -1), note=note",
        "target": "mypy.fastparse.TypeConverter.invalid_type"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 18,
        "src": "visitor = getattr(self, method, None)",
        "target": "mypy.fastparse.TypeConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "if visitor is not None:",
        "target": "mypy.fastparse.TypeConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "typ = visitor(node)",
        "target": "mypy.fastparse.TypeConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert isinstance(typ, ProperType)",
        "target": "mypy.fastparse.TypeConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression has type \"Any\"",
        "offset": 81,
        "src": "if isinstance(n, Constant) and isinstance(n.value, str):",
        "target": "mypy.fastparse.TypeConverter._extract_argument_name"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif isinstance(n, Constant) and n.value is None:",
        "target": "mypy.fastparse.TypeConverter._extract_argument_name"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 62,
        "src": "val = n.value",
        "target": "mypy.fastparse.TypeConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if val is None:",
        "target": "mypy.fastparse.TypeConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if isinstance(val, str):",
        "target": "mypy.fastparse.TypeConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if val is Ellipsis:",
        "target": "mypy.fastparse.TypeConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if isinstance(val, bool):",
        "target": "mypy.fastparse.TypeConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if isinstance(val, (int, float, complex)):",
        "target": "mypy.fastparse.TypeConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if isinstance(val, bytes):",
        "target": "mypy.fastparse.TypeConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression type contains \"Any\" (has type \"Any | int\")",
        "offset": 32,
        "src": "numeric_value, type_name, line=self.line, column=getattr(n, \"col_offset\", -1)",
        "target": "mypy.fastparse.TypeConverter.numeric_type"
      },
      {
        "code": "no-any-explicit",
        "column": 27,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "value = self.visit(cast(Any, n).value)",
        "target": "mypy.fastparse.TypeConverter.visit_Index"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "value = self.visit(cast(Any, n).value)",
        "target": "mypy.fastparse.TypeConverter.visit_Index"
      },
      {
        "code": "no-any-explicit",
        "column": 12,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 14,
        "src": "sliceval: Any = n.slice.value",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 3,
        "src": "if getattr(sliceval, \"col_offset\", None) is None:",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if getattr(sliceval, \"col_offset\", None) is None:",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "sliceval.col_offset = sliceval.lower.col_offset",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "sliceval.col_offset = sliceval.lower.col_offset",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 5,
        "src": "if getattr(s, \"col_offset\", None) is None:",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "if isinstance(sliceval, ast3.Tuple):",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "params = [self.visit(sliceval)]",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "params = [self.visit(sliceval)]",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 60,
        "src": "def visit_assignment_stmt(self, s: AssignmentStmt) -> None:",
        "target": "mypy.fastparse.FindAttributeAssign.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_with_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 6,
        "src": "def visit_with_stmt(self, s: WithStmt) -> None:",
        "target": "mypy.fastparse.FindAttributeAssign.visit_with_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_for_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 8,
        "src": "def visit_for_stmt(self, s: ForStmt) -> None:",
        "target": "mypy.fastparse.FindAttributeAssign.visit_for_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_expression_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 8,
        "src": "def visit_expression_stmt(self, s: ExpressionStmt) -> None:",
        "target": "mypy.fastparse.FindAttributeAssign.visit_expression_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_call_expr(self, e: CallExpr) -> None:",
        "target": "mypy.fastparse.FindAttributeAssign.visit_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_index_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_index_expr(self, e: IndexExpr) -> None:",
        "target": "mypy.fastparse.FindAttributeAssign.visit_index_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_member_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_member_expr(self, e: MemberExpr) -> None:",
        "target": "mypy.fastparse.FindAttributeAssign.visit_member_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 11,
        "src": "def visit_yield_expr(self, e: YieldExpr) -> None:",
        "target": "mypy.fastparse.FindYield.visit_yield_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_from_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 3,
        "src": "def visit_yield_from_expr(self, e: YieldFromExpr) -> None:",
        "target": "mypy.fastparse.FindYield.visit_yield_from_expr"
      }
    ],
    "mypy/find_sources.py": [
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type overloaded function)",
        "offset": 162,
        "src": "@functools.lru_cache  # noqa: B019",
        "target": "mypy.find_sources"
      }
    ],
    "mypy/fixup.py": [
      {
        "code": "truthy-bool",
        "column": 15,
        "message": "Member \"defn\" has type \"ClassDef\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 70,
        "src": "if info.defn:",
        "target": "mypy.fixup.NodeFixer.visit_type_info"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 93,
        "src": "def visit_func_def(self, func: FuncDef) -> None:",
        "target": "mypy.fixup.NodeFixer.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded_func_def\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_overloaded_func_def(self, o: OverloadedFuncDef) -> None:",
        "target": "mypy.fixup.NodeFixer.visit_overloaded_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_decorator\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 10,
        "src": "def visit_decorator(self, d: Decorator) -> None:",
        "target": "mypy.fixup.NodeFixer.visit_decorator"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"func\" has type \"FuncDef\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 3,
        "src": "if d.func:",
        "target": "mypy.fixup.NodeFixer.visit_decorator"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"var\" has type \"Var\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 2,
        "src": "if d.var:",
        "target": "mypy.fixup.NodeFixer.visit_decorator"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_class_def(self, c: ClassDef) -> None:",
        "target": "mypy.fixup.NodeFixer.visit_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_type_var_expr(self, tv: TypeVarExpr) -> None:",
        "target": "mypy.fixup.NodeFixer.visit_type_var_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_paramspec_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_paramspec_expr(self, p: ParamSpecExpr) -> None:",
        "target": "mypy.fixup.NodeFixer.visit_paramspec_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_type_var_tuple_expr(self, tv: TypeVarTupleExpr) -> None:",
        "target": "mypy.fixup.NodeFixer.visit_type_var_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_var\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_var(self, v: Var) -> None:",
        "target": "mypy.fixup.NodeFixer.visit_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_type_alias(self, a: TypeAlias) -> None:",
        "target": "mypy.fixup.NodeFixer.visit_type_alias"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 11,
        "src": "def visit_instance(self, inst: Instance) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 19,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_type_alias_type"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 11,
        "src": "def visit_any(self, o: Any) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 0,
        "src": "def visit_any(self, o: Any) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_callable_type(self, ct: CallableType) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_callable_type"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"fallback\" has type \"Instance\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 1,
        "src": "if ct.fallback:",
        "target": "mypy.fixup.TypeFixer.visit_callable_type"
      },
      {
        "code": "redundant-expr",
        "column": 15,
        "message": "Condition is always true",
        "offset": 4,
        "src": "if argt is not None:",
        "target": "mypy.fixup.TypeFixer.visit_callable_type"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always true",
        "offset": 2,
        "src": "if ct.ret_type is not None:",
        "target": "mypy.fixup.TypeFixer.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 10,
        "src": "def visit_overloaded(self, t: Overloaded) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_overloaded"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 4,
        "src": "def visit_erased_type(self, o: Any) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 0,
        "src": "def visit_erased_type(self, o: Any) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_erased_type"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "raise RuntimeError(\"Shouldn't get here\", o)",
        "target": "mypy.fixup.TypeFixer.visit_erased_type"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 2,
        "src": "def visit_deleted_type(self, o: Any) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_deleted_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_deleted_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 0,
        "src": "def visit_deleted_type(self, o: Any) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_deleted_type"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def visit_none_type(self, o: Any) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_none_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_none_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 0,
        "src": "def visit_none_type(self, o: Any) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_none_type"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def visit_uninhabited_type(self, o: Any) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 0,
        "src": "def visit_uninhabited_type(self, o: Any) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_uninhabited_type"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def visit_partial_type(self, o: Any) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_partial_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_partial_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 0,
        "src": "def visit_partial_type(self, o: Any) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_partial_type"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "raise RuntimeError(\"Shouldn't get here\", o)",
        "target": "mypy.fixup.TypeFixer.visit_partial_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 2,
        "src": "def visit_tuple_type(self, tt: TupleType) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_tuple_type"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always true",
        "offset": 4,
        "src": "if tt.partial_fallback is not None:",
        "target": "mypy.fixup.TypeFixer.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_typeddict_type(self, tdt: TypedDictType) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_typeddict_type"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always true",
        "offset": 4,
        "src": "if tdt.fallback is not None:",
        "target": "mypy.fixup.TypeFixer.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_literal_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 15,
        "src": "def visit_literal_type(self, lt: LiteralType) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_literal_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_var(self, tvt: TypeVarType) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 7,
        "src": "def visit_param_spec(self, p: ParamSpecType) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_type_var_tuple(self, t: TypeVarTupleType) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unpack_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_unpack_type(self, u: UnpackType) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_unpack_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_parameters\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_parameters(self, p: Parameters) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_parameters"
      },
      {
        "code": "redundant-expr",
        "column": 15,
        "message": "Condition is always true",
        "offset": 2,
        "src": "if argt is not None:",
        "target": "mypy.fixup.TypeFixer.visit_parameters"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_unbound_type(self, o: UnboundType) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_union_type(self, ut: UnionType) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_union_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_intersection_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_intersection_type(self, it: IntersectionType):",
        "target": "mypy.fixup.TypeFixer.visit_intersection_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_type_type(self, t: TypeType) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_type_type"
      }
    ],
    "mypy/freetree.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_block\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 10,
        "src": "def visit_block(self, block: Block) -> None:",
        "target": "mypy.freetree.TreeFreer.visit_block"
      }
    ],
    "mypy/fscache.py": [
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 303,
        "src": "new = OSError(*e.args)",
        "target": "mypy.fscache.copy_os_error"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "new.filename = e.filename",
        "target": "mypy.fscache.copy_os_error"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if e.filename2:",
        "target": "mypy.fscache.copy_os_error"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "new.filename2 = e.filename2",
        "target": "mypy.fscache.copy_os_error"
      }
    ],
    "mypy/indirection.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 48,
        "src": "def visit_unbound_type(self, t: types.UnboundType) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_any(self, t: types.AnyType) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_none_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_none_type(self, t: types.NoneType) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_none_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_uninhabited_type(self, t: types.UninhabitedType) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_erased_type(self, t: types.ErasedType) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_deleted_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_deleted_type(self, t: types.DeletedType) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_deleted_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_var(self, t: types.TypeVarType) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_param_spec(self, t: types.ParamSpecType) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_var_tuple(self, t: types.TypeVarTupleType) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unpack_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_unpack_type(self, t: types.UnpackType) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_unpack_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_parameters\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_parameters(self, t: types.Parameters) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_parameters"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_instance(self, t: types.Instance) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 12,
        "src": "def visit_callable_type(self, t: types.CallableType) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_overloaded(self, t: types.Overloaded) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_overloaded"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_tuple_type(self, t: types.TupleType) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_typeddict_type(self, t: types.TypedDictType) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_literal_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_literal_type(self, t: types.LiteralType) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_literal_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_union_type(self, t: types.UnionType) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_union_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_intersection_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_intersection_type(self, t: types.IntersectionType) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_intersection_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_partial_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_partial_type(self, t: types.PartialType) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_partial_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_type(self, t: types.TypeType) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_type_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_alias_type(self, t: types.TypeAliasType) -> set[str]:",
        "target": "mypy.indirection.TypeIndirectionVisitor.visit_type_alias_type"
      }
    ],
    "mypy/inspections.py": [
      {
        "code": "helpful-string",
        "column": 11,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 57,
        "src": "return f\"{expr.line}:{expr.column + 1}:{expr.end_line}:{expr.end_column}\"",
        "target": "mypy.inspections.expr_span"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 81,
        "src": "def visit(self, o: Node) -> bool:",
        "target": "mypy.inspections.SearchVisitor.visit"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 37,
        "src": "def visit(self, o: Node) -> bool:",
        "target": "mypy.inspections.SearchAllVisitor.visit"
      },
      {
        "code": "helpful-string",
        "column": 15,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 187,
        "src": "return f\"{module.path}:{node.line}:{node.column + 1}:{node.name}\"",
        "target": "mypy.inspections.InspectionEngine.format_node"
      }
    ],
    "mypy/ipc.py": [
      {
        "code": "redundant-expr",
        "column": 18,
        "message": "Condition is always true",
        "offset": 105,
        "src": "while True:",
        "target": "mypy.ipc.IPCBase.read"
      }
    ],
    "mypy/join.py": [
      {
        "code": "redundant-expr",
        "column": 15,
        "message": "Condition is always true",
        "offset": 170,
        "src": "if best is None or is_better(res, best):",
        "target": "mypy.join.InstanceJoiner.join_instances_via_supertype"
      },
      {
        "code": "unreachable",
        "column": 31,
        "message": "Right operand of \"or\" is never evaluated",
        "offset": 0,
        "src": "if best is None or is_better(res, best):",
        "target": "mypy.join.InstanceJoiner.join_instances_via_supertype"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 157,
        "src": "def visit_unbound_type(self, t: UnboundType) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_union_type(self, t: UnionType) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_union_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_intersection_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_intersection_type(self, t: IntersectionType) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_intersection_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_any(self, t: AnyType) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_none_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_none_type(self, t: NoneType) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_none_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 11,
        "src": "def visit_uninhabited_type(self, t: UninhabitedType) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_deleted_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_deleted_type(self, t: DeletedType) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_deleted_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_erased_type(self, t: ErasedType) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_var(self, t: TypeVarType) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_param_spec(self, t: ParamSpecType) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_type_var_tuple(self, t: TypeVarTupleType) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unpack_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_unpack_type(self, t: UnpackType) -> UnpackType:",
        "target": "mypy.join.TypeJoinVisitor.visit_unpack_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_parameters\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_parameters(self, t: Parameters) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_parameters"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 15,
        "src": "def visit_instance(self, t: Instance) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 33,
        "src": "def visit_callable_type(self, t: CallableType) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 28,
        "src": "def visit_overloaded(self, t: Overloaded) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_overloaded"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 160,
        "src": "def visit_tuple_type(self, t: TupleType) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 32,
        "src": "def visit_typeddict_type(self, t: TypedDictType) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_literal_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 20,
        "src": "def visit_literal_type(self, t: LiteralType) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_literal_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_partial_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 10,
        "src": "def visit_partial_type(self, t: PartialType) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_partial_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_type_type(self, t: TypeType) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_type_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 8,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> ProperType:",
        "target": "mypy.join.TypeJoinVisitor.visit_type_alias_type"
      }
    ],
    "mypy/literals.py": [
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 131,
        "src": "Key: _TypeAlias = Tuple[Any, ...]",
        "target": "mypy.literals"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 16,
        "src": "if len(key) == 2 and key[0] == \"Var\" and isinstance(key[1], Var):",
        "target": "mypy.literals.extract_var_from_literal_hash"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if len(key) == 2 and key[0] == \"Var\" and isinstance(key[1], Var):",
        "target": "mypy.literals.extract_var_from_literal_hash"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_int_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 6,
        "src": "def visit_int_expr(self, e: IntExpr) -> Key:",
        "target": "mypy.literals._Hasher.visit_int_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_str_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_str_expr(self, e: StrExpr) -> Key:",
        "target": "mypy.literals._Hasher.visit_str_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_bytes_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_bytes_expr(self, e: BytesExpr) -> Key:",
        "target": "mypy.literals._Hasher.visit_bytes_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_float_expr(self, e: FloatExpr) -> Key:",
        "target": "mypy.literals._Hasher.visit_float_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_complex_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_complex_expr(self, e: ComplexExpr) -> Key:",
        "target": "mypy.literals._Hasher.visit_complex_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_star_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_star_expr(self, e: StarExpr) -> Key:",
        "target": "mypy.literals._Hasher.visit_star_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_name_expr(self, e: NameExpr) -> Key:",
        "target": "mypy.literals._Hasher.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_member_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 8,
        "src": "def visit_member_expr(self, e: MemberExpr) -> Key:",
        "target": "mypy.literals._Hasher.visit_member_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_op_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_op_expr(self, e: OpExpr) -> Key:",
        "target": "mypy.literals._Hasher.visit_op_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_comparison_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_comparison_expr(self, e: ComparisonExpr) -> Key:",
        "target": "mypy.literals._Hasher.visit_comparison_expr"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"tuple[str | Any, ...]\")",
        "offset": 3,
        "src": "return (\"Comparison\",) + rest",
        "target": "mypy.literals._Hasher.visit_comparison_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unary_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 2,
        "src": "def visit_unary_expr(self, e: UnaryExpr) -> Key:",
        "target": "mypy.literals._Hasher.visit_unary_expr"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"tuple[str | Any, ...]\")",
        "offset": 6,
        "src": "return (name,) + rest",
        "target": "mypy.literals._Hasher.seq_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_list_expr(self, e: ListExpr) -> Key | None:",
        "target": "mypy.literals._Hasher.visit_list_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_dict_expr(self, e: DictExpr) -> Key | None:",
        "target": "mypy.literals._Hasher.visit_dict_expr"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"tuple[str | Any, ...]\")",
        "offset": 5,
        "src": "return (\"Dict\",) + rest",
        "target": "mypy.literals._Hasher.visit_dict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_tuple_expr(self, e: TupleExpr) -> Key | None:",
        "target": "mypy.literals._Hasher.visit_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_set_expr(self, e: SetExpr) -> Key | None:",
        "target": "mypy.literals._Hasher.visit_set_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_index_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_index_expr(self, e: IndexExpr) -> Key | None:",
        "target": "mypy.literals._Hasher.visit_index_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 5,
        "src": "def visit_assignment_expr(self, e: AssignmentExpr) -> Key | None:",
        "target": "mypy.literals._Hasher.visit_assignment_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_call_expr(self, e: CallExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_slice_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_slice_expr(self, e: SliceExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_slice_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_cast_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_cast_expr(self, e: CastExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_cast_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_type_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_assert_type_expr(self, e: AssertTypeExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_assert_type_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_conditional_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_conditional_expr(self, e: ConditionalExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_conditional_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_ellipsis\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_ellipsis(self, e: EllipsisExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_ellipsis"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_from_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_yield_from_expr(self, e: YieldFromExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_yield_from_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_yield_expr(self, e: YieldExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_yield_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_reveal_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_reveal_expr(self, e: RevealExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_reveal_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_super_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_super_expr(self, e: SuperExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_super_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_application\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_type_application(self, e: TypeApplication) -> None:",
        "target": "mypy.literals._Hasher.visit_type_application"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_lambda_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_lambda_expr(self, e: LambdaExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_lambda_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_list_comprehension(self, e: ListComprehension) -> None:",
        "target": "mypy.literals._Hasher.visit_list_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_set_comprehension(self, e: SetComprehension) -> None:",
        "target": "mypy.literals._Hasher.visit_set_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dictionary_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_dictionary_comprehension(self, e: DictionaryComprehension) -> None:",
        "target": "mypy.literals._Hasher.visit_dictionary_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_generator_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_generator_expr(self, e: GeneratorExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_generator_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_type_var_expr(self, e: TypeVarExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_type_var_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_paramspec_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_paramspec_expr(self, e: ParamSpecExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_paramspec_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_type_var_tuple_expr(self, e: TypeVarTupleExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_type_var_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_type_alias_expr(self, e: TypeAliasExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_type_alias_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_namedtuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_namedtuple_expr(self, e: NamedTupleExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_namedtuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_enum_call_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_enum_call_expr(self, e: EnumCallExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_enum_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_typeddict_expr(self, e: TypedDictExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_typeddict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_newtype_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_newtype_expr(self, e: NewTypeExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_newtype_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit__promote_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit__promote_expr(self, e: PromoteExpr) -> None:",
        "target": "mypy.literals._Hasher.visit__promote_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_await_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_await_expr(self, e: AwaitExpr) -> None:",
        "target": "mypy.literals._Hasher.visit_await_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_temp_node\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_temp_node(self, e: TempNode) -> None:",
        "target": "mypy.literals._Hasher.visit_temp_node"
      }
    ],
    "mypy/main.py": [
      {
        "code": "helpful-string",
        "column": 12,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 222,
        "src": "\"Warning: unused section(s) in {}: {}\".format(",
        "target": "mypy.main.run_build"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"_fill_text\" is not using @override but is overriding a method in class \"argparse.HelpFormatter\"",
        "offset": 32,
        "src": "def _fill_text(self, text: str, width: int, indent: str) -> str:",
        "target": "mypy.main.AugmentedHelpFormatter._fill_text"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 78,
        "src": "python_executable = special_opts.python_executable or options.python_executable",
        "target": "mypy.main.infer_python_executable"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"Any | str | None\")",
        "offset": 0,
        "src": "python_executable = special_opts.python_executable or options.python_executable",
        "target": "mypy.main.infer_python_executable"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | str | None\")",
        "offset": 2,
        "src": "if python_executable is None:",
        "target": "mypy.main.infer_python_executable"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if not special_opts.no_executable and not options.no_site_packages:",
        "target": "mypy.main.infer_python_executable"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 49,
        "src": "def __init__(self, *args: Any, **kwargs: Any):",
        "target": "mypy.main.CapturableArgumentParser.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "self.stdout = kwargs.pop(\"stdout\", sys.stdout)",
        "target": "mypy.main.CapturableArgumentParser.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.stdout = kwargs.pop(\"stdout\", sys.stdout)",
        "target": "mypy.main.CapturableArgumentParser.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "self.stderr = kwargs.pop(\"stderr\", sys.stderr)",
        "target": "mypy.main.CapturableArgumentParser.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.stderr = kwargs.pop(\"stderr\", sys.stderr)",
        "target": "mypy.main.CapturableArgumentParser.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 1,
        "src": "super().__init__(*args, **kwargs)",
        "target": "mypy.main.CapturableArgumentParser.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "super().__init__(*args, **kwargs)",
        "target": "mypy.main.CapturableArgumentParser.__init__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"print_usage\" is not using @override but is overriding a method in class \"argparse.ArgumentParser\"",
        "offset": 5,
        "src": "def print_usage(self, file: IO[str] | None = None) -> None:",
        "target": "mypy.main.CapturableArgumentParser.print_usage"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "file = self.stdout",
        "target": "mypy.main.CapturableArgumentParser.print_usage"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"IO[str] | Any\")",
        "offset": 1,
        "src": "self._print_message(self.format_usage(), file)",
        "target": "mypy.main.CapturableArgumentParser.print_usage"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"print_help\" is not using @override but is overriding a method in class \"argparse.ArgumentParser\"",
        "offset": 2,
        "src": "def print_help(self, file: IO[str] | None = None) -> None:",
        "target": "mypy.main.CapturableArgumentParser.print_help"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "file = self.stdout",
        "target": "mypy.main.CapturableArgumentParser.print_help"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression type contains \"Any\" (has type \"IO[str] | Any\")",
        "offset": 1,
        "src": "self._print_message(self.format_help(), file)",
        "target": "mypy.main.CapturableArgumentParser.print_help"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"_print_message\" is not using @override but is overriding a method in class \"argparse.ArgumentParser\"",
        "offset": 2,
        "src": "def _print_message(self, message: str, file: IO[str] | None = None) -> None:",
        "target": "mypy.main.CapturableArgumentParser._print_message"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "file = self.stderr",
        "target": "mypy.main.CapturableArgumentParser._print_message"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"IO[str] | Any\")",
        "offset": 1,
        "src": "file.write(message)",
        "target": "mypy.main.CapturableArgumentParser._print_message"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"exit\" is not using @override but is overriding a method in class \"argparse.ArgumentParser\"",
        "offset": 5,
        "src": "def exit(self, status: int = 0, message: str | None = None) -> NoReturn:",
        "target": "mypy.main.CapturableArgumentParser.exit"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "self._print_message(message, self.stderr)",
        "target": "mypy.main.CapturableArgumentParser.exit"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"error\" is not using @override but is overriding a method in class \"argparse.ArgumentParser\"",
        "offset": 3,
        "src": "def error(self, message: str) -> NoReturn:",
        "target": "mypy.main.CapturableArgumentParser.error"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "self.print_usage(self.stderr)",
        "target": "mypy.main.CapturableArgumentParser.error"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 32,
        "src": "def __call__(",
        "target": "mypy.main.CapturableVersionAction.__call__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__call__\" is not using @override but is overriding a method in class \"argparse.Action\"",
        "offset": 0,
        "src": "def __call__(",
        "target": "mypy.main.CapturableVersionAction.__call__"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 257,
        "src": "default=[],",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 7,
        "src": "default=[],",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 70,
        "src": "default=[],",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 157,
        "src": "default=[],",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 7,
        "src": "default=[],",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 290,
        "src": "\"--package-root\", metavar=\"ROOT\", action=\"append\", default=[], help=argparse.SUPPRESS",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 41,
        "src": "default=[],",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 12,
        "src": "default=[],",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 9,
        "src": "default=[],",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 23,
        "src": "config_file = dummy.config_file",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if config_file and not os.path.exists(config_file):",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "if config_file and not os.path.exists(config_file):",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if config_file and not os.path.exists(config_file):",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "parser.error(f\"Cannot find config file '{config_file}'\")",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "mypy.options._based = dummy.__dict__[\"special-opts:strict\"]",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 26,
        "src": "if not dummy.__dict__[\"special-opts:strict\"]:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if not dummy.__dict__[\"special-opts:strict\"]:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 18,
        "src": "parse_config_file(options, set_strict_flags, config_file, stdout, stderr)",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "if dummy.ide:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 15,
        "src": "options.python_version = special_opts.python_version or options.python_version",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | (int, int)\")",
        "offset": 1,
        "src": "if options.python_version < (3,):",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "if options.python_version < (3,):",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 10,
        "src": "if special_opts.no_executable or options.no_site_packages:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "if special_opts.no_executable or options.no_site_packages:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "if not (special_opts.files or special_opts.packages or special_opts.modules):",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if not (special_opts.files or special_opts.packages or special_opts.modules):",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 59,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if not (special_opts.files or special_opts.packages or special_opts.modules):",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 10,
        "src": "code_methods = sum(",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "bool(c)",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "for c in [",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "special_opts.modules + special_opts.packages,",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "special_opts.modules + special_opts.packages,",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "special_opts.command,",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "special_opts.files,",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 51,
        "src": "if special_opts.find_occurrences:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 1,
        "src": "_find_occurrences = tuple(special_opts.find_occurrences.split(\".\"))",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "_find_occurrences = tuple(special_opts.find_occurrences.split(\".\"))",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 1,
        "src": "if len(_find_occurrences) < 2:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 2,
        "src": "if len(_find_occurrences) != 2:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 5,
        "src": "for flag, val in vars(special_opts).items():",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for flag, val in vars(special_opts).items():",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "for flag, val in vars(special_opts).items():",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"dict_items[str, Any]\")",
        "offset": 0,
        "src": "for flag, val in vars(special_opts).items():",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if flag.endswith(\"_report\") and val is not None:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "report_dir = val",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "options.report_dirs[report_type] = report_dir",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "if special_opts.cache_map:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 30,
        "src": "[f\"module:{el}\" for el in special_opts.modules]",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 9,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[f\"module:{el}\" for el in special_opts.modules]",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[f\"module:{el}\" for el in special_opts.modules]",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 10,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "+ [f\"package:{el}\" for el in special_opts.packages]",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "+ [f\"package:{el}\" for el in special_opts.packages]",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "+ [f\"package:{el}\" for el in special_opts.packages]",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 10,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "+ [f\"file:{el}\" for el in special_opts.files]",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "+ [f\"file:{el}\" for el in special_opts.files]",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "+ [f\"file:{el}\" for el in special_opts.files]",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if special_opts.modules + special_opts.packages:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if special_opts.modules + special_opts.packages:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "for p in special_opts.packages:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for p in special_opts.packages:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if os.sep in p or os.altsep and os.altsep in p:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if os.sep in p or os.altsep and os.altsep in p:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "fail(f\"Package name '{p}' cannot have a slash in it.\", stderr, options)",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "p_targets = cache.find_modules_recursive(p)",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "fail(f\"Can't find package '{p}'\", stderr, options)",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "for m in special_opts.modules:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for m in special_opts.modules:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "targets.append(BuildSource(None, m, None))",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 9,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif special_opts.command:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "targets = [BuildSource(None, None, \"\\n\".join(special_opts.command))]",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "targets = create_source_list(special_opts.files, options, fscache)",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 48,
        "src": "n = len(special_opts.cache_map)",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "source, meta_file, data_file = special_opts.cache_map[i : i + 3]",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if source in options.cache_map:",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "parser.error(f\"Duplicate --cache-map source {source})\")",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if not source.endswith(\".py\") and not source.endswith(\".pyi\"):",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if not source.endswith(\".py\") and not source.endswith(\".pyi\"):",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "parser.error(f\"Invalid --cache-map source {source} (triple[0] must be *.py[i])\")",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if not meta_file.endswith(\".meta.json\"):",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 85,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "\"Invalid --cache-map meta_file %s (triple[1] must be *.meta.json)\" % meta_file",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if not data_file.endswith(\".data.json\"):",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 85,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "\"Invalid --cache-map data_file %s (triple[2] must be *.data.json)\" % data_file",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "options.cache_map[source] = (meta_file, data_file)",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"(Any, Any)\")",
        "offset": 0,
        "src": "options.cache_map[source] = (meta_file, data_file)",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "options.cache_map[source] = (meta_file, data_file)",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "options.cache_map[source] = (meta_file, data_file)",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 19,
        "src": "options.platform,",
        "target": "mypy.main.maybe_write_junit_xml"
      },
      {
        "code": "no-any-expr",
        "column": 78,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "td, serious, messages_by_file, options.junit_xml, py_version, options.platform",
        "target": "mypy.main.maybe_write_junit_xml"
      }
    ],
    "mypy/meet.py": [
      {
        "code": "helpful-string",
        "column": 38,
        "message": "The type \"type[mypy.types.ProperType]\" doesn't define a __format__, __str__ or __repr__ method",
        "offset": 588,
        "src": "assert type(left) != type(right), f\"{type(left)} vs {type(right)}\"",
        "target": "mypy.meet.is_overlapping_types"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 96,
        "src": "def visit_unbound_type(self, t: UnboundType) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 11,
        "src": "def visit_any(self, t: AnyType) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_union_type(self, t: UnionType) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_union_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_intersection_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 10,
        "src": "def visit_intersection_type(self, t: IntersectionType) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_intersection_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_none_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_none_type(self, t: NoneType) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_none_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 11,
        "src": "def visit_uninhabited_type(self, t: UninhabitedType) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_deleted_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_deleted_type(self, t: DeletedType) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_deleted_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 11,
        "src": "def visit_erased_type(self, t: ErasedType) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_var(self, t: TypeVarType) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_param_spec(self, t: ParamSpecType) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_type_var_tuple(self, t: TypeVarTupleType) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unpack_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_unpack_type(self, t: UnpackType) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_unpack_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_parameters\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_parameters(self, t: Parameters) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_parameters"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 12,
        "src": "def visit_instance(self, t: Instance) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 85,
        "src": "def visit_callable_type(self, t: CallableType) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 28,
        "src": "def visit_overloaded(self, t: Overloaded) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_overloaded"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 97,
        "src": "def visit_tuple_type(self, t: TupleType) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 20,
        "src": "def visit_typeddict_type(self, t: TypedDictType) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_literal_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 24,
        "src": "def visit_literal_type(self, t: LiteralType) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_literal_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_partial_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 8,
        "src": "def visit_partial_type(self, t: PartialType) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_partial_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_type_type(self, t: TypeType) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_type_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 13,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> ProperType:",
        "target": "mypy.meet.TypeMeetVisitor.visit_type_alias_type"
      }
    ],
    "mypy/memprofile.py": [
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 26,
        "src": "objs = gc.get_objects()",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "find_recursive_objects(objs)",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "for obj in objs:",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "for obj in objs:",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 1,
        "src": "if type(obj) is FakeInfo:",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if type(obj) is FakeInfo:",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 3,
        "src": "n = type(obj).__name__",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "n = type(obj).__name__",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if hasattr(obj, \"__dict__\"):",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "inferred[id(obj.__dict__)] = f\"{n} (__dict__)\"",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(obj, (Node, Type)):  # type: ignore[misc]",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": null,
        "column": 22,
        "message": "Error code changed to no-any-expr; \"type: ignore\" comment may be out of date",
        "offset": 0,
        "src": "if isinstance(obj, (Node, Type)):  # type: ignore[misc]",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "for x in obj.__dict__.values():",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "for x in obj.__dict__.values():",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"dict_values[str, Any]\")",
        "offset": 0,
        "src": "for x in obj.__dict__.values():",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(x, list):",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if isinstance(x, tuple):",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 5,
        "src": "x = getattr(obj, k, None)",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(x, list):",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if isinstance(x, tuple):",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "for obj in objs:",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "for obj in objs:",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if id(obj) in inferred:",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "name = inferred[id(obj)]",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 2,
        "src": "name = type(obj).__name__",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "name = type(obj).__name__",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 59,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "memuse[name] = memuse.get(name, 0) + sys.getsizeof(obj)",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 56,
        "src": "for slot in getattr(base, \"__slots__\", ()):",
        "target": "mypy.memprofile.find_recursive_objects"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"Any | ()\")",
        "offset": 0,
        "src": "for slot in getattr(base, \"__slots__\", ()):",
        "target": "mypy.memprofile.find_recursive_objects"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if hasattr(obj, slot):",
        "target": "mypy.memprofile.find_recursive_objects"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "visit(getattr(obj, slot))",
        "target": "mypy.memprofile.find_recursive_objects"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "visit(getattr(obj, slot))",
        "target": "mypy.memprofile.find_recursive_objects"
      }
    ],
    "mypy/messages.py": [
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 567,
        "src": "def unsupported_operand_types(",
        "target": "mypy.messages.MessageBuilder.unsupported_operand_types"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 14,
        "src": "if isinstance(left_type, str):",
        "target": "mypy.messages.MessageBuilder.unsupported_operand_types"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "left_str = format_type(left_type, self.options)",
        "target": "mypy.messages.MessageBuilder.unsupported_operand_types"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if isinstance(right_type, str):",
        "target": "mypy.messages.MessageBuilder.unsupported_operand_types"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "right_str = format_type(right_type, self.options)",
        "target": "mypy.messages.MessageBuilder.unsupported_operand_types"
      },
      {
        "code": "helpful-string",
        "column": 20,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 350,
        "src": "f'This is likely because \"{original_caller_type.name}\" has named arguments: '",
        "target": "mypy.messages.MessageBuilder.maybe_note_concatenate_pos_args"
      },
      {
        "code": "possibly-undefined",
        "column": 18,
        "message": "Name \"msg\" may be undefined",
        "offset": 73,
        "src": "self.fail(msg, context)",
        "target": "mypy.messages"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 14,
        "src": "first_arg = callee.def_extras.get(\"first_arg\")",
        "target": "mypy.messages.MessageBuilder.maybe_note_about_special_args"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "first_arg = callee.def_extras.get(\"first_arg\")",
        "target": "mypy.messages.MessageBuilder.maybe_note_about_special_args"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "if first_arg and first_arg not in {\"self\", \"cls\", \"mcs\"}:",
        "target": "mypy.messages.MessageBuilder.maybe_note_about_special_args"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | None | bool\")",
        "offset": 0,
        "src": "if first_arg and first_arg not in {\"self\", \"cls\", \"mcs\"}:",
        "target": "mypy.messages.MessageBuilder.maybe_note_about_special_args"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if first_arg and first_arg not in {\"self\", \"cls\", \"mcs\"}:",
        "target": "mypy.messages.MessageBuilder.maybe_note_about_special_args"
      },
      {
        "code": "helpful-string",
        "column": 12,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 51,
        "src": "'{} gets multiple values for keyword argument \"{}\"'.format(",
        "target": "mypy.messages.MessageBuilder.duplicate_argument_value"
      },
      {
        "code": "redundant-expr",
        "column": 13,
        "message": "Condition is always true",
        "offset": 202,
        "src": "elif isinstance(tp, Overloaded):",
        "target": "mypy.messages.MessageBuilder.pretty_callable_or_overload"
      },
      {
        "code": "helpful-string",
        "column": 26,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 503,
        "src": "self.note(f\"    {k}: {v.accept(visitor) if v is not None else None}\", context)",
        "target": "mypy.messages.MessageBuilder.reveal_locals"
      },
      {
        "code": "redundant-expr",
        "column": 15,
        "message": "Condition is always false",
        "offset": 374,
        "src": "if not isinstance(subtype.partial_fallback, Instance):",
        "target": "mypy.messages.MessageBuilder.report_protocol_problems"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "return",
        "target": "mypy.messages.MessageBuilder.report_protocol_problems"
      },
      {
        "code": "redundant-expr",
        "column": 15,
        "message": "Condition is always false",
        "offset": 3,
        "src": "if not isinstance(subtype.fallback, Instance):",
        "target": "mypy.messages.MessageBuilder.report_protocol_problems"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "return",
        "target": "mypy.messages.MessageBuilder.report_protocol_problems"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 187,
        "src": "def print_more(",
        "target": "mypy.messages.MessageBuilder.print_more"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Sequence[Any]\")",
        "offset": 9,
        "src": "if len(conflicts) > max_items:",
        "target": "mypy.messages.MessageBuilder.print_more"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"Sequence[Any]\")",
        "offset": 2,
        "src": "f\"<{len(conflicts) - max_items} more conflict(s) not shown>\",",
        "target": "mypy.messages.MessageBuilder.print_more"
      },
      {
        "code": "helpful-string",
        "column": 35,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 158,
        "src": "arg_strings.append(f\"{arg_name}: {format(arg_type)}\")",
        "target": "mypy.messages.format_callable_args"
      },
      {
        "code": "helpful-string",
        "column": 35,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 3,
        "src": "arg_strings.append(f\"{arg_name}: {format(arg_type)}\")",
        "target": "mypy.messages.format_callable_args"
      },
      {
        "code": "helpful-string",
        "column": 35,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 6,
        "src": "arg_strings.append(f\"{arg_name}: {format(arg_type)}=...\")",
        "target": "mypy.messages.format_callable_args"
      },
      {
        "code": "helpful-string",
        "column": 35,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 3,
        "src": "arg_strings.append(f\"{arg_name}: {format(arg_type)} = ...\")",
        "target": "mypy.messages.format_callable_args"
      },
      {
        "code": "redundant-expr",
        "column": 17,
        "message": "Condition is always true",
        "offset": 7,
        "src": "elif arg_kind is ARG_STAR2:",
        "target": "mypy.messages.format_callable_args"
      },
      {
        "code": "redundant-expr",
        "column": 9,
        "message": "Condition is always false",
        "offset": 274,
        "src": "elif typ is None:",
        "target": "mypy.messages.format_type_inner"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.typetraverser.TypeTraverserVisitor\"",
        "offset": 22,
        "src": "def visit_instance(self, t: Instance) -> None:",
        "target": "mypy.messages.CollectAllInstancesQuery.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.typetraverser.TypeTraverserVisitor\"",
        "offset": 4,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> None:",
        "target": "mypy.messages.CollectAllInstancesQuery.visit_type_alias_type"
      },
      {
        "code": "possibly-undefined",
        "column": 21,
        "message": "Name \"strs\" may be undefined",
        "offset": 81,
        "src": "return tuple(strs)",
        "target": "mypy.messages"
      },
      {
        "code": "possibly-undefined",
        "column": 51,
        "message": "Name \"strs\" may be undefined",
        "offset": 2,
        "src": "return tuple(quote_type_string(s) for s in strs)",
        "target": "mypy.messages"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 76,
        "src": "first_arg = tp.def_extras.get(\"first_arg\")",
        "target": "mypy.messages.pretty_callable"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "first_arg = tp.def_extras.get(\"first_arg\")",
        "target": "mypy.messages.pretty_callable"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "if first_arg:",
        "target": "mypy.messages.pretty_callable"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "s = first_arg + s",
        "target": "mypy.messages.pretty_callable"
      }
    ],
    "mypy/metastore.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"getmtime\" is not using @override but is overriding a method in class \"mypy.metastore.MetadataStore\"",
        "offset": 84,
        "src": "def getmtime(self, name: str) -> float:",
        "target": "mypy.metastore.FilesystemMetadataStore.getmtime"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"read\" is not using @override but is overriding a method in class \"mypy.metastore.MetadataStore\"",
        "offset": 6,
        "src": "def read(self, name: str) -> str:",
        "target": "mypy.metastore.FilesystemMetadataStore.read"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"write\" is not using @override but is overriding a method in class \"mypy.metastore.MetadataStore\"",
        "offset": 9,
        "src": "def write(self, name: str, data: str, mtime: float | None = None) -> bool:",
        "target": "mypy.metastore.FilesystemMetadataStore.write"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"remove\" is not using @override but is overriding a method in class \"mypy.metastore.MetadataStore\"",
        "offset": 20,
        "src": "def remove(self, name: str) -> None:",
        "target": "mypy.metastore.FilesystemMetadataStore.remove"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"commit\" is not using @override but is overriding a method in class \"mypy.metastore.MetadataStore\"",
        "offset": 6,
        "src": "def commit(self) -> None:",
        "target": "mypy.metastore.FilesystemMetadataStore.commit"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"list_all\" is not using @override but is overriding a method in class \"mypy.metastore.MetadataStore\"",
        "offset": 3,
        "src": "def list_all(self) -> Iterable[str]:",
        "target": "mypy.metastore.FilesystemMetadataStore.list_all"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 47,
        "src": "def _query(self, name: str, field: str) -> Any:",
        "target": "mypy.metastore.SqliteMetadataStore._query"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 6,
        "src": "results = cur.fetchall()",
        "target": "mypy.metastore.SqliteMetadataStore._query"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "if not results:",
        "target": "mypy.metastore.SqliteMetadataStore._query"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "assert len(results) == 1",
        "target": "mypy.metastore.SqliteMetadataStore._query"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return results[0][0]",
        "target": "mypy.metastore.SqliteMetadataStore._query"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return results[0][0]",
        "target": "mypy.metastore.SqliteMetadataStore._query"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"getmtime\" is not using @override but is overriding a method in class \"mypy.metastore.MetadataStore\"",
        "offset": 2,
        "src": "def getmtime(self, name: str) -> float:",
        "target": "mypy.metastore.SqliteMetadataStore.getmtime"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "mtime = self._query(name, \"mtime\")",
        "target": "mypy.metastore.SqliteMetadataStore.getmtime"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert isinstance(mtime, float)",
        "target": "mypy.metastore.SqliteMetadataStore.getmtime"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"read\" is not using @override but is overriding a method in class \"mypy.metastore.MetadataStore\"",
        "offset": 3,
        "src": "def read(self, name: str) -> str:",
        "target": "mypy.metastore.SqliteMetadataStore.read"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "data = self._query(name, \"data\")",
        "target": "mypy.metastore.SqliteMetadataStore.read"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert isinstance(data, str)",
        "target": "mypy.metastore.SqliteMetadataStore.read"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"write\" is not using @override but is overriding a method in class \"mypy.metastore.MetadataStore\"",
        "offset": 3,
        "src": "def write(self, name: str, data: str, mtime: float | None = None) -> bool:",
        "target": "mypy.metastore.SqliteMetadataStore.write"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"remove\" is not using @override but is overriding a method in class \"mypy.metastore.MetadataStore\"",
        "offset": 16,
        "src": "def remove(self, name: str) -> None:",
        "target": "mypy.metastore.SqliteMetadataStore.remove"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"commit\" is not using @override but is overriding a method in class \"mypy.metastore.MetadataStore\"",
        "offset": 6,
        "src": "def commit(self) -> None:",
        "target": "mypy.metastore.SqliteMetadataStore.commit"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"list_all\" is not using @override but is overriding a method in class \"mypy.metastore.MetadataStore\"",
        "offset": 4,
        "src": "def list_all(self) -> Iterable[str]:",
        "target": "mypy.metastore.SqliteMetadataStore.list_all"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "for row in self.db.execute(\"SELECT path FROM files\"):",
        "target": "mypy.metastore.SqliteMetadataStore.list_all"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield row[0]",
        "target": "mypy.metastore.SqliteMetadataStore.list_all"
      }
    ],
    "mypy/mixedtraverser.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_var\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 33,
        "src": "def visit_var(self, var: Var) -> None:",
        "target": "mypy.mixedtraverser.MixedTraverserVisitor.visit_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 3,
        "src": "def visit_func(self, o: FuncItem) -> None:",
        "target": "mypy.mixedtraverser.MixedTraverserVisitor.visit_func"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_class_def(self, o: ClassDef) -> None:",
        "target": "mypy.mixedtraverser.MixedTraverserVisitor.visit_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 9,
        "src": "def visit_type_alias_expr(self, o: TypeAliasExpr) -> None:",
        "target": "mypy.mixedtraverser.MixedTraverserVisitor.visit_type_alias_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_type_var_expr(self, o: TypeVarExpr) -> None:",
        "target": "mypy.mixedtraverser.MixedTraverserVisitor.visit_type_var_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_typeddict_expr(self, o: TypedDictExpr) -> None:",
        "target": "mypy.mixedtraverser.MixedTraverserVisitor.visit_typeddict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_namedtuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_namedtuple_expr(self, o: NamedTupleExpr) -> None:",
        "target": "mypy.mixedtraverser.MixedTraverserVisitor.visit_namedtuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit__promote_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit__promote_expr(self, o: PromoteExpr) -> None:",
        "target": "mypy.mixedtraverser.MixedTraverserVisitor.visit__promote_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_newtype_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_newtype_expr(self, o: NewTypeExpr) -> None:",
        "target": "mypy.mixedtraverser.MixedTraverserVisitor.visit_newtype_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 6,
        "src": "def visit_assignment_stmt(self, o: AssignmentStmt) -> None:",
        "target": "mypy.mixedtraverser.MixedTraverserVisitor.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_for_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_for_stmt(self, o: ForStmt) -> None:",
        "target": "mypy.mixedtraverser.MixedTraverserVisitor.visit_for_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_with_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_with_stmt(self, o: WithStmt) -> None:",
        "target": "mypy.mixedtraverser.MixedTraverserVisitor.visit_with_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_cast_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 7,
        "src": "def visit_cast_expr(self, o: CastExpr) -> None:",
        "target": "mypy.mixedtraverser.MixedTraverserVisitor.visit_cast_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_type_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_assert_type_expr(self, o: AssertTypeExpr) -> None:",
        "target": "mypy.mixedtraverser.MixedTraverserVisitor.visit_assert_type_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_application\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_type_application(self, o: TypeApplication) -> None:",
        "target": "mypy.mixedtraverser.MixedTraverserVisitor.visit_type_application"
      }
    ],
    "mypy/modulefinder.py": [
      {
        "code": "redundant-expr",
        "column": 13,
        "message": "Condition is always true",
        "offset": 91,
        "src": "elif self is ModuleNotFoundReason.APPROVED_STUBS_NOT_INSTALLED:",
        "target": "mypy.modulefinder.ModuleNotFoundReason.error_message_templates"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 35,
        "src": "def __repr__(self) -> str:",
        "target": "mypy.modulefinder.BuildSource.__repr__"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 459,
        "src": "metadata = tomllib.load(f)",
        "target": "mypy.modulefinder.FindModuleCache._is_compatible_stub_package"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return bool(metadata.get(\"python3\", True))",
        "target": "mypy.modulefinder.FindModuleCache._is_compatible_stub_package"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return bool(metadata.get(\"python3\", True))",
        "target": "mypy.modulefinder.FindModuleCache._is_compatible_stub_package"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"[_T] ((...) -> _T) -> _lru_cache_wrapper[_T]\")",
        "offset": 156,
        "src": "@functools.lru_cache(maxsize=None)",
        "target": "mypy.modulefinder"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 19,
        "src": "sys_path, site_packages = ast.literal_eval(",
        "target": "mypy.modulefinder.get_search_dirs"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "print(err.stderr)",
        "target": "mypy.modulefinder.get_search_dirs"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "print(err.stdout)",
        "target": "mypy.modulefinder.get_search_dirs"
      }
    ],
    "mypy/moduleinspect.py": [
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 35,
        "src": "if module.__dict__.get(\"__file__\") is None:",
        "target": "mypy.moduleinspect.is_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "if module.__dict__.get(\"__file__\") is None:",
        "target": "mypy.moduleinspect.is_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"(Any, Any)\")",
        "offset": 4,
        "src": "return os.path.splitext(module.__dict__[\"__file__\"])[-1] in [\".so\", \".pyd\", \".dll\"]",
        "target": "mypy.moduleinspect.is_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return os.path.splitext(module.__dict__[\"__file__\"])[-1] in [\".so\", \".pyd\", \".dll\"]",
        "target": "mypy.moduleinspect.is_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "return os.path.splitext(module.__dict__[\"__file__\"])[-1] in [\".so\", \".pyd\", \".dll\"]",
        "target": "mypy.moduleinspect.is_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return os.path.splitext(module.__dict__[\"__file__\"])[-1] in [\".so\", \".pyd\", \".dll\"]",
        "target": "mypy.moduleinspect.is_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 17,
        "src": "name = getattr(package, \"__name__\", package_id)",
        "target": "mypy.moduleinspect.get_package_properties"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "file = getattr(package, \"__file__\", None)",
        "target": "mypy.moduleinspect.get_package_properties"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 2,
        "src": "if not isinstance(path, list):",
        "target": "mypy.moduleinspect.get_package_properties"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 2,
        "src": "pkg_all = getattr(package, \"__all__\", None)",
        "target": "mypy.moduleinspect.get_package_properties"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "if pkg_all is not None:",
        "target": "mypy.moduleinspect.get_package_properties"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "pkg_all = list(pkg_all)",
        "target": "mypy.moduleinspect.get_package_properties"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 25,
        "src": "name=name, file=file, path=path, all=pkg_all, is_c_module=is_c, subpackages=subpackages",
        "target": "mypy.moduleinspect.get_package_properties"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "name=name, file=file, path=path, all=pkg_all, is_c_module=is_c, subpackages=subpackages",
        "target": "mypy.moduleinspect.get_package_properties"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "name=name, file=file, path=path, all=pkg_all, is_c_module=is_c, subpackages=subpackages",
        "target": "mypy.moduleinspect.get_package_properties"
      }
    ],
    "mypy/mro.py": [
      {
        "code": "possibly-undefined",
        "column": 22,
        "message": "Name \"head\" may be undefined",
        "offset": 59,
        "src": "result.append(head)",
        "target": "mypy.mro"
      }
    ],
    "mypy/nodes.py": [
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 84,
        "src": "JsonDict: _TypeAlias = Dict[str, Any]",
        "target": "mypy.nodes"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__str__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 99,
        "src": "def __str__(self) -> str:",
        "target": "mypy.nodes.Node.__str__"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always false",
        "offset": 2,
        "src": "if ans is None:",
        "target": "mypy.nodes.Node.__str__"
      },
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "return repr(self)",
        "target": "mypy.nodes.Node.__str__"
      },
      {
        "code": "unreachable",
        "column": 12,
        "message": "See https://kotlinisland.github.io/basedmypy/_refs.html#code-unreachable for more info",
        "offset": 0,
        "src": "return repr(self)",
        "target": null
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Node\"",
        "offset": 18,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.Statement.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Node\"",
        "offset": 10,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.Expression.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"name\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 147,
        "src": "def name(self) -> str:",
        "target": "mypy.nodes"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"fullname\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 4,
        "src": "def fullname(self) -> str:",
        "target": "mypy.nodes"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Node\"",
        "offset": 3,
        "src": "def accept(self, visitor: NodeVisitor[T]) -> T:",
        "target": "mypy.nodes.MypyFile.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 15,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.nodes.MypyFile.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {",
        "target": "mypy.nodes.MypyFile.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 7,
        "src": "\"future_import_flags\": list(self.future_import_flags),",
        "target": "mypy.nodes.MypyFile.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"future_import_flags\": list(self.future_import_flags),",
        "target": "mypy.nodes.MypyFile.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 4,
        "src": "def deserialize(cls, data: JsonDict) -> MypyFile:",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"MypyFile\", data",
        "target": "mypy.nodes.MypyFile.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 50,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.Import.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 21,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.ImportFrom.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 19,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.ImportAll.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"name\" is not using @override but is overriding a method in class \"mypy.nodes.FuncBase\"",
        "offset": 91,
        "src": "def name(self) -> str:",
        "target": "mypy.nodes"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 8,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.OverloadedFuncDef.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.nodes.OverloadedFuncDef.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {",
        "target": "mypy.nodes.OverloadedFuncDef.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 2,
        "src": "\"items\": [i.serialize() for i in self.items],",
        "target": "mypy.nodes.OverloadedFuncDef.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"items\": [i.serialize() for i in self.items],",
        "target": "mypy.nodes.OverloadedFuncDef.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 8,
        "src": "def deserialize(cls, data: JsonDict) -> OverloadedFuncDef:",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"OverloadedFuncDef\"",
        "target": "mypy.nodes.OverloadedFuncDef.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "[cast(OverloadPart, SymbolNode.deserialize(d)) for d in data[\"items\"]]",
        "target": "mypy.nodes.OverloadedFuncDef.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[cast(OverloadPart, SymbolNode.deserialize(d)) for d in data[\"items\"]]",
        "target": "mypy.nodes.OverloadedFuncDef.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"set_line\" is not using @override but is overriding a method in class \"mypy.nodes.Context\"",
        "offset": 39,
        "src": "def set_line(",
        "target": "mypy.nodes.Argument.set_line"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"name\" is not using @override but is overriding a method in class \"mypy.nodes.FuncBase\"",
        "offset": 144,
        "src": "def name(self) -> str:",
        "target": "mypy.nodes"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 3,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.FuncDef.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.nodes.FuncDef.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 7,
        "src": "return {",
        "target": "mypy.nodes.FuncDef.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 5,
        "src": "\"arg_kinds\": [int(x.value) for x in self.arg_kinds],",
        "target": "mypy.nodes.FuncDef.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"arg_kinds\": [int(x.value) for x in self.arg_kinds],",
        "target": "mypy.nodes.FuncDef.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 13,
        "src": "def deserialize(cls, data: JsonDict) -> FuncDef:",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"FuncDef\"",
        "target": "mypy.nodes.FuncDef.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 16,
        "src": "ret.arg_kinds = [ArgKind(x) for x in data[\"arg_kinds\"]]",
        "target": "mypy.nodes.FuncDef.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ret.arg_kinds = [ArgKind(x) for x in data[\"arg_kinds\"]]",
        "target": "mypy.nodes.FuncDef.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"name\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 46,
        "src": "def name(self) -> str:",
        "target": "mypy.nodes"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"fullname\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 4,
        "src": "def fullname(self) -> str:",
        "target": "mypy.nodes"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 15,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.Decorator.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.nodes.Decorator.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {",
        "target": "mypy.nodes.Decorator.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 8,
        "src": "def deserialize(cls, data: JsonDict) -> Decorator:",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"Decorator\"",
        "target": "mypy.nodes.Decorator.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"name\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 120,
        "src": "def name(self) -> str:",
        "target": "mypy.nodes"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"fullname\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 4,
        "src": "def fullname(self) -> str:",
        "target": "mypy.nodes"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Node\"",
        "offset": 3,
        "src": "def accept(self, visitor: NodeVisitor[T]) -> T:",
        "target": "mypy.nodes.Var.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.nodes.Var.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 15,
        "src": "def deserialize(cls, data: JsonDict) -> Var:",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"Var\"",
        "target": "mypy.nodes.Var.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 86,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.ClassDef.accept"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 9,
        "src": "return {",
        "target": "mypy.nodes.ClassDef.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 4,
        "src": "\"type_vars\": [v.serialize() for v in self.type_vars],",
        "target": "mypy.nodes.ClassDef.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"type_vars\": [v.serialize() for v in self.type_vars],",
        "target": "mypy.nodes.ClassDef.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "assert data[\".class\"] == \"ClassDef\"",
        "target": "mypy.nodes.ClassDef.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "[",
        "target": "mypy.nodes.ClassDef.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 77,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "cast(mypy.types.TypeVarLikeType, mypy.types.deserialize_type(v))",
        "target": "mypy.nodes.ClassDef.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 21,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.GlobalDecl.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 17,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.NonlocalDecl.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 19,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.Block.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 20,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.ExpressionStmt.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 67,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.AssignmentStmt.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 21,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.OperatorAssignmentStmt.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 19,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.WhileStmt.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 54,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.ForStmt.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 15,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.ReturnStmt.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 17,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.AssertStmt.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 15,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.DelStmt.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 7,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.BreakStmt.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 7,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.ContinueStmt.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 7,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.PassStmt.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 19,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.IfStmt.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 18,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.RaiseStmt.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 37,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.TryStmt.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 33,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.WithStmt.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Statement\"",
        "offset": 28,
        "src": "def accept(self, visitor: StatementVisitor[T]) -> T:",
        "target": "mypy.nodes.MatchStmt.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 20,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.IntExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 23,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.StrExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 30,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.BytesExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 17,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.FloatExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 17,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.ComplexExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 9,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.EllipsisExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 21,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.StarExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 62,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.NameExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 22,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.MemberExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 78,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.CallExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 15,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.YieldFromExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 15,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.YieldExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 29,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.IndexExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 22,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.UnaryExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 16,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.AssignmentExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 46,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.OpExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 29,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.ComparisonExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 29,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.SliceExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 19,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.CastExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 19,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.AssertTypeExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 28,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.RevealExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 21,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.SuperExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"name\" is not using @override but is overriding a method in class \"mypy.nodes.FuncBase\"",
        "offset": 20,
        "src": "def name(self) -> str:",
        "target": "mypy.nodes"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 11,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.LambdaExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"is_dynamic\" is not using @override but is overriding a method in class \"mypy.nodes.FuncItem\"",
        "offset": 3,
        "src": "def is_dynamic(self) -> bool:",
        "target": "mypy.nodes.LambdaExpr.is_dynamic"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 17,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.ListExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 17,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.DictExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 19,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.TupleExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 17,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.SetExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 32,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.GeneratorExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 17,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.ListComprehension.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 17,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.SetComprehension.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 35,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.DictionaryComprehension.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 21,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.ConditionalExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 19,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.TypeApplication.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"name\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 56,
        "src": "def name(self) -> str:",
        "target": "mypy.nodes"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"fullname\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 4,
        "src": "def fullname(self) -> str:",
        "target": "mypy.nodes"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 36,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.TypeVarExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.nodes.TypeVarExpr.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {",
        "target": "mypy.nodes.TypeVarExpr.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 4,
        "src": "\"values\": [t.serialize() for t in self.values],",
        "target": "mypy.nodes.TypeVarExpr.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"values\": [t.serialize() for t in self.values],",
        "target": "mypy.nodes.TypeVarExpr.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 7,
        "src": "def deserialize(cls, data: JsonDict) -> TypeVarExpr:",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"TypeVarExpr\"",
        "target": "mypy.nodes.TypeVarExpr.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "[mypy.types.deserialize_type(v) for v in data[\"values\"]],",
        "target": "mypy.nodes.TypeVarExpr.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[mypy.types.deserialize_type(v) for v in data[\"values\"]],",
        "target": "mypy.nodes.TypeVarExpr.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 12,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.ParamSpecExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.nodes.ParamSpecExpr.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {",
        "target": "mypy.nodes.ParamSpecExpr.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 10,
        "src": "def deserialize(cls, data: JsonDict) -> ParamSpecExpr:",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"ParamSpecExpr\"",
        "target": "mypy.nodes.ParamSpecExpr.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 31,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.TypeVarTupleExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.nodes.TypeVarTupleExpr.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {",
        "target": "mypy.nodes.TypeVarTupleExpr.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 11,
        "src": "def deserialize(cls, data: JsonDict) -> TypeVarTupleExpr:",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"TypeVarTupleExpr\"",
        "target": "mypy.nodes.TypeVarTupleExpr.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 24,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.TypeAliasExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 21,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.NamedTupleExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 18,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.TypedDictExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 23,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.EnumCallExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 15,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.PromoteExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 25,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.NewTypeExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 17,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.AwaitExpr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 33,
        "src": "def __repr__(self) -> str:",
        "target": "mypy.nodes.TempNode.__repr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Expression\"",
        "offset": 3,
        "src": "def accept(self, visitor: ExpressionVisitor[T]) -> T:",
        "target": "mypy.nodes.TempNode.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"name\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 305,
        "src": "def name(self) -> str:",
        "target": "mypy.nodes"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"fullname\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 5,
        "src": "def fullname(self) -> str:",
        "target": "mypy.nodes"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 44,
        "src": "def __repr__(self) -> str:",
        "target": "mypy.nodes.TypeInfo.__repr__"
      },
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always false",
        "offset": 16,
        "src": "if isinstance(node, FuncBase):",
        "target": "mypy.nodes.TypeInfo.get_method"
      },
      {
        "code": "unreachable",
        "column": 20,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "return node",
        "target": "mypy.nodes.TypeInfo.get_method"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__str__\" is not using @override but is overriding a method in class \"mypy.nodes.Node\"",
        "offset": 65,
        "src": "def __str__(self) -> str:",
        "target": "mypy.nodes.TypeInfo.__str__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 41,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.nodes.TypeInfo.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 39,
        "src": "def deserialize(cls, data: JsonDict) -> TypeInfo:",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "ti.abstract_attributes = [(attr[0], attr[1]) for attr in data[\"abstract_attributes\"]]",
        "target": "mypy.nodes.TypeInfo.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"(Any, Any)\")",
        "offset": 0,
        "src": "ti.abstract_attributes = [(attr[0], attr[1]) for attr in data[\"abstract_attributes\"]]",
        "target": "mypy.nodes.TypeInfo.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ti.abstract_attributes = [(attr[0], attr[1]) for attr in data[\"abstract_attributes\"]]",
        "target": "mypy.nodes.TypeInfo.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ti.abstract_attributes = [(attr[0], attr[1]) for attr in data[\"abstract_attributes\"]]",
        "target": "mypy.nodes.TypeInfo.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "ti.bases = [mypy.types.Instance.deserialize(b) for b in data[\"bases\"]]",
        "target": "mypy.nodes.TypeInfo.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ti.bases = [mypy.types.Instance.deserialize(b) for b in data[\"bases\"]]",
        "target": "mypy.nodes.TypeInfo.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "for p in data[\"_promote\"]:",
        "target": "mypy.nodes.TypeInfo.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "t = mypy.types.deserialize_type(p)",
        "target": "mypy.nodes.TypeInfo.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__getattribute__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 79,
        "src": "def __getattribute__(self, attr: str) -> type:",
        "target": "mypy.nodes.FakeInfo.__getattribute__"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "return object.__getattribute__(self, attr)  # type: ignore[no-any-return]",
        "target": "mypy.nodes.FakeInfo.__getattribute__"
      },
      {
        "code": null,
        "column": 19,
        "message": "Error code \"no-any-expr\" not covered by \"type: ignore\" comment",
        "offset": 0,
        "src": "return object.__getattribute__(self, attr)  # type: ignore[no-any-return]",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "raise AssertionError(object.__getattribute__(self, \"msg\"))",
        "target": "mypy.nodes.FakeInfo.__getattribute__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"name\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 182,
        "src": "def name(self) -> str:",
        "target": "mypy.nodes"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"fullname\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 4,
        "src": "def fullname(self) -> str:",
        "target": "mypy.nodes"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 7,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.nodes.TypeAlias.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 5,
        "src": "\"alias_tvars\": [v.serialize() for v in self.alias_tvars],",
        "target": "mypy.nodes.TypeAlias.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"alias_tvars\": [v.serialize() for v in self.alias_tvars],",
        "target": "mypy.nodes.TypeAlias.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Node\"",
        "offset": 8,
        "src": "def accept(self, visitor: NodeVisitor[T]) -> T:",
        "target": "mypy.nodes.TypeAlias.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 4,
        "src": "def deserialize(cls, data: JsonDict) -> TypeAlias:",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"TypeAlias\"",
        "target": "mypy.nodes.TypeAlias.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "alias_tvars = [mypy.types.deserialize_type(v) for v in data[\"alias_tvars\"]]",
        "target": "mypy.nodes.TypeAlias.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "alias_tvars = [mypy.types.deserialize_type(v) for v in data[\"alias_tvars\"]]",
        "target": "mypy.nodes.TypeAlias.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"name\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 78,
        "src": "def name(self) -> str:",
        "target": "mypy.nodes"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"fullname\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 4,
        "src": "def fullname(self) -> str:",
        "target": "mypy.nodes"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.nodes.SymbolNode\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.nodes.PlaceholderNode.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Node\"",
        "offset": 3,
        "src": "def accept(self, visitor: NodeVisitor[T]) -> T:",
        "target": "mypy.nodes.PlaceholderNode.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__str__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 119,
        "src": "def __str__(self) -> str:",
        "target": "mypy.nodes.SymbolTableNode.__str__"
      },
      {
        "code": "redundant-expr",
        "column": 15,
        "message": "Condition is always true",
        "offset": 31,
        "src": "if prefix is not None:",
        "target": "mypy.nodes.SymbolTableNode.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 17,
        "src": "assert data[\".class\"] == \"SymbolTableNode\"",
        "target": "mypy.nodes.SymbolTableNode.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__str__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 29,
        "src": "def __str__(self) -> str:",
        "target": "mypy.nodes.SymbolTable.__str__"
      },
      {
        "code": "redundant-expr",
        "column": 15,
        "message": "Condition is always true",
        "offset": 4,
        "src": "if isinstance(value, SymbolTableNode):",
        "target": "mypy.nodes.SymbolTable.__str__"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 7,
        "src": "a.append(\"  <invalid item>\")",
        "target": "mypy.nodes.SymbolTable.__str__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"copy\" is not using @override but is overriding a method in class \"builtins.dict\"",
        "offset": 6,
        "src": "def copy(self) -> SymbolTable:",
        "target": "mypy.nodes.SymbolTable.copy"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 17,
        "src": "assert data[\".class\"] == \"SymbolTable\"",
        "target": "mypy.nodes.SymbolTable.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 39,
        "src": "return {",
        "target": "mypy.nodes.DataclassTransformSpec.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 5,
        "src": "\"field_specifiers\": list(self.field_specifiers),",
        "target": "mypy.nodes.DataclassTransformSpec.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"field_specifiers\": list(self.field_specifiers),",
        "target": "mypy.nodes.DataclassTransformSpec.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 64,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 10,
        "src": "field_specifiers=tuple(data.get(\"field_specifiers\", [])),",
        "target": "mypy.nodes.DataclassTransformSpec.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "return [name for name in names if getattr(node, name)]",
        "target": "mypy.nodes.get_flags"
      },
      {
        "code": "helpful-string",
        "column": 11,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 21,
        "src": "return f\"{initial}.{expr.name}\"",
        "target": "mypy.nodes.get_member_expr_fullname"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 3,
        "src": "deserialize_map: Final = {",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "deserialize_map: Final = {",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "for key, obj in globals().items()",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict_items[str, Any]\")",
        "offset": 0,
        "src": "for key, obj in globals().items()",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 1,
        "src": "if type(obj) is not FakeInfo",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if type(obj) is not FakeInfo",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "and isinstance(obj, type)",
        "target": "mypy.nodes"
      },
      {
        "code": "redundant-expr",
        "column": 13,
        "message": "Condition is always true",
        "offset": 36,
        "src": "elif kind == ARG_STAR2:",
        "target": "mypy.nodes.check_arg_kinds"
      }
    ],
    "mypy/options.py": [
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 128,
        "src": "MACHDEP = sysconfig.get_config_var(\"MACHDEP\")",
        "target": "mypy.options.Options.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if MACHDEP == \"emscripten\":",
        "target": "mypy.options.Options.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "self.platform = MACHDEP",
        "target": "mypy.options.Options.__init__"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 269,
        "src": "self.transform_source: Callable[[Any], Any] | None = None",
        "target": "mypy.options.Options.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"Any | Iterable[(Any, Any)]\")",
        "offset": 56,
        "src": "d = dict(getattr(self, \"__dict__\", ()))",
        "target": "mypy.options.Options.snapshot"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "d[k] = getattr(self, k)",
        "target": "mypy.options.Options.snapshot"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "d = {k: v for k, v in d.items() if not k.startswith(\"_\")}",
        "target": "mypy.options.Options.snapshot"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __repr__(self) -> str:",
        "target": "mypy.options.Options.__repr__"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 143,
        "src": "val = getattr(self, opt)",
        "target": "mypy.options.Options.select_options_affecting_cache"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "val = sorted([code.code for code in val])",
        "target": "mypy.options.Options.select_options_affecting_cache"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = sorted([code.code for code in val])",
        "target": "mypy.options.Options.select_options_affecting_cache"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "val = sorted([code.code for code in val])",
        "target": "mypy.options.Options.select_options_affecting_cache"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = sorted([code.code for code in val])",
        "target": "mypy.options.Options.select_options_affecting_cache"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = sorted([code.code for code in val])",
        "target": "mypy.options.Options.select_options_affecting_cache"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "result[opt] = val",
        "target": "mypy.options.Options.select_options_affecting_cache"
      }
    ],
    "mypy/parse.py": [
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"(Any) -> Any | None\")",
        "offset": 18,
        "src": "if options.transform_source is not None:",
        "target": "mypy.parse.parse"
      }
    ],
    "mypy/partially_defined.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_global_decl\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 360,
        "src": "def visit_global_decl(self, o: GlobalDecl) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_global_decl"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_nonlocal_decl\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 5,
        "src": "def visit_nonlocal_decl(self, o: NonlocalDecl) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_nonlocal_decl"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 14,
        "src": "def visit_assignment_stmt(self, o: AssignmentStmt) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_expr\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 5,
        "src": "def visit_assignment_expr(self, o: AssignmentExpr) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_assignment_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_if_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 4,
        "src": "def visit_if_stmt(self, o: IfStmt) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_if_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_match_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 16,
        "src": "def visit_match_stmt(self, o: MatchStmt) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_match_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 18,
        "src": "def visit_func_def(self, o: FuncDef) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_func(self, o: FuncItem) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_func"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_generator_expr\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 17,
        "src": "def visit_generator_expr(self, o: GeneratorExpr) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_generator_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dictionary_comprehension\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 7,
        "src": "def visit_dictionary_comprehension(self, o: DictionaryComprehension) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_dictionary_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_for_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 7,
        "src": "def visit_for_stmt(self, o: ForStmt) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_for_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 23,
        "src": "def visit_return_stmt(self, o: ReturnStmt) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_return_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_lambda_expr\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 4,
        "src": "def visit_lambda_expr(self, o: LambdaExpr) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_lambda_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 5,
        "src": "def visit_assert_stmt(self, o: AssertStmt) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_assert_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raise_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 5,
        "src": "def visit_raise_stmt(self, o: RaiseStmt) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_raise_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_continue_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 4,
        "src": "def visit_continue_stmt(self, o: ContinueStmt) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_continue_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_break_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 4,
        "src": "def visit_break_stmt(self, o: BreakStmt) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_break_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_expression_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 6,
        "src": "def visit_expression_stmt(self, o: ExpressionStmt) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_expression_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_try_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 5,
        "src": "def visit_try_stmt(self, o: TryStmt) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_try_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_while_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 69,
        "src": "def visit_while_stmt(self, o: WhileStmt) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_while_stmt"
      },
      {
        "code": "truthy-bool",
        "column": 15,
        "message": "Member \"else_body\" has type \"Block\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 20,
        "src": "if o.else_body:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_while_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_as_pattern\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 6,
        "src": "def visit_as_pattern(self, o: AsPattern) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_as_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_starred_pattern\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 5,
        "src": "def visit_starred_pattern(self, o: StarredPattern) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_starred_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 5,
        "src": "def visit_name_expr(self, o: NameExpr) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_with_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 26,
        "src": "def visit_with_stmt(self, o: WithStmt) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_with_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 6,
        "src": "def visit_class_def(self, o: ClassDef) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 6,
        "src": "def visit_import(self, o: Import) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_import"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_from\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 13,
        "src": "def visit_import_from(self, o: ImportFrom) -> None:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_import_from"
      }
    ],
    "mypy/patterns.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.nodes.Node\"",
        "offset": 21,
        "src": "def accept(self, visitor: PatternVisitor[T]) -> T:",
        "target": "mypy.patterns.Pattern.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.patterns.Pattern\"",
        "offset": 20,
        "src": "def accept(self, visitor: PatternVisitor[T]) -> T:",
        "target": "mypy.patterns.AsPattern.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.patterns.Pattern\"",
        "offset": 13,
        "src": "def accept(self, visitor: PatternVisitor[T]) -> T:",
        "target": "mypy.patterns.OrPattern.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.patterns.Pattern\"",
        "offset": 13,
        "src": "def accept(self, visitor: PatternVisitor[T]) -> T:",
        "target": "mypy.patterns.ValuePattern.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.patterns.Pattern\"",
        "offset": 12,
        "src": "def accept(self, visitor: PatternVisitor[T]) -> T:",
        "target": "mypy.patterns.SingletonPattern.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.patterns.Pattern\"",
        "offset": 13,
        "src": "def accept(self, visitor: PatternVisitor[T]) -> T:",
        "target": "mypy.patterns.SequencePattern.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.patterns.Pattern\"",
        "offset": 13,
        "src": "def accept(self, visitor: PatternVisitor[T]) -> T:",
        "target": "mypy.patterns.StarredPattern.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.patterns.Pattern\"",
        "offset": 16,
        "src": "def accept(self, visitor: PatternVisitor[T]) -> T:",
        "target": "mypy.patterns.MappingPattern.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.patterns.Pattern\"",
        "offset": 26,
        "src": "def accept(self, visitor: PatternVisitor[T]) -> T:",
        "target": "mypy.patterns.ClassPattern.accept"
      }
    ],
    "mypy/plugin.py": [
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 391,
        "src": "def add_symbol_table_node(self, name: str, stnode: SymbolTableNode) -> Any:",
        "target": "mypy.plugin.SemanticAnalyzerPluginInterface.add_symbol_table_node"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (self: SemanticAnalyzerPluginInterface, name: str, stnode: SymbolTableNode) -> Any\")",
        "offset": 0,
        "src": "def add_symbol_table_node(self, name: str, stnode: SymbolTableNode) -> Any:",
        "target": "mypy.plugin"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "See https://kotlinisland.github.io/basedmypy/_refs.html#code-no-any-decorated for more info",
        "offset": 0,
        "src": "def add_symbol_table_node(self, name: str, stnode: SymbolTableNode) -> Any:",
        "target": null
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"lookup_fully_qualified\" is not using @override but is overriding a method in class \"mypy.plugin.CommonPluginApi\"",
        "offset": 153,
        "src": "def lookup_fully_qualified(self, fullname: str) -> SymbolTableNode | None:",
        "target": "mypy.plugin.Plugin.lookup_fully_qualified"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 4,
        "src": "def report_config_data(self, ctx: ReportConfigContext) -> Any:",
        "target": "mypy.plugin.Plugin.report_config_data"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"set_modules\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 285,
        "src": "def set_modules(self, modules: dict[str, MypyFile]) -> None:",
        "target": "mypy.plugin.ChainedPlugin.set_modules"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 4,
        "src": "def report_config_data(self, ctx: ReportConfigContext) -> Any:",
        "target": "mypy.plugin.ChainedPlugin.report_config_data"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"report_config_data\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 0,
        "src": "def report_config_data(self, ctx: ReportConfigContext) -> Any:",
        "target": "mypy.plugin.ChainedPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "config_data = [plugin.report_config_data(ctx) for plugin in self._plugins]",
        "target": "mypy.plugin.ChainedPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "config_data = [plugin.report_config_data(ctx) for plugin in self._plugins]",
        "target": "mypy.plugin.ChainedPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return config_data if any(x is not None for x in config_data) else None",
        "target": "mypy.plugin.ChainedPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any] | None\")",
        "offset": 0,
        "src": "return config_data if any(x is not None for x in config_data) else None",
        "target": "mypy.plugin.ChainedPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return config_data if any(x is not None for x in config_data) else None",
        "target": "mypy.plugin.ChainedPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return config_data if any(x is not None for x in config_data) else None",
        "target": "mypy.plugin.ChainedPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "return config_data if any(x is not None for x in config_data) else None",
        "target": "mypy.plugin.ChainedPlugin.report_config_data"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_additional_deps\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 2,
        "src": "def get_additional_deps(self, file: MypyFile) -> list[tuple[int, str, int]]:",
        "target": "mypy.plugin.ChainedPlugin.get_additional_deps"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_type_analyze_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 6,
        "src": "def get_type_analyze_hook(self, fullname: str) -> Callable[[AnalyzeTypeContext], Type] | None:",
        "target": "mypy.plugin.ChainedPlugin.get_type_analyze_hook"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_function_signature_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 3,
        "src": "def get_function_signature_hook(",
        "target": "mypy.plugin.ChainedPlugin.get_function_signature_hook"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_function_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 5,
        "src": "def get_function_hook(self, fullname: str) -> Callable[[FunctionContext], Type] | None:",
        "target": "mypy.plugin.ChainedPlugin.get_function_hook"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_method_signature_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 3,
        "src": "def get_method_signature_hook(",
        "target": "mypy.plugin.ChainedPlugin.get_method_signature_hook"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_method_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 5,
        "src": "def get_method_hook(self, fullname: str) -> Callable[[MethodContext], Type] | None:",
        "target": "mypy.plugin.ChainedPlugin.get_method_hook"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_attribute_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 3,
        "src": "def get_attribute_hook(self, fullname: str) -> Callable[[AttributeContext], Type] | None:",
        "target": "mypy.plugin.ChainedPlugin.get_attribute_hook"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_class_attribute_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 3,
        "src": "def get_class_attribute_hook(self, fullname: str) -> Callable[[AttributeContext], Type] | None:",
        "target": "mypy.plugin.ChainedPlugin.get_class_attribute_hook"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_class_decorator_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 3,
        "src": "def get_class_decorator_hook(self, fullname: str) -> Callable[[ClassDefContext], None] | None:",
        "target": "mypy.plugin.ChainedPlugin.get_class_decorator_hook"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_class_decorator_hook_2\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 3,
        "src": "def get_class_decorator_hook_2(",
        "target": "mypy.plugin.ChainedPlugin.get_class_decorator_hook_2"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_metaclass_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 5,
        "src": "def get_metaclass_hook(self, fullname: str) -> Callable[[ClassDefContext], None] | None:",
        "target": "mypy.plugin.ChainedPlugin.get_metaclass_hook"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_base_class_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 3,
        "src": "def get_base_class_hook(self, fullname: str) -> Callable[[ClassDefContext], None] | None:",
        "target": "mypy.plugin.ChainedPlugin.get_base_class_hook"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_customize_class_mro_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 3,
        "src": "def get_customize_class_mro_hook(",
        "target": "mypy.plugin.ChainedPlugin.get_customize_class_mro_hook"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_dynamic_class_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 5,
        "src": "def get_dynamic_class_hook(",
        "target": "mypy.plugin.ChainedPlugin.get_dynamic_class_hook"
      }
    ],
    "mypy/plugins/attrs.py": [
      {
        "code": "truthy-bool",
        "column": 19,
        "message": "\"init_type\" has type \"Type\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 132,
        "src": "if init_type and self.init_type and self.converter.ret_type:",
        "target": "mypy.plugins.attrs.Attribute.argument"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 46,
        "src": "return {",
        "target": "mypy.plugins.attrs.Attribute.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 112,
        "src": "ctx.cls.info.metadata[\"attrs_tag\"] = {}",
        "target": "mypy.plugins.attrs.attr_tag_callback"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 59,
        "src": "ctx.cls.info.metadata[\"attrs\"] = {",
        "target": "mypy.plugins.attrs.attr_class_maker_callback"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"attributes\": [attr.serialize() for attr in attributes],",
        "target": "mypy.plugins.attrs.attr_class_maker_callback"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"attributes\": [attr.serialize() for attr in attributes],",
        "target": "mypy.plugins.attrs.attr_class_maker_callback"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 72,
        "src": "for data in super_info.metadata[\"attrs\"][\"attributes\"]:",
        "target": "mypy.plugins.attrs._analyze_class"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if data[\"name\"] not in taken_attr_names:",
        "target": "mypy.plugins.attrs._analyze_class"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "a = Attribute.deserialize(super_info, data, ctx.api)",
        "target": "mypy.plugins.attrs._analyze_class"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 31,
        "src": "info.metadata[\"attrs\"] = {\"attributes\": [], \"frozen\": False}",
        "target": "mypy.plugins.attrs._add_empty_metadata"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 0,
        "src": "info.metadata[\"attrs\"] = {\"attributes\": [], \"frozen\": False}",
        "target": "mypy.plugins.attrs._add_empty_metadata"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "info.metadata[\"attrs\"] = {\"attributes\": [], \"frozen\": False}",
        "target": "mypy.plugins.attrs._add_empty_metadata"
      },
      {
        "code": "truthy-bool",
        "column": 12,
        "message": "Expression has type \"Expression\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 193,
        "src": "and converter_expr.args[0]",
        "target": "mypy.plugins.attrs._parse_converter"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 194,
        "src": "getattr(arg.variable.type, \"type_of_any\", None) == TypeOfAny.unannotated",
        "target": "mypy.plugins.attrs._add_init"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "getattr(arg.variable.type, \"type_of_any\", None) == TypeOfAny.unannotated",
        "target": "mypy.plugins.attrs._add_init"
      },
      {
        "code": "helpful-string",
        "column": 21,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 214,
        "src": "ctx.api.fail(f'\"{ctx.default_signature.name}\" has unexpected type annotation', ctx.context)",
        "target": "mypy.plugins.attrs.evolve_function_sig_callback"
      },
      {
        "code": "helpful-string",
        "column": 13,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 21,
        "src": "name=f\"{ctx.default_signature.name} of {inst_type_str}\",",
        "target": "mypy.plugins.attrs.evolve_function_sig_callback"
      }
    ],
    "mypy/plugins/dataclasses.py": [
      {
        "code": "redundant-expr",
        "column": 13,
        "message": "Condition is always true",
        "offset": 135,
        "src": "elif of == \"__post_init__\":",
        "target": "mypy.plugins.dataclasses.DataclassAttribute.to_argument"
      },
      {
        "code": "possibly-undefined",
        "column": 17,
        "message": "Name \"arg_kind\" may be undefined",
        "offset": 18,
        "src": "kind=arg_kind,",
        "target": "mypy.plugins.dataclasses"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 20,
        "src": "return {",
        "target": "mypy.plugins.dataclasses.DataclassAttribute.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 210,
        "src": "info.metadata[\"dataclass\"] = {",
        "target": "mypy.plugins.dataclasses.DataclassTransformer.transform"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"attributes\": [attr.serialize() for attr in attributes],",
        "target": "mypy.plugins.dataclasses.DataclassTransformer.transform"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"attributes\": [attr.serialize() for attr in attributes],",
        "target": "mypy.plugins.dataclasses.DataclassTransformer.transform"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 146,
        "src": "for data in info.metadata[\"dataclass\"][\"attributes\"]:",
        "target": "mypy.plugins.dataclasses.DataclassTransformer.collect_attributes"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "name: str = data[\"name\"]",
        "target": "mypy.plugins.dataclasses.DataclassTransformer.collect_attributes"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "attr = DataclassAttribute.deserialize(info, data, self._api)",
        "target": "mypy.plugins.dataclasses.DataclassTransformer.collect_attributes"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 390,
        "src": "info.metadata[\"dataclass_tag\"] = {}",
        "target": "mypy.plugins.dataclasses.add_dataclass_tag"
      },
      {
        "code": "helpful-string",
        "column": 21,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 128,
        "src": "ctx.api.fail(f'\"{ctx.default_signature.name}\" has unexpected type annotation', ctx.context)",
        "target": "mypy.plugins.dataclasses.replace_function_sig_callback"
      },
      {
        "code": "helpful-string",
        "column": 13,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 21,
        "src": "name=f\"{ctx.default_signature.name} of {inst_type_str}\",",
        "target": "mypy.plugins.dataclasses.replace_function_sig_callback"
      }
    ],
    "mypy/plugins/default.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_function_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 43,
        "src": "def get_function_hook(self, fullname: str) -> Callable[[FunctionContext], Type] | None:",
        "target": "mypy.plugins.default.DefaultPlugin.get_function_hook"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_function_signature_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 22,
        "src": "def get_function_signature_hook(",
        "target": "mypy.plugins.default.DefaultPlugin.get_function_signature_hook"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_method_signature_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 15,
        "src": "def get_method_signature_hook(",
        "target": "mypy.plugins.default.DefaultPlugin.get_method_signature_hook"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_method_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 30,
        "src": "def get_method_hook(self, fullname: str) -> Callable[[MethodContext], Type] | None:",
        "target": "mypy.plugins.default.DefaultPlugin.get_method_hook"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_attribute_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 44,
        "src": "def get_attribute_hook(self, fullname: str) -> Callable[[AttributeContext], Type] | None:",
        "target": "mypy.plugins.default.DefaultPlugin.get_attribute_hook"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_class_decorator_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 13,
        "src": "def get_class_decorator_hook(self, fullname: str) -> Callable[[ClassDefContext], None] | None:",
        "target": "mypy.plugins.default.DefaultPlugin.get_class_decorator_hook"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_class_decorator_hook_2\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 19,
        "src": "def get_class_decorator_hook_2(",
        "target": "mypy.plugins.default.DefaultPlugin.get_class_decorator_hook_2"
      },
      {
        "code": "redundant-expr",
        "column": 9,
        "message": "Condition is always false",
        "offset": 360,
        "src": "elif isinstance(ctx.type, LiteralType):",
        "target": "mypy.plugins.default.tuple_mul_callback"
      },
      {
        "code": "unreachable",
        "column": 20,
        "message": "Intersection of \"TupleType & LiteralType\" cannot exist: would have incompatible method signatures",
        "offset": 0,
        "src": "elif isinstance(ctx.type, LiteralType):",
        "target": "mypy.plugins.default.tuple_mul_callback"
      },
      {
        "code": "unreachable",
        "column": 8,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "value = arg_type.value",
        "target": "mypy.plugins.default.tuple_mul_callback"
      }
    ],
    "mypy/plugins/enums.py": [
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always true",
        "offset": 187,
        "src": "if underlying_type is not None:",
        "target": "mypy.plugins.enums.enum_value_callback"
      }
    ],
    "mypy/plugins/functools.py": [
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always false",
        "offset": 91,
        "src": "if isinstance(node, FuncItem) and isinstance(node.type, CallableType):",
        "target": "mypy.plugins.functools._analyze_class"
      },
      {
        "code": "unreachable",
        "column": 50,
        "message": "Right operand of \"and\" is never evaluated",
        "offset": 0,
        "src": "if isinstance(node, FuncItem) and isinstance(node.type, CallableType):",
        "target": "mypy.plugins.functools._analyze_class"
      },
      {
        "code": "unreachable",
        "column": 20,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "comparison_methods[name] = _MethodInfo(node.is_static, node.type)",
        "target": "mypy.plugins.functools._analyze_class"
      }
    ],
    "mypy/plugins/proper_plugin.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_function_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 45,
        "src": "def get_function_hook(self, fullname: str) -> Callable[[FunctionContext], Type] | None:",
        "target": "mypy.plugins.proper_plugin.ProperTypePlugin.get_function_hook"
      }
    ],
    "mypy/plugins/re.py": [
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"[_T] ((...) -> _T) -> _lru_cache_wrapper[_T]\")",
        "offset": 332,
        "src": "@lru_cache(None)",
        "target": "mypy.plugins.re"
      }
    ],
    "mypy/pyinfo.py": [
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 45,
        "src": "getattr(sys, \"platlibdir\", \"lib\"),",
        "target": "mypy.pyinfo.getsyspath"
      }
    ],
    "mypy/reachability.py": [
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 146,
        "src": "result = consider_sys_platform(expr, options.platform)",
        "target": "mypy.reachability.infer_condition_value"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 189,
        "src": "def visit_import(self, node: Import) -> None:",
        "target": "mypy.reachability.MarkImportsUnreachableVisitor.visit_import"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_from\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 3,
        "src": "def visit_import_from(self, node: ImportFrom) -> None:",
        "target": "mypy.reachability.MarkImportsUnreachableVisitor.visit_import_from"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_all\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_import_all(self, node: ImportAll) -> None:",
        "target": "mypy.reachability.MarkImportsUnreachableVisitor.visit_import_all"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 11,
        "src": "def visit_import(self, node: Import) -> None:",
        "target": "mypy.reachability.MarkImportsMypyOnlyVisitor.visit_import"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_from\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 3,
        "src": "def visit_import_from(self, node: ImportFrom) -> None:",
        "target": "mypy.reachability.MarkImportsMypyOnlyVisitor.visit_import_from"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_all\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_import_all(self, node: ImportAll) -> None:",
        "target": "mypy.reachability.MarkImportsMypyOnlyVisitor.visit_import_all"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 3,
        "src": "def visit_func_def(self, node: FuncDef) -> None:",
        "target": "mypy.reachability.MarkImportsMypyOnlyVisitor.visit_func_def"
      }
    ],
    "mypy/refinfo.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 35,
        "src": "def visit_name_expr(self, expr: NameExpr) -> None:",
        "target": "mypy.refinfo.RefInfoVisitor.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_member_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_member_expr(self, expr: MemberExpr) -> None:",
        "target": "mypy.refinfo.RefInfoVisitor.visit_member_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_func_def(self, func: FuncDef) -> None:",
        "target": "mypy.refinfo.RefInfoVisitor.visit_func_def"
      }
    ],
    "mypy/renaming.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_mypy_file\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 93,
        "src": "def visit_mypy_file(self, file_node: MypyFile) -> None:",
        "target": "mypy.renaming.VariableRenameVisitor.visit_mypy_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 10,
        "src": "def visit_func_def(self, fdef: FuncDef) -> None:",
        "target": "mypy.renaming.VariableRenameVisitor.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 17,
        "src": "def visit_class_def(self, cdef: ClassDef) -> None:",
        "target": "mypy.renaming.VariableRenameVisitor.visit_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_block\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_block(self, block: Block) -> None:",
        "target": "mypy.renaming.VariableRenameVisitor.visit_block"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_while_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_while_stmt(self, stmt: WhileStmt) -> None:",
        "target": "mypy.renaming.VariableRenameVisitor.visit_while_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_for_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_for_stmt(self, stmt: ForStmt) -> None:",
        "target": "mypy.renaming.VariableRenameVisitor.visit_for_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_break_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 10,
        "src": "def visit_break_stmt(self, stmt: BreakStmt) -> None:",
        "target": "mypy.renaming.VariableRenameVisitor.visit_break_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_continue_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_continue_stmt(self, stmt: ContinueStmt) -> None:",
        "target": "mypy.renaming.VariableRenameVisitor.visit_continue_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_try_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 3,
        "src": "def visit_try_stmt(self, stmt: TryStmt) -> None:",
        "target": "mypy.renaming.VariableRenameVisitor.visit_try_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_with_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 7,
        "src": "def visit_with_stmt(self, stmt: WithStmt) -> None:",
        "target": "mypy.renaming.VariableRenameVisitor.visit_with_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 14,
        "src": "def visit_import(self, imp: Import) -> None:",
        "target": "mypy.renaming.VariableRenameVisitor.visit_import"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_from\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_import_from(self, imp: ImportFrom) -> None:",
        "target": "mypy.renaming.VariableRenameVisitor.visit_import_from"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_assignment_stmt(self, s: AssignmentStmt) -> None:",
        "target": "mypy.renaming.VariableRenameVisitor.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_match_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_match_stmt(self, s: MatchStmt) -> None:",
        "target": "mypy.renaming.VariableRenameVisitor.visit_match_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 47,
        "src": "def visit_name_expr(self, expr: NameExpr) -> None:",
        "target": "mypy.renaming.VariableRenameVisitor.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_mypy_file\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 224,
        "src": "def visit_mypy_file(self, file_node: MypyFile) -> None:",
        "target": "mypy.renaming.LimitedVariableRenameVisitor.visit_mypy_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 9,
        "src": "def visit_func_def(self, fdef: FuncDef) -> None:",
        "target": "mypy.renaming.LimitedVariableRenameVisitor.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 7,
        "src": "def visit_class_def(self, cdef: ClassDef) -> None:",
        "target": "mypy.renaming.LimitedVariableRenameVisitor.visit_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_with_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_with_stmt(self, stmt: WithStmt) -> None:",
        "target": "mypy.renaming.LimitedVariableRenameVisitor.visit_with_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 38,
        "src": "def visit_import(self, imp: Import) -> None:",
        "target": "mypy.renaming.LimitedVariableRenameVisitor.visit_import"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_from\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_import_from(self, imp: ImportFrom) -> None:",
        "target": "mypy.renaming.LimitedVariableRenameVisitor.visit_import_from"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_all\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_import_all(self, imp: ImportAll) -> None:",
        "target": "mypy.renaming.LimitedVariableRenameVisitor.visit_import_all"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_name_expr(self, expr: NameExpr) -> None:",
        "target": "mypy.renaming.LimitedVariableRenameVisitor.visit_name_expr"
      }
    ],
    "mypy/report.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 156,
        "src": "def visit_func_def(self, defn: FuncDef) -> None:",
        "target": "mypy.report.FuncCounterVisitor.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"on_file\" is not using @override but is overriding a method in class \"mypy.report.AbstractReporter\"",
        "offset": 9,
        "src": "def on_file(",
        "target": "mypy.report.LineCountReporter.on_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"on_finish\" is not using @override but is overriding a method in class \"mypy.report.AbstractReporter\"",
        "offset": 36,
        "src": "def on_finish(self) -> None:",
        "target": "mypy.report.LineCountReporter.on_finish"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"on_file\" is not using @override but is overriding a method in class \"mypy.report.AbstractReporter\"",
        "offset": 22,
        "src": "def on_file(",
        "target": "mypy.report.AnyExpressionsReporter.on_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"on_finish\" is not using @override but is overriding a method in class \"mypy.report.AbstractReporter\"",
        "offset": 24,
        "src": "def on_finish(self) -> None:",
        "target": "mypy.report.AnyExpressionsReporter.on_finish"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 112,
        "src": "def visit_func_def(self, defn: FuncDef) -> None:",
        "target": "mypy.report.LineCoverageVisitor.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"on_file\" is not using @override but is overriding a method in class \"mypy.report.AbstractReporter\"",
        "offset": 60,
        "src": "def on_file(",
        "target": "mypy.report.LineCoverageReporter.on_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"on_finish\" is not using @override but is overriding a method in class \"mypy.report.AbstractReporter\"",
        "offset": 20,
        "src": "def on_finish(self) -> None:",
        "target": "mypy.report.LineCoverageReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[Any, Any]\")",
        "offset": 2,
        "src": "json.dump({\"lines\": self.lines_covered}, f)",
        "target": "mypy.report.LineCoverageReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 32,
        "src": "self.schema = etree.XMLSchema(etree.parse(xsd_path))",
        "target": "mypy.report.MemoryXmlReporter.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "self.schema = etree.XMLSchema(etree.parse(xsd_path))",
        "target": "mypy.report.MemoryXmlReporter.__init__"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "self.last_xml: Any | None = None",
        "target": "mypy.report.MemoryXmlReporter.__init__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"on_file\" is not using @override but is overriding a method in class \"mypy.report.AbstractReporter\"",
        "offset": 8,
        "src": "def on_file(",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 26,
        "src": "root = etree.Element(\"mypy-report-file\", name=path, module=tree._fullname)",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "doc = etree.ElementTree(root)",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "doc = etree.ElementTree(root)",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 6,
        "src": "etree.SubElement(",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "root,",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 9,
        "src": "transform_pi = etree.ProcessingInstruction(",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 3,
        "src": "root.addprevious(transform_pi)",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "root.addprevious(transform_pi)",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "self.schema.assertValid(doc)",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "self.schema.assertValid(doc)",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 2,
        "src": "self.last_xml = doc",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"on_finish\" is not using @override but is overriding a method in class \"mypy.report.AbstractReporter\"",
        "offset": 16,
        "src": "def on_finish(self) -> None:",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 5,
        "src": "root = etree.Element(\"mypy-report-index\", name=\"index\")",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "doc = etree.ElementTree(root)",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "doc = etree.ElementTree(root)",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 3,
        "src": "etree.SubElement(",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "root,",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 8,
        "src": "transform_pi = etree.ProcessingInstruction(",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 3,
        "src": "root.addprevious(transform_pi)",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "root.addprevious(transform_pi)",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "self.schema.assertValid(doc)",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "self.schema.assertValid(doc)",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 2,
        "src": "self.last_xml = doc",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 18,
        "src": "self.classes: dict[str, Any] = {}",
        "target": "mypy.report.CoberturaPackage.__init__"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "def as_xml(self) -> Any:",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "package_element = etree.Element(\"package\", complexity=\"1.0\", name=self.name)",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "package_element.attrib[\"branch-rate\"] = \"0\"",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "package_element.attrib[\"line-rate\"] = get_line_rate(self.covered_lines, self.total_lines)",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "classes_element = etree.SubElement(package_element, \"classes\")",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "classes_element = etree.SubElement(package_element, \"classes\")",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "for class_name in sorted(self.classes):",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "classes_element.append(self.classes[class_name])",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "classes_element.append(self.classes[class_name])",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "classes_element.append(self.classes[class_name])",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "self.add_packages(package_element)",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "return package_element",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 2,
        "src": "def add_packages(self, parent_element: Any) -> None:",
        "target": "mypy.report.CoberturaPackage.add_packages"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 2,
        "src": "packages_element = etree.SubElement(parent_element, \"packages\")",
        "target": "mypy.report.CoberturaPackage.add_packages"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "packages_element = etree.SubElement(parent_element, \"packages\")",
        "target": "mypy.report.CoberturaPackage.add_packages"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression type contains \"Any\" (has type \"attrgetter[Any]\")",
        "offset": 1,
        "src": "for package in sorted(self.packages.values(), key=attrgetter(\"name\")):",
        "target": "mypy.report.CoberturaPackage.add_packages"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "packages_element.append(package.as_xml())",
        "target": "mypy.report.CoberturaPackage.add_packages"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "packages_element.append(package.as_xml())",
        "target": "mypy.report.CoberturaPackage.add_packages"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 9,
        "src": "self.root = etree.Element(",
        "target": "mypy.report.CoberturaXmlReporter.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 3,
        "src": "self.doc = etree.ElementTree(self.root)",
        "target": "mypy.report.CoberturaXmlReporter.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "self.doc = etree.ElementTree(self.root)",
        "target": "mypy.report.CoberturaXmlReporter.__init__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"on_file\" is not using @override but is overriding a method in class \"mypy.report.AbstractReporter\"",
        "offset": 3,
        "src": "def on_file(",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 19,
        "src": "class_element = etree.Element(\"class\", complexity=\"1.0\", filename=path, name=class_name)",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "etree.SubElement(class_element, \"methods\")",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "etree.SubElement(class_element, \"methods\")",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "lines_element = etree.SubElement(class_element, \"lines\")",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "lines_element = etree.SubElement(class_element, \"lines\")",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 17,
        "src": "line_element = etree.SubElement(",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "lines_element,",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 8,
        "src": "line_element.attrib[\"condition-coverage\"] = \"50% (1/2)\"",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "class_element.attrib[\"branch-rate\"] = \"0\"",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "class_element.attrib[\"line-rate\"] = get_line_rate(class_lines_covered, class_total_lines)",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 15,
        "src": "current_package.classes[class_name] = class_element",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "current_package.classes[class_name] = class_element",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"on_finish\" is not using @override but is overriding a method in class \"mypy.report.AbstractReporter\"",
        "offset": 2,
        "src": "def on_finish(self) -> None:",
        "target": "mypy.report.CoberturaXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "self.root.attrib[\"line-rate\"] = get_line_rate(",
        "target": "mypy.report.CoberturaXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 3,
        "src": "self.root.attrib[\"branch-rate\"] = \"0\"",
        "target": "mypy.report.CoberturaXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "sources = etree.SubElement(self.root, \"sources\")",
        "target": "mypy.report.CoberturaXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "sources = etree.SubElement(self.root, \"sources\")",
        "target": "mypy.report.CoberturaXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "source_element = etree.SubElement(sources, \"source\")",
        "target": "mypy.report.CoberturaXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "source_element = etree.SubElement(sources, \"source\")",
        "target": "mypy.report.CoberturaXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "source_element.text = os.getcwd()",
        "target": "mypy.report.CoberturaXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "self.root_package.add_packages(self.root)",
        "target": "mypy.report.CoberturaXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 2,
        "src": "self.doc.write(out_path, encoding=\"utf-8\", pretty_print=True)",
        "target": "mypy.report.CoberturaXmlReporter.on_finish"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"on_file\" is not using @override but is overriding a method in class \"mypy.report.AbstractReporter\"",
        "offset": 29,
        "src": "def on_file(",
        "target": "mypy.report.XmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 7,
        "src": "last_xml = self.memory_xml.last_xml",
        "target": "mypy.report.XmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "if last_xml is None:",
        "target": "mypy.report.XmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "last_xml.write(out_path, encoding=\"utf-8\")",
        "target": "mypy.report.XmlReporter.on_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"on_finish\" is not using @override but is overriding a method in class \"mypy.report.AbstractReporter\"",
        "offset": 2,
        "src": "def on_finish(self) -> None:",
        "target": "mypy.report.XmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "last_xml = self.memory_xml.last_xml",
        "target": "mypy.report.XmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "assert last_xml is not None",
        "target": "mypy.report.XmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "last_xml.write(out_path, encoding=\"utf-8\")",
        "target": "mypy.report.XmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 19,
        "src": "self.xslt_html = etree.XSLT(etree.parse(self.memory_xml.xslt_html_path))",
        "target": "mypy.report.XsltHtmlReporter.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "self.xslt_html = etree.XSLT(etree.parse(self.memory_xml.xslt_html_path))",
        "target": "mypy.report.XsltHtmlReporter.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "self.param_html = etree.XSLT.strparam(\"html\")",
        "target": "mypy.report.XsltHtmlReporter.__init__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"on_file\" is not using @override but is overriding a method in class \"mypy.report.AbstractReporter\"",
        "offset": 2,
        "src": "def on_file(",
        "target": "mypy.report.XsltHtmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 7,
        "src": "last_xml = self.memory_xml.last_xml",
        "target": "mypy.report.XsltHtmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "if last_xml is None:",
        "target": "mypy.report.XsltHtmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 7,
        "src": "transformed_html = bytes(self.xslt_html(last_xml, ext=self.param_html))",
        "target": "mypy.report.XsltHtmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "transformed_html = bytes(self.xslt_html(last_xml, ext=self.param_html))",
        "target": "mypy.report.XsltHtmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "transformed_html = bytes(self.xslt_html(last_xml, ext=self.param_html))",
        "target": "mypy.report.XsltHtmlReporter.on_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"on_finish\" is not using @override but is overriding a method in class \"mypy.report.AbstractReporter\"",
        "offset": 4,
        "src": "def on_finish(self) -> None:",
        "target": "mypy.report.XsltHtmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "last_xml = self.memory_xml.last_xml",
        "target": "mypy.report.XsltHtmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "assert last_xml is not None",
        "target": "mypy.report.XsltHtmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 3,
        "src": "transformed_html = bytes(self.xslt_html(last_xml, ext=self.param_html))",
        "target": "mypy.report.XsltHtmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "transformed_html = bytes(self.xslt_html(last_xml, ext=self.param_html))",
        "target": "mypy.report.XsltHtmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "transformed_html = bytes(self.xslt_html(last_xml, ext=self.param_html))",
        "target": "mypy.report.XsltHtmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 19,
        "src": "self.xslt_txt = etree.XSLT(etree.parse(self.memory_xml.xslt_txt_path))",
        "target": "mypy.report.XsltTxtReporter.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "self.xslt_txt = etree.XSLT(etree.parse(self.memory_xml.xslt_txt_path))",
        "target": "mypy.report.XsltTxtReporter.__init__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"on_file\" is not using @override but is overriding a method in class \"mypy.report.AbstractReporter\"",
        "offset": 2,
        "src": "def on_file(",
        "target": "mypy.report.XsltTxtReporter.on_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"on_finish\" is not using @override but is overriding a method in class \"mypy.report.AbstractReporter\"",
        "offset": 9,
        "src": "def on_finish(self) -> None:",
        "target": "mypy.report.XsltTxtReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "last_xml = self.memory_xml.last_xml",
        "target": "mypy.report.XsltTxtReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "assert last_xml is not None",
        "target": "mypy.report.XsltTxtReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 2,
        "src": "transformed_txt = bytes(self.xslt_txt(last_xml))",
        "target": "mypy.report.XsltTxtReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "transformed_txt = bytes(self.xslt_txt(last_xml))",
        "target": "mypy.report.XsltTxtReporter.on_finish"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"on_file\" is not using @override but is overriding a method in class \"mypy.report.AbstractReporter\"",
        "offset": 31,
        "src": "def on_file(",
        "target": "mypy.report.LinePrecisionReporter.on_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"on_finish\" is not using @override but is overriding a method in class \"mypy.report.AbstractReporter\"",
        "offset": 31,
        "src": "def on_finish(self) -> None:",
        "target": "mypy.report.LinePrecisionReporter.on_finish"
      }
    ],
    "mypy/scope.py": [
      {
        "code": "truthy-bool",
        "column": 19,
        "message": "Member \"function\" has type \"FuncBase\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 81,
        "src": "assert self.function",
        "target": "mypy.scope.Scope.function_scope"
      }
    ],
    "mypy/semanal.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"type\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerCoreInterface\"",
        "offset": 475,
        "src": "def type(self) -> TypeInfo | None:",
        "target": "mypy.semanal"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"is_stub_file\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerCoreInterface\"",
        "offset": 4,
        "src": "def is_stub_file(self) -> bool:",
        "target": "mypy.semanal"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"is_typeshed_stub_file\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerInterface\"",
        "offset": 4,
        "src": "def is_typeshed_stub_file(self) -> bool:",
        "target": "mypy.semanal"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"final_iteration\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerCoreInterface\"",
        "offset": 4,
        "src": "def final_iteration(self) -> bool:",
        "target": "mypy.semanal"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 334,
        "src": "def visit_func_def(self, defn: FuncDef) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_func_def"
      },
      {
        "code": "redundant-expr",
        "column": 21,
        "message": "Condition is always true",
        "offset": 66,
        "src": "elif self.options.infer_function_types:",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_func_def"
      },
      {
        "code": "possibly-undefined",
        "column": 41,
        "message": "Name \"original_target\" may be undefined",
        "offset": 68,
        "src": "if defn.info and original_target == defn.arguments[0].variable.name:",
        "target": "mypy.semanal"
      },
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always true",
        "offset": 15,
        "src": "if isinstance(defn, FuncDef):",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_func_def"
      },
      {
        "code": "helpful-string",
        "column": 36,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 60,
        "src": "overlapped = \", \".join([f'\"{name}\"' for name in overlap])",
        "target": "mypy.semanal.SemanticAnalyzer.remove_unpack_kwargs"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded_func_def\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 151,
        "src": "def visit_overloaded_func_def(self, defn: OverloadedFuncDef) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_overloaded_func_def"
      },
      {
        "code": "redundant-expr",
        "column": 17,
        "message": "Condition is always true",
        "offset": 137,
        "src": "elif isinstance(item, FuncDef):",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_overload_sigs_and_impl"
      },
      {
        "code": "redundant-expr",
        "column": 17,
        "message": "Condition is always true",
        "offset": 88,
        "src": "elif isinstance(item, FuncDef):",
        "target": "mypy.semanal.SemanticAnalyzer.process_static_or_class_method_in_overload"
      },
      {
        "code": "redundant-expr",
        "column": 17,
        "message": "Condition is always true",
        "offset": 10,
        "src": "elif isinstance(defn.impl, FuncDef):",
        "target": "mypy.semanal.SemanticAnalyzer.process_static_or_class_method_in_overload"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_decorator\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 217,
        "src": "def visit_decorator(self, dec: Decorator) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_decorator"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 103,
        "src": "def visit_class_def(self, defn: ClassDef) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_class_def"
      },
      {
        "code": "helpful-string",
        "column": 26,
        "message": "The type \"type[mypy.types.ProperType]\" doesn't define a __format__, __str__ or __repr__ method",
        "offset": 113,
        "src": "assert False, f\"Unexpected special alias type: {type(target)}\"",
        "target": "mypy.semanal.SemanticAnalyzer.setup_alias_type_vars"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 219,
        "src": "if not set(all_tvars).issubset(set(declared_tvars)):",
        "target": "mypy.semanal.SemanticAnalyzer.clean_up_bases_and_infer_type_variables"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_and_bind_all_tvars\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerInterface\"",
        "offset": 114,
        "src": "def get_and_bind_all_tvars(self, type_exprs: list[Expression]) -> list[TypeVarLikeType]:",
        "target": "mypy.semanal.SemanticAnalyzer.get_and_bind_all_tvars"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 420,
        "src": "def visit_import(self, i: Import) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_import"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_from\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 42,
        "src": "def visit_import_from(self, imp: ImportFrom) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_import_from"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 162,
        "src": "alternatives = set(module.names.keys()).difference({source_id})",
        "target": "mypy.semanal.SemanticAnalyzer.report_missing_module_attribute"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_all\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 78,
        "src": "def visit_import_all(self, i: ImportAll) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_import_all"
      },
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always false",
        "offset": 11,
        "src": "if node is None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_import_all"
      },
      {
        "code": "unreachable",
        "column": 20,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "continue",
        "target": "mypy.semanal.SemanticAnalyzer.visit_import_all"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 20,
        "src": "def visit_assignment_expr(self, s: AssignmentExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_assignment_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 29,
        "src": "def visit_assignment_stmt(self, s: AssignmentStmt) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_assignment_stmt"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"rvalue\" has type \"Expression\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 376,
        "src": "if s.rvalue:",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_lvalues"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"analyze_simple_literal_type\" is not using @override but is overriding a method in class \"mypy.plugin.SemanticAnalyzerPluginInterface\"",
        "offset": 252,
        "src": "def analyze_simple_literal_type(",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_simple_literal_type"
      },
      {
        "code": "redundant-expr",
        "column": 13,
        "message": "Condition is always true",
        "offset": 24,
        "src": "elif isinstance(value, float):",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_simple_literal_type"
      },
      {
        "code": "possibly-undefined",
        "column": 38,
        "message": "Name \"type_name\" may be undefined",
        "offset": 3,
        "src": "typ = self.named_type_or_none(type_name)",
        "target": "mypy.semanal"
      },
      {
        "code": "helpful-string",
        "column": 20,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 768,
        "src": "f'{message_registry.TYPEVAR_UNEXPECTED_ARGUMENT}: \"{param_name}\"', context",
        "target": "mypy.semanal.SemanticAnalyzer.process_typevar_parameters"
      },
      {
        "code": "truthy-bool",
        "column": 15,
        "message": "\"call\" has type \"CallExpr\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 71,
        "src": "if not call:",
        "target": "mypy.semanal.SemanticAnalyzer.extract_typevarlike_name"
      },
      {
        "code": "helpful-string",
        "column": 26,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 134,
        "src": "self.fail(f'Unexpected keyword argument \"{param_name}\" for \"TypeVarTuple\"', s)",
        "target": "mypy.semanal.SemanticAnalyzer.process_typevartuple_declaration"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"basic_new_typeinfo\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerInterface\"",
        "offset": 31,
        "src": "def basic_new_typeinfo(self, name: str, basetype_or_fallback: Instance, line: int) -> TypeInfo:",
        "target": "mypy.semanal.SemanticAnalyzer.basic_new_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"zip[tuple[Any, ...]]\")",
        "offset": 130,
        "src": "elementwise_assignments = zip(rval.items, *[v.items for v in seq_lvals])",
        "target": "mypy.semanal.SemanticAnalyzer.process_module_assignment"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 1,
        "src": "for rv, *lvs in elementwise_assignments:",
        "target": "mypy.semanal.SemanticAnalyzer.process_module_assignment"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for rv, *lvs in elementwise_assignments:",
        "target": "mypy.semanal.SemanticAnalyzer.process_module_assignment"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "for rv, *lvs in elementwise_assignments:",
        "target": "mypy.semanal.SemanticAnalyzer.process_module_assignment"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"zip[tuple[Any, ...]]\")",
        "offset": 0,
        "src": "for rv, *lvs in elementwise_assignments:",
        "target": "mypy.semanal.SemanticAnalyzer.process_module_assignment"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "self.process_module_assignment(lvs, rv, ctx)",
        "target": "mypy.semanal.SemanticAnalyzer.process_module_assignment"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.process_module_assignment(lvs, rv, ctx)",
        "target": "mypy.semanal.SemanticAnalyzer.process_module_assignment"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_block\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 130,
        "src": "def visit_block(self, b: Block) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_block"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_expression_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 12,
        "src": "def visit_expression_stmt(self, s: ExpressionStmt) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_expression_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_return_stmt(self, s: ReturnStmt) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_return_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raise_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_raise_stmt(self, s: RaiseStmt) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_raise_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_assert_stmt(self, s: AssertStmt) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_assert_stmt"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"expr\" has type \"Expression\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 2,
        "src": "if s.expr:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_assert_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_operator_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_operator_assignment_stmt(self, s: OperatorAssignmentStmt) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_operator_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_while_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 12,
        "src": "def visit_while_stmt(self, s: WhileStmt) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_while_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_for_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 8,
        "src": "def visit_for_stmt(self, s: ForStmt) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_for_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_break_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 25,
        "src": "def visit_break_stmt(self, s: BreakStmt) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_break_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_continue_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_continue_stmt(self, s: ContinueStmt) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_continue_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_if_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_if_stmt(self, s: IfStmt) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_if_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_try_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 8,
        "src": "def visit_try_stmt(self, s: TryStmt) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_try_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_with_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 17,
        "src": "def visit_with_stmt(self, s: WithStmt) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_with_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_del_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 50,
        "src": "def visit_del_stmt(self, s: DelStmt) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_del_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_global_decl\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 14,
        "src": "def visit_global_decl(self, g: GlobalDecl) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_global_decl"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_nonlocal_decl\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_nonlocal_decl(self, d: NonlocalDecl) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_nonlocal_decl"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_match_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 23,
        "src": "def visit_match_stmt(self, s: MatchStmt) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_match_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 15,
        "src": "def visit_name_expr(self, expr: NameExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_super_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 18,
        "src": "def visit_super_expr(self, expr: SuperExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_super_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 8,
        "src": "def visit_tuple_expr(self, expr: TupleExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_list_expr(self, expr: ListExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_list_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_set_expr(self, expr: SetExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_set_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_dict_expr(self, expr: DictExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_dict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_star_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_star_expr(self, expr: StarExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_star_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_from_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_yield_from_expr(self, e: YieldFromExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_yield_from_expr"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"expr\" has type \"Expression\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 14,
        "src": "if e.expr:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_yield_from_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_call_expr(self, expr: CallExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_call_expr"
      },
      {
        "code": "redundant-expr",
        "column": 16,
        "message": "Condition is always false",
        "offset": 42,
        "src": "reveal_type_node",
        "target": "mypy.semanal.SemanticAnalyzer.visit_call_expr"
      },
      {
        "code": "unreachable",
        "column": 20,
        "message": "Right operand of \"and\" is never evaluated",
        "offset": 2,
        "src": "and reveal_type_node.fullname in IMPORTED_REVEAL_TYPE_NAMES",
        "target": "mypy.semanal.SemanticAnalyzer.visit_call_expr"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 2,
        "src": "reveal_imported = True",
        "target": "mypy.semanal.SemanticAnalyzer.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 20,
        "src": "if getattr(n.node, \"is_inferred\", False) and isinstance(n.node, Var)",
        "target": "mypy.semanal.SemanticAnalyzer.visit_call_expr"
      },
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always true",
        "offset": 10,
        "src": "if self.locals is not None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_member_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 104,
        "src": "def visit_member_expr(self, expr: MemberExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_member_expr"
      },
      {
        "code": "truthy-bool",
        "column": 27,
        "message": "\"n\" has type \"SymbolTableNode\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 40,
        "src": "if not n:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_member_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_op_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_op_expr(self, expr: OpExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_op_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_comparison_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 17,
        "src": "def visit_comparison_expr(self, expr: ComparisonExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_comparison_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unary_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_unary_expr(self, expr: UnaryExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_unary_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_index_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_index_expr(self, expr: IndexExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_index_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_slice_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 126,
        "src": "def visit_slice_expr(self, expr: SliceExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_slice_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_cast_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 8,
        "src": "def visit_cast_expr(self, expr: CastExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_cast_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_type_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 9,
        "src": "def visit_assert_type_expr(self, expr: AssertTypeExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_assert_type_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_reveal_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_reveal_expr(self, expr: RevealExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_reveal_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_application\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 9,
        "src": "def visit_type_application(self, expr: TypeApplication) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_type_application"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_list_comprehension(self, expr: ListComprehension) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_list_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_set_comprehension(self, expr: SetComprehension) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_set_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dictionary_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_dictionary_comprehension(self, expr: DictionaryComprehension) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_dictionary_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_generator_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 11,
        "src": "def visit_generator_expr(self, expr: GeneratorExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_generator_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_lambda_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 30,
        "src": "def visit_lambda_expr(self, expr: LambdaExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_lambda_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_conditional_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_conditional_expr(self, expr: ConditionalExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_conditional_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit__promote_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit__promote_expr(self, expr: PromoteExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit__promote_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_yield_expr(self, e: YieldExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_yield_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_await_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 18,
        "src": "def visit_await_expr(self, expr: AwaitExpr) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_await_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_as_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 19,
        "src": "def visit_as_pattern(self, p: AsPattern) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_as_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_or_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_or_pattern(self, p: OrPattern) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_or_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_value_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_value_pattern(self, p: ValuePattern) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_value_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_sequence_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_sequence_pattern(self, p: SequencePattern) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_sequence_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_starred_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_starred_pattern(self, p: StarredPattern) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_starred_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_mapping_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_mapping_pattern(self, p: MappingPattern) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_mapping_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 8,
        "src": "def visit_class_pattern(self, p: ClassPattern) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_class_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"lookup\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerInterface\"",
        "offset": 11,
        "src": "def lookup(",
        "target": "mypy.semanal.SemanticAnalyzer.lookup"
      },
      {
        "code": "possibly-undefined",
        "column": 23,
        "message": "Name \"implicit_node\" may be undefined",
        "offset": 65,
        "src": "return implicit_node",
        "target": "mypy.semanal"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"lookup_qualified\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerCoreInterface\"",
        "offset": 70,
        "src": "def lookup_qualified(",
        "target": "mypy.semanal.SemanticAnalyzer.lookup_qualified"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"lookup_fully_qualified\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerCoreInterface\"",
        "offset": 139,
        "src": "def lookup_fully_qualified(self, fullname: str) -> SymbolTableNode:",
        "target": "mypy.semanal.SemanticAnalyzer.lookup_fully_qualified"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"lookup_fully_qualified_or_none\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerCoreInterface\"",
        "offset": 5,
        "src": "def lookup_fully_qualified_or_none(self, fullname: str) -> SymbolTableNode | None:",
        "target": "mypy.semanal.SemanticAnalyzer.lookup_fully_qualified_or_none"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"named_type\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerInterface\"",
        "offset": 29,
        "src": "def named_type(self, fullname: str, args: list[Type] | None = None) -> Instance:",
        "target": "mypy.semanal.SemanticAnalyzer.named_type"
      },
      {
        "code": "truthy-bool",
        "column": 15,
        "message": "\"sym\" has type \"SymbolTableNode\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 2,
        "src": "assert sym, \"Internal error: attempted to construct unknown type\"",
        "target": "mypy.semanal.SemanticAnalyzer.named_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"named_type_or_none\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerInterface\"",
        "offset": 8,
        "src": "def named_type_or_none(self, fullname: str, args: list[Type] | None = None) -> Instance | None:",
        "target": "mypy.semanal.SemanticAnalyzer.named_type_or_none"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"builtin_type\" is not using @override but is overriding a method in class \"mypy.plugin.SemanticAnalyzerPluginInterface\"",
        "offset": 14,
        "src": "def builtin_type(self, fully_qualified_name: str) -> Instance:",
        "target": "mypy.semanal.SemanticAnalyzer.builtin_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"add_symbol\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerInterface\"",
        "offset": 16,
        "src": "def add_symbol(",
        "target": "mypy.semanal.SemanticAnalyzer.add_symbol"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"add_symbol_skip_local\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerInterface\"",
        "offset": 32,
        "src": "def add_symbol_skip_local(self, name: str, node: SymbolNode) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.add_symbol_skip_local"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"add_symbol_table_node\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerInterface\"",
        "offset": 22,
        "src": "def add_symbol_table_node(",
        "target": "mypy.semanal.SemanticAnalyzer.add_symbol_table_node"
      },
      {
        "code": "no-any-explicit",
        "column": 12,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 106,
        "src": "f = cast(Callable[[object], Any], lambda x: x)",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(object) -> Any\")",
        "offset": 0,
        "src": "f = cast(Callable[[object], Any], lambda x: x)",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(f(symbol_node), (Decorator, FuncBase, Var)):",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 7,
        "src": "existing is not None",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "and isinstance(f(existing.node), (Decorator, FuncBase, Var))",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"True | Any\")",
        "offset": 2,
        "src": "isinstance(f(existing.type), f(AnyType))",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "isinstance(f(existing.type), f(AnyType))",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "isinstance(f(existing.type), f(AnyType))",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "or f(existing.type) == f(symbol_node).type",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "or f(existing.type) == f(symbol_node).type",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "if isinstance(f(symbol_node), (FuncBase, Decorator)):",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "typ = f(symbol_node).type",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"defer\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerCoreInterface\"",
        "offset": 90,
        "src": "def defer(self, debug_context: Context | None = None, force_progress: bool = False) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.defer"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"record_incomplete_ref\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerCoreInterface\"",
        "offset": 36,
        "src": "def record_incomplete_ref(self) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.record_incomplete_ref"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"is_incomplete_namespace\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerCoreInterface\"",
        "offset": 41,
        "src": "def is_incomplete_namespace(self, fullname: str) -> bool:",
        "target": "mypy.semanal.SemanticAnalyzer.is_incomplete_namespace"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"process_placeholder\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerInterface\"",
        "offset": 8,
        "src": "def process_placeholder(",
        "target": "mypy.semanal.SemanticAnalyzer.process_placeholder"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"qualified_name\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerInterface\"",
        "offset": 22,
        "src": "def qualified_name(self, name: str) -> str:",
        "target": "mypy.semanal.SemanticAnalyzer.qualified_name"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"is_func_scope\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerCoreInterface\"",
        "offset": 34,
        "src": "def is_func_scope(self) -> bool:",
        "target": "mypy.semanal.SemanticAnalyzer.is_func_scope"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"current_symbol_table\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerInterface\"",
        "offset": 22,
        "src": "def current_symbol_table(self, escape_comprehensions: bool = False) -> SymbolTable:",
        "target": "mypy.semanal.SemanticAnalyzer.current_symbol_table"
      },
      {
        "code": "possibly-undefined",
        "column": 19,
        "message": "Name \"names\" may be undefined",
        "offset": 22,
        "src": "assert names is not None",
        "target": "mypy.semanal"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"fail\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerCoreInterface\"",
        "offset": 124,
        "src": "def fail(",
        "target": "mypy.semanal.SemanticAnalyzer.fail"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"note\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerCoreInterface\"",
        "offset": 15,
        "src": "def note(self, msg: str, ctx: Context, code: ErrorCode | None = None) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.note"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"incomplete_feature_enabled\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerCoreInterface\"",
        "offset": 5,
        "src": "def incomplete_feature_enabled(self, feature: str, ctx: Context) -> bool:",
        "target": "mypy.semanal.SemanticAnalyzer.incomplete_feature_enabled"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerInterface\"",
        "offset": 10,
        "src": "def accept(self, node: Node) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"anal_type\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerInterface\"",
        "offset": 99,
        "src": "def anal_type(",
        "target": "mypy.semanal.SemanticAnalyzer.anal_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"class_type\" is not using @override but is overriding a method in class \"mypy.plugin.SemanticAnalyzerPluginInterface\"",
        "offset": 66,
        "src": "def class_type(self, self_type: Type) -> Type:",
        "target": "mypy.semanal.SemanticAnalyzer.class_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"schedule_patch\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerInterface\"",
        "offset": 3,
        "src": "def schedule_patch(self, priority: int, patch: Callable[[], None]) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.schedule_patch"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"add_plugin_dependency\" is not using @override but is overriding a method in class \"mypy.plugin.SemanticAnalyzerPluginInterface\"",
        "offset": 14,
        "src": "def add_plugin_dependency(self, trigger: str, target: str | None = None) -> None:",
        "target": "mypy.semanal.SemanticAnalyzer.add_plugin_dependency"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"parse_bool\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerInterface\"",
        "offset": 33,
        "src": "def parse_bool(self, expr: Expression) -> bool | None:",
        "target": "mypy.semanal.SemanticAnalyzer.parse_bool"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"parse_str_literal\" is not using @override but is overriding a method in class \"mypy.plugin.SemanticAnalyzerPluginInterface\"",
        "offset": 4,
        "src": "def parse_str_literal(self, expr: Expression) -> str | None:",
        "target": "mypy.semanal.SemanticAnalyzer.parse_str_literal"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"is_future_flag_set\" is not using @override but is overriding a method in class \"mypy.semanal_shared.SemanticAnalyzerCoreInterface\"",
        "offset": 15,
        "src": "def is_future_flag_set(self, flag: str) -> bool:",
        "target": "mypy.semanal.SemanticAnalyzer.is_future_flag_set"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 117,
        "src": "def visit_any(self, t: AnyType) -> Type:",
        "target": "mypy.semanal.MakeAnyNonExplicit.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 5,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> Type:",
        "target": "mypy.semanal.MakeAnyNonExplicit.visit_type_alias_type"
      }
    ],
    "mypy/semanal_enum.py": [
      {
        "code": "helpful-string",
        "column": 40,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 160,
        "src": "self.fail_enum_call_arg(f'Unexpected keyword argument \"{arg_name}\"', call)",
        "target": "mypy.semanal_enum.EnumCallAnalyzer.parse_enum_call_args"
      },
      {
        "code": "redundant-expr",
        "column": 15,
        "message": "Condition is always false",
        "offset": 23,
        "src": "if is_StrExpr_list(seq_items):",
        "target": "mypy.semanal_enum.EnumCallAnalyzer.parse_enum_call_args"
      },
      {
        "code": "unreachable",
        "column": 31,
        "message": "Intersection of \"list[Expression] & list[StrExpr]\" cannot exist: would have inconsistent method resolution order",
        "offset": 0,
        "src": "if is_StrExpr_list(seq_items):",
        "target": "mypy.semanal_enum.EnumCallAnalyzer.parse_enum_call_args"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "it = cast(List[StrExpr], seq_items)",
        "target": "mypy.semanal_enum.EnumCallAnalyzer.parse_enum_call_args"
      }
    ],
    "mypy/semanal_main.py": [
      {
        "code": "possibly-undefined",
        "column": 4,
        "message": "Name \"state\" may be undefined",
        "offset": 191,
        "src": "state.manager.incomplete_namespaces.update(scc)",
        "target": "mypy.semanal_main"
      }
    ],
    "mypy/semanal_namedtuple.py": [
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always true",
        "offset": 400,
        "src": "if not is_StrExpr_list(listexpr.items):",
        "target": "mypy.semanal_namedtuple.NamedTupleAnalyzer.parse_namedtuple_args"
      },
      {
        "code": "unreachable",
        "column": 39,
        "message": "Intersection of \"list[Expression] & list[StrExpr]\" cannot exist: would have inconsistent method resolution order",
        "offset": 0,
        "src": "if not is_StrExpr_list(listexpr.items):",
        "target": "mypy.semanal_namedtuple.NamedTupleAnalyzer.parse_namedtuple_args"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 3,
        "src": "it = cast(List[StrExpr], listexpr.items)",
        "target": "mypy.semanal_namedtuple.NamedTupleAnalyzer.parse_namedtuple_args"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 108,
        "src": "info.metadata[\"namedtuple\"] = {\"fields\": items.copy()}",
        "target": "mypy.semanal_namedtuple.NamedTupleAnalyzer.build_namedtuple_typeinfo"
      }
    ],
    "mypy/semanal_pass1.py": [
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 59,
        "src": "self.platform = options.platform",
        "target": "mypy.semanal_pass1.SemanticAnalyzerPreAnalysis.visit_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 22,
        "src": "def visit_func_def(self, node: FuncDef) -> None:",
        "target": "mypy.semanal_pass1.SemanticAnalyzerPreAnalysis.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 17,
        "src": "def visit_class_def(self, node: ClassDef) -> None:",
        "target": "mypy.semanal_pass1.SemanticAnalyzerPreAnalysis.visit_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_from\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 6,
        "src": "def visit_import_from(self, node: ImportFrom) -> None:",
        "target": "mypy.semanal_pass1.SemanticAnalyzerPreAnalysis.visit_import_from"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_all\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_import_all(self, node: ImportAll) -> None:",
        "target": "mypy.semanal_pass1.SemanticAnalyzerPreAnalysis.visit_import_all"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_import(self, node: Import) -> None:",
        "target": "mypy.semanal_pass1.SemanticAnalyzerPreAnalysis.visit_import"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_if_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_if_stmt(self, s: IfStmt) -> None:",
        "target": "mypy.semanal_pass1.SemanticAnalyzerPreAnalysis.visit_if_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_block\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 9,
        "src": "def visit_block(self, b: Block) -> None:",
        "target": "mypy.semanal_pass1.SemanticAnalyzerPreAnalysis.visit_block"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_match_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 8,
        "src": "def visit_match_stmt(self, s: MatchStmt) -> None:",
        "target": "mypy.semanal_pass1.SemanticAnalyzerPreAnalysis.visit_match_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 11,
        "src": "def visit_assignment_stmt(self, s: AssignmentStmt) -> None:",
        "target": "mypy.semanal_pass1.SemanticAnalyzerPreAnalysis.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_expression_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 3,
        "src": "def visit_expression_stmt(self, s: ExpressionStmt) -> None:",
        "target": "mypy.semanal_pass1.SemanticAnalyzerPreAnalysis.visit_expression_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 3,
        "src": "def visit_return_stmt(self, s: ReturnStmt) -> None:",
        "target": "mypy.semanal_pass1.SemanticAnalyzerPreAnalysis.visit_return_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_for_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 3,
        "src": "def visit_for_stmt(self, s: ForStmt) -> None:",
        "target": "mypy.semanal_pass1.SemanticAnalyzerPreAnalysis.visit_for_stmt"
      }
    ],
    "mypy/semanal_shared.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_placeholder_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 367,
        "src": "def visit_placeholder_type(self, t: PlaceholderType) -> bool:",
        "target": "mypy.semanal_shared.HasPlaceholders.visit_placeholder_type"
      }
    ],
    "mypy/semanal_typeargs.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_mypy_file\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 63,
        "src": "def visit_mypy_file(self, o: MypyFile) -> None:",
        "target": "mypy.semanal_typeargs.TypeArgumentAnalyzer.visit_mypy_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func\" is not using @override but is overriding a method in class \"mypy.mixedtraverser.MixedTraverserVisitor\"",
        "offset": 5,
        "src": "def visit_func(self, defn: FuncItem) -> None:",
        "target": "mypy.semanal_typeargs.TypeArgumentAnalyzer.visit_func"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.mixedtraverser.MixedTraverserVisitor\"",
        "offset": 6,
        "src": "def visit_class_def(self, defn: ClassDef) -> None:",
        "target": "mypy.semanal_typeargs.TypeArgumentAnalyzer.visit_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_block\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_block(self, o: Block) -> None:",
        "target": "mypy.semanal_typeargs.TypeArgumentAnalyzer.visit_block"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.typetraverser.TypeTraverserVisitor\"",
        "offset": 4,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> None:",
        "target": "mypy.semanal_typeargs.TypeArgumentAnalyzer.visit_type_alias_type"
      },
      {
        "code": "helpful-string",
        "column": 36,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 8,
        "src": "assert t.alias is not None, f\"Unfixed type alias {t.type_ref}\"",
        "target": "mypy.semanal_typeargs.TypeArgumentAnalyzer.visit_type_alias_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.typetraverser.TypeTraverserVisitor\"",
        "offset": 7,
        "src": "def visit_tuple_type(self, t: TupleType) -> None:",
        "target": "mypy.semanal_typeargs.TypeArgumentAnalyzer.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.typetraverser.TypeTraverserVisitor\"",
        "offset": 7,
        "src": "def visit_callable_type(self, t: CallableType) -> None:",
        "target": "mypy.semanal_typeargs.TypeArgumentAnalyzer.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.typetraverser.TypeTraverserVisitor\"",
        "offset": 12,
        "src": "def visit_instance(self, t: Instance) -> None:",
        "target": "mypy.semanal_typeargs.TypeArgumentAnalyzer.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unpack_type\" is not using @override but is overriding a method in class \"mypy.typetraverser.TypeTraverserVisitor\"",
        "offset": 94,
        "src": "def visit_unpack_type(self, typ: UnpackType) -> None:",
        "target": "mypy.semanal_typeargs.TypeArgumentAnalyzer.visit_unpack_type"
      }
    ],
    "mypy/semanal_typeddict.py": [
      {
        "code": "helpful-string",
        "column": 16,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 450,
        "src": "f'Unexpected keyword argument \"{call.arg_names[2]}\" for \"TypedDict\"', call",
        "target": "mypy.semanal_typeddict.TypedDictAnalyzer.parse_typeddict_args"
      }
    ],
    "mypy/server/astdiff.py": [
      {
        "code": "redundant-expr",
        "column": 7,
        "message": "Condition is always false",
        "offset": 235,
        "src": "if isinstance(node, FuncBase):",
        "target": "mypy.server.astdiff.snapshot_definition"
      },
      {
        "code": "unreachable",
        "column": 8,
        "message": "Statement is unreachable",
        "offset": 2,
        "src": "if node.type:",
        "target": "mypy.server.astdiff.snapshot_definition"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 120,
        "src": "def visit_unbound_type(self, typ: UnboundType) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 9,
        "src": "def visit_any(self, typ: AnyType) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_none_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_none_type(self, typ: NoneType) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_none_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_uninhabited_type(self, typ: UninhabitedType) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_erased_type(self, typ: ErasedType) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_deleted_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_deleted_type(self, typ: DeletedType) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_deleted_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_instance(self, typ: Instance) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 8,
        "src": "def visit_type_var(self, typ: TypeVarType) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 13,
        "src": "def visit_param_spec(self, typ: ParamSpecType) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 10,
        "src": "def visit_type_var_tuple(self, typ: TypeVarTupleType) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unpack_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 9,
        "src": "def visit_unpack_type(self, typ: UnpackType) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_unpack_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_parameters\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_parameters(self, typ: Parameters) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_parameters"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 8,
        "src": "def visit_callable_type(self, typ: CallableType) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 32,
        "src": "def visit_tuple_type(self, typ: TupleType) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_typeddict_type(self, typ: TypedDictType) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_literal_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_literal_type(self, typ: LiteralType) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_literal_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_union_type(self, typ: UnionType) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_union_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_intersection_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 7,
        "src": "def visit_intersection_type(self, typ: IntersectionType) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_intersection_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 7,
        "src": "def visit_overloaded(self, typ: Overloaded) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_overloaded"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_partial_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_partial_type(self, typ: PartialType) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_partial_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_type_type(self, typ: TypeType) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_type_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_alias_type(self, typ: TypeAliasType) -> SnapshotItem:",
        "target": "mypy.server.astdiff.SnapshotTypeVisitor.visit_type_alias_type"
      }
    ],
    "mypy/server/astmerge.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_mypy_file\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 209,
        "src": "def visit_mypy_file(self, node: MypyFile) -> None:",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_mypy_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_block\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_block(self, node: Block) -> None:",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_block"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_func_def(self, node: FuncDef) -> None:",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_overloaded_func_def(self, node: OverloadedFuncDef) -> None:",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_overloaded_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_class_def(self, node: ClassDef) -> None:",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 36,
        "src": "def visit_assignment_stmt(self, node: AssignmentStmt) -> None:",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_name_expr(self, node: NameExpr) -> None:",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_member_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 3,
        "src": "def visit_member_expr(self, node: MemberExpr) -> None:",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_member_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_namedtuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 13,
        "src": "def visit_namedtuple_expr(self, node: NamedTupleExpr) -> None:",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_namedtuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_cast_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_cast_expr(self, node: CastExpr) -> None:",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_cast_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_type_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_assert_type_expr(self, node: AssertTypeExpr) -> None:",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_assert_type_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_super_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_super_expr(self, node: SuperExpr) -> None:",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_super_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_call_expr(self, node: CallExpr) -> None:",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_call_expr"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always false",
        "offset": 2,
        "src": "if isinstance(node.analyzed, SymbolNode):",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_call_expr"
      },
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "node.analyzed = self.fixup(node.analyzed)",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_newtype_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 2,
        "src": "def visit_newtype_expr(self, node: NewTypeExpr) -> None:",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_newtype_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_lambda_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 7,
        "src": "def visit_lambda_expr(self, node: LambdaExpr) -> None:",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_lambda_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_typeddict_expr(self, node: TypedDictExpr) -> None:",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_typeddict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_enum_call_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_enum_call_expr(self, node: EnumCallExpr) -> None:",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_enum_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_var\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_var(self, node: Var) -> None:",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_type_alias(self, node: TypeAlias) -> None:",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_type_alias"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 86,
        "src": "def visit_instance(self, typ: Instance) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 7,
        "src": "def visit_type_alias_type(self, typ: TypeAliasType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_type_alias_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_any(self, typ: AnyType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_none_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_none_type(self, typ: NoneType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_none_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_callable_type(self, typ: CallableType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_callable_type"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always true",
        "offset": 8,
        "src": "if typ.fallback is not None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 8,
        "src": "def visit_overloaded(self, t: Overloaded) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_overloaded"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always true",
        "offset": 4,
        "src": "if t.fallback is not None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_overloaded"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_erased_type(self, t: ErasedType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_deleted_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_deleted_type(self, typ: DeletedType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_deleted_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_partial_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_partial_type(self, typ: PartialType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_partial_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_tuple_type(self, typ: TupleType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_tuple_type"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always true",
        "offset": 4,
        "src": "if typ.partial_fallback is not None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_type(self, typ: TypeType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_type_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_var(self, typ: TypeVarType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_param_spec(self, typ: ParamSpecType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_type_var_tuple(self, typ: TypeVarTupleType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unpack_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_unpack_type(self, typ: UnpackType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_unpack_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_parameters\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_parameters(self, typ: Parameters) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_parameters"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_typeddict_type(self, typ: TypedDictType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raw_expression_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 5,
        "src": "def visit_raw_expression_type(self, t: RawExpressionType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_raw_expression_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_literal_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_literal_type(self, typ: LiteralType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_literal_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_unbound_type(self, typ: UnboundType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_list\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 4,
        "src": "def visit_type_list(self, typ: TypeList) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_type_list"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_argument\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 4,
        "src": "def visit_callable_argument(self, typ: CallableArgument) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_callable_argument"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_ellipsis_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_ellipsis_type(self, typ: EllipsisType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_ellipsis_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_uninhabited_type(self, typ: UninhabitedType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_union_type(self, typ: UnionType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_union_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_intersection_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_intersection_type(self, typ: IntersectionType):",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_intersection_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_placeholder_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 4,
        "src": "def visit_placeholder_type(self, t: PlaceholderType) -> None:",
        "target": "mypy.server.astmerge.TypeReplaceVisitor.visit_placeholder_type"
      }
    ],
    "mypy/server/aststrip.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_block\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 120,
        "src": "def visit_block(self, b: Block) -> None:",
        "target": "mypy.server.aststrip.NodeStripVisitor.visit_block"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_class_def(self, node: ClassDef) -> None:",
        "target": "mypy.server.aststrip.NodeStripVisitor.visit_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 32,
        "src": "def visit_func_def(self, node: FuncDef) -> None:",
        "target": "mypy.server.aststrip.NodeStripVisitor.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_decorator\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 15,
        "src": "def visit_decorator(self, node: Decorator) -> None:",
        "target": "mypy.server.aststrip.NodeStripVisitor.visit_decorator"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 12,
        "src": "def visit_overloaded_func_def(self, node: OverloadedFuncDef) -> None:",
        "target": "mypy.server.aststrip.NodeStripVisitor.visit_overloaded_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 9,
        "src": "def visit_assignment_stmt(self, node: AssignmentStmt) -> None:",
        "target": "mypy.server.aststrip.NodeStripVisitor.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_from\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 10,
        "src": "def visit_import_from(self, node: ImportFrom) -> None:",
        "target": "mypy.server.aststrip.NodeStripVisitor.visit_import_from"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_all\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_import_all(self, node: ImportAll) -> None:",
        "target": "mypy.server.aststrip.NodeStripVisitor.visit_import_all"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_for_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 3,
        "src": "def visit_for_stmt(self, node: ForStmt) -> None:",
        "target": "mypy.server.aststrip.NodeStripVisitor.visit_for_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_name_expr(self, node: NameExpr) -> None:",
        "target": "mypy.server.aststrip.NodeStripVisitor.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_member_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 3,
        "src": "def visit_member_expr(self, node: MemberExpr) -> None:",
        "target": "mypy.server.aststrip.NodeStripVisitor.visit_member_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_index_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_index_expr(self, node: IndexExpr) -> None:",
        "target": "mypy.server.aststrip.NodeStripVisitor.visit_index_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_op_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_op_expr(self, node: OpExpr) -> None:",
        "target": "mypy.server.aststrip.NodeStripVisitor.visit_op_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 11,
        "src": "def visit_call_expr(self, node: CallExpr) -> None:",
        "target": "mypy.server.aststrip.NodeStripVisitor.visit_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_super_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_super_expr(self, node: SuperExpr) -> None:",
        "target": "mypy.server.aststrip.NodeStripVisitor.visit_super_expr"
      }
    ],
    "mypy/server/deps.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_mypy_file\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 245,
        "src": "def visit_mypy_file(self, o: MypyFile) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_mypy_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 8,
        "src": "def visit_func_def(self, o: FuncDef) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_decorator\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 24,
        "src": "def visit_decorator(self, o: Decorator) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_decorator"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 24,
        "src": "def visit_class_def(self, o: ClassDef) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_newtype_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 13,
        "src": "def visit_newtype_expr(self, o: NewTypeExpr) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_newtype_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 91,
        "src": "def visit_import(self, o: Import) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_import"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_from\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_import_from(self, o: ImportFrom) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_import_from"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_all\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 11,
        "src": "def visit_import_all(self, o: ImportAll) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_import_all"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_block\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 8,
        "src": "def visit_block(self, o: Block) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_block"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_assignment_stmt(self, o: AssignmentStmt) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_assignment_stmt"
      },
      {
        "code": "redundant-expr",
        "column": 23,
        "message": "Condition is always false",
        "offset": 74,
        "src": "if init and isinstance(init.node, FuncBase):",
        "target": "mypy.server.deps.DependencyVisitor.visit_assignment_stmt"
      },
      {
        "code": "unreachable",
        "column": 24,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "fname = init.node.fullname",
        "target": "mypy.server.deps.DependencyVisitor.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_operator_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 77,
        "src": "def visit_operator_assignment_stmt(self, o: OperatorAssignmentStmt) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_operator_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_for_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 9,
        "src": "def visit_for_stmt(self, o: ForStmt) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_for_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_with_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 25,
        "src": "def visit_with_stmt(self, o: WithStmt) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_with_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_del_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 12,
        "src": "def visit_del_stmt(self, o: DelStmt) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_del_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 21,
        "src": "def visit_name_expr(self, o: NameExpr) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_member_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 11,
        "src": "def visit_member_expr(self, e: MemberExpr) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_member_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_super_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 59,
        "src": "def visit_super_expr(self, e: SuperExpr) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_super_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 14,
        "src": "def visit_call_expr(self, e: CallExpr) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_cast_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 28,
        "src": "def visit_cast_expr(self, e: CastExpr) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_cast_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_type_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_assert_type_expr(self, e: AssertTypeExpr) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_assert_type_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_application\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_type_application(self, e: TypeApplication) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_type_application"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_index_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_index_expr(self, e: IndexExpr) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_index_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unary_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_unary_expr(self, e: UnaryExpr) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_unary_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_op_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 7,
        "src": "def visit_op_expr(self, e: OpExpr) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_op_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_comparison_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_comparison_expr(self, e: ComparisonExpr) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_comparison_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_generator_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 42,
        "src": "def visit_generator_expr(self, e: GeneratorExpr) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_generator_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dictionary_comprehension\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_dictionary_comprehension(self, e: DictionaryComprehension) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_dictionary_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_star_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_star_expr(self, e: StarExpr) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_star_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_from_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_yield_from_expr(self, e: YieldFromExpr) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_yield_from_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_await_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_await_expr(self, e: AwaitExpr) -> None:",
        "target": "mypy.server.deps.DependencyVisitor.visit_await_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 111,
        "src": "def visit_instance(self, typ: Instance) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 12,
        "src": "def visit_type_alias_type(self, typ: TypeAliasType) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_type_alias_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 14,
        "src": "def visit_any(self, typ: AnyType) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_none_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_none_type(self, typ: NoneType) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_none_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_callable_type(self, typ: CallableType) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 9,
        "src": "def visit_overloaded(self, typ: Overloaded) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_overloaded"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_erased_type(self, t: ErasedType) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_deleted_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_deleted_type(self, typ: DeletedType) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_deleted_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_partial_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_partial_type(self, typ: PartialType) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_partial_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_tuple_type(self, typ: TupleType) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 7,
        "src": "def visit_type_type(self, typ: TypeType) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_type_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 9,
        "src": "def visit_type_var(self, typ: TypeVarType) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_type_var"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"upper_bound\" has type \"Type\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 4,
        "src": "if typ.upper_bound:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_type_var"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"default\" has type \"Type\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 2,
        "src": "if typ.default:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_param_spec(self, typ: ParamSpecType) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_param_spec"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"upper_bound\" has type \"Type\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 4,
        "src": "if typ.upper_bound:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_param_spec"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"default\" has type \"Type\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 2,
        "src": "if typ.default:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_type_var_tuple(self, typ: TypeVarTupleType) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_type_var_tuple"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"upper_bound\" has type \"Type\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 4,
        "src": "if typ.upper_bound:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_type_var_tuple"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"default\" has type \"Type\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 2,
        "src": "if typ.default:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unpack_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_unpack_type(self, typ: UnpackType) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_unpack_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_parameters\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_parameters(self, typ: Parameters) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_parameters"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_typeddict_type(self, typ: TypedDictType) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_literal_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 7,
        "src": "def visit_literal_type(self, typ: LiteralType) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_literal_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_unbound_type(self, typ: UnboundType) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_uninhabited_type(self, typ: UninhabitedType) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_union_type(self, typ: UnionType) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_union_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_intersection_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_intersection_type(self, typ: IntersectionType) -> list[str]:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_intersection_type"
      }
    ],
    "mypy/server/mergecheck.py": [
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always false",
        "offset": 31,
        "src": "if fn is None:",
        "target": "mypy.server.mergecheck.check_consistency"
      },
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "continue",
        "target": "mypy.server.mergecheck.check_consistency"
      },
      {
        "code": "helpful-string",
        "column": 26,
        "message": "The string for \"object\" isn't helpful in a user-facing or semantic string",
        "offset": 44,
        "src": "result += f\".{attr}({t}:{obj.name})\"",
        "target": "mypy.server.mergecheck.path_to_str"
      },
      {
        "code": "helpful-string",
        "column": 26,
        "message": "The string for \"object\" isn't helpful in a user-facing or semantic string",
        "offset": 4,
        "src": "result += f\".{attr}\"",
        "target": "mypy.server.mergecheck.path_to_str"
      },
      {
        "code": "helpful-string",
        "column": 26,
        "message": "The string for \"object\" isn't helpful in a user-facing or semantic string",
        "offset": 2,
        "src": "result += f\".{attr}({t})\"",
        "target": "mypy.server.mergecheck.path_to_str"
      }
    ],
    "mypy/server/objgraph.py": [
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 36,
        "src": "return isinstance(getattr(type(o), attr, None), property)",
        "target": "mypy.server.objgraph.isproperty"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "if \"__getattribute__\" in getattr(type(o), \"__dict__\"):  # noqa: B009",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "e = getattr(o, attr)",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 1,
        "src": "if type(e) not in ATOMIC_TYPE_BLACKLIST:",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if type(e) not in ATOMIC_TYPE_BLACKLIST:",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 1,
        "src": "yield attr, e",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "yield attr, e",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(int, Any)\")",
        "offset": 6,
        "src": "for i, e in enumerate(o):",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for i, e in enumerate(o):",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"enumerate[Any]\")",
        "offset": 0,
        "src": "for i, e in enumerate(o):",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"(int, Any)\")",
        "offset": 1,
        "src": "yield i, e",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "yield i, e",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"((object, str), tuple[_Cell, ...] | None | Any (unannotated))\")",
        "offset": 10,
        "src": "yield (s, \"__closure__\"), e.__closure__",
        "target": "mypy.server.objgraph.get_edges"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"tuple[_Cell, ...] | None | Any (unannotated)\")",
        "offset": 0,
        "src": "yield (s, \"__closure__\"), e.__closure__",
        "target": "mypy.server.objgraph.get_edges"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"object | Any (unannotated)\")",
        "offset": 2,
        "src": "se = e.__self__",
        "target": "mypy.server.objgraph.get_edges"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"object | Any (unannotated)\")",
        "offset": 1,
        "src": "if se is not o and se is not type(o) and hasattr(s, \"__self__\"):",
        "target": "mypy.server.objgraph.get_edges"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"object | Any (unannotated)\")",
        "offset": 0,
        "src": "if se is not o and se is not type(o) and hasattr(s, \"__self__\"):",
        "target": "mypy.server.objgraph.get_edges"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any (unannotated)\"",
        "offset": 1,
        "src": "yield s.__self__, se",
        "target": "mypy.server.objgraph.get_edges"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"(Any (unannotated), object | Any (unannotated))\")",
        "offset": 0,
        "src": "yield s.__self__, se",
        "target": "mypy.server.objgraph.get_edges"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"object | Any (unannotated)\")",
        "offset": 0,
        "src": "yield s.__self__, se",
        "target": "mypy.server.objgraph.get_edges"
      }
    ],
    "mypy/server/subexpr.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_int_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 48,
        "src": "def visit_int_expr(self, o: Expression) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_int_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_name_expr(self, o: Expression) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_float_expr(self, o: Expression) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_float_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_str_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_str_expr(self, o: Expression) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_str_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_bytes_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_bytes_expr(self, o: Expression) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_bytes_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_complex_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_complex_expr(self, o: Expression) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_complex_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_ellipsis\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_ellipsis(self, o: Expression) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_ellipsis"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_super_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 3,
        "src": "def visit_super_expr(self, o: Expression) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_super_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_type_var_expr(self, o: Expression) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_type_var_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_type_alias_expr(self, o: Expression) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_type_alias_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_namedtuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_namedtuple_expr(self, o: Expression) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_namedtuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_typeddict_expr(self, o: Expression) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_typeddict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit__promote_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit__promote_expr(self, o: Expression) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit__promote_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_newtype_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_newtype_expr(self, o: Expression) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_newtype_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_member_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 3,
        "src": "def visit_member_expr(self, e: MemberExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_member_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_from_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_yield_from_expr(self, e: YieldFromExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_yield_from_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_yield_expr(self, e: YieldExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_yield_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_call_expr(self, e: CallExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_op_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_op_expr(self, e: OpExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_op_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_comparison_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_comparison_expr(self, e: ComparisonExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_comparison_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_slice_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_slice_expr(self, e: SliceExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_slice_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_cast_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_cast_expr(self, e: CastExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_cast_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_type_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_assert_type_expr(self, e: AssertTypeExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_assert_type_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_reveal_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_reveal_expr(self, e: RevealExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_reveal_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_assignment_expr(self, e: AssignmentExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_assignment_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unary_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_unary_expr(self, e: UnaryExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_unary_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_list_expr(self, e: ListExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_list_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_tuple_expr(self, e: TupleExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dict_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_dict_expr(self, e: DictExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_dict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_set_expr(self, e: SetExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_set_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_index_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_index_expr(self, e: IndexExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_index_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_generator_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_generator_expr(self, e: GeneratorExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_generator_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dictionary_comprehension\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_dictionary_comprehension(self, e: DictionaryComprehension) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_dictionary_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_comprehension\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_list_comprehension(self, e: ListComprehension) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_list_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_comprehension\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_set_comprehension(self, e: SetComprehension) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_set_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_conditional_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_conditional_expr(self, e: ConditionalExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_conditional_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_application\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_type_application(self, e: TypeApplication) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_type_application"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_lambda_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_lambda_expr(self, e: LambdaExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_lambda_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_star_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_star_expr(self, e: StarExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_star_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_await_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_await_expr(self, e: AwaitExpr) -> None:",
        "target": "mypy.server.subexpr.SubexpressionFinder.visit_await_expr"
      }
    ],
    "mypy/server/update.py": [
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 254,
        "src": "\"previous targets with errors: %s\" % sorted(self.previous_targets_with_errors)",
        "target": "mypy.server.update.FineGrainedBuildManager.update"
      }
    ],
    "mypy/solve.py": [
      {
        "code": "possibly-undefined",
        "column": 23,
        "message": "Name \"solvable_tv\" may be undefined",
        "offset": 216,
        "src": "s_batch.remove(solvable_tv)",
        "target": "mypy.solve"
      },
      {
        "code": "truthy-iterable",
        "column": 26,
        "message": "\"lowers\" has type \"Iterable[Type]\" which can always be true in boolean context. Consider using \"Collection[Type]\" instead.",
        "offset": 49,
        "src": "if not uppers and not lowers:",
        "target": "mypy.solve.solve_one"
      },
      {
        "code": "truthy-iterable",
        "column": 26,
        "message": "See https://kotlinisland.github.io/basedmypy/_refs.html#code-truthy-iterable for more info",
        "offset": 0,
        "src": "if not uppers and not lowers:",
        "target": null
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always true",
        "offset": 9,
        "src": "if bottom is None:",
        "target": "mypy.solve.solve_one"
      },
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 3,
        "src": "if type_state.infer_unions:",
        "target": "mypy.solve.solve_one"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always true",
        "offset": 8,
        "src": "if top is None:",
        "target": "mypy.solve.solve_one"
      },
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 3,
        "src": "top = meet_types(top, target, intersect=True)",
        "target": "mypy.solve.solve_one"
      }
    ],
    "mypy/split_namespace.py": [
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 18,
        "src": "self.__dict__[\"_standard_namespace\"] = standard_namespace",
        "target": "mypy.split_namespace.SplitNamespace.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "See https://kotlinisland.github.io/basedmypy/_refs.html#code-no-any-expr for more info",
        "offset": 0,
        "src": "self.__dict__[\"_standard_namespace\"] = standard_namespace",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "self.__dict__[\"_alt_namespace\"] = alt_namespace",
        "target": "mypy.split_namespace.SplitNamespace.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "self.__dict__[\"_alt_prefix\"] = alt_prefix",
        "target": "mypy.split_namespace.SplitNamespace.__init__"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 2,
        "src": "def _get(self) -> tuple[Any, Any]:",
        "target": "mypy.split_namespace.SplitNamespace._get"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "See https://kotlinisland.github.io/basedmypy/_refs.html#code-no-any-explicit for more info",
        "offset": 0,
        "src": "def _get(self) -> tuple[Any, Any]:",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"(Any, Any)\")",
        "offset": 1,
        "src": "return (self._standard_namespace, self._alt_namespace)",
        "target": "mypy.split_namespace.SplitNamespace._get"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return (self._standard_namespace, self._alt_namespace)",
        "target": "mypy.split_namespace.SplitNamespace._get"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return (self._standard_namespace, self._alt_namespace)",
        "target": "mypy.split_namespace.SplitNamespace._get"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 2,
        "src": "def __setattr__(self, name: str, value: Any) -> None:",
        "target": "mypy.split_namespace.SplitNamespace.__setattr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__setattr__\" is not using @override but is overriding a method in class \"argparse.Namespace\"",
        "offset": 0,
        "src": "def __setattr__(self, name: str, value: Any) -> None:",
        "target": "mypy.split_namespace.SplitNamespace.__setattr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "See https://kotlinisland.github.io/basedmypy/_refs.html#code-explicit-override for more info",
        "offset": 0,
        "src": "def __setattr__(self, name: str, value: Any) -> None:",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if name.startswith(self._alt_prefix):",
        "target": "mypy.split_namespace.SplitNamespace.__setattr__"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "setattr(self._alt_namespace, name[len(self._alt_prefix) :], value)",
        "target": "mypy.split_namespace.SplitNamespace.__setattr__"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "setattr(self._alt_namespace, name[len(self._alt_prefix) :], value)",
        "target": "mypy.split_namespace.SplitNamespace.__setattr__"
      },
      {
        "code": "no-any-expr",
        "column": 72,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "setattr(self._alt_namespace, name[len(self._alt_prefix) :], value)",
        "target": "mypy.split_namespace.SplitNamespace.__setattr__"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "setattr(self._standard_namespace, name, value)",
        "target": "mypy.split_namespace.SplitNamespace.__setattr__"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "setattr(self._standard_namespace, name, value)",
        "target": "mypy.split_namespace.SplitNamespace.__setattr__"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 2,
        "src": "def __getattr__(self, name: str) -> Any:",
        "target": "mypy.split_namespace.SplitNamespace.__getattr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__getattr__\" is not using @override but is overriding a method in class \"argparse.Namespace\"",
        "offset": 0,
        "src": "def __getattr__(self, name: str) -> Any:",
        "target": "mypy.split_namespace.SplitNamespace.__getattr__"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if name.startswith(self._alt_prefix):",
        "target": "mypy.split_namespace.SplitNamespace.__getattr__"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return getattr(self._alt_namespace, name[len(self._alt_prefix) :])",
        "target": "mypy.split_namespace.SplitNamespace.__getattr__"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return getattr(self._alt_namespace, name[len(self._alt_prefix) :])",
        "target": "mypy.split_namespace.SplitNamespace.__getattr__"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return getattr(self._alt_namespace, name[len(self._alt_prefix) :])",
        "target": "mypy.split_namespace.SplitNamespace.__getattr__"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "return getattr(self._standard_namespace, name)",
        "target": "mypy.split_namespace.SplitNamespace.__getattr__"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return getattr(self._standard_namespace, name)",
        "target": "mypy.split_namespace.SplitNamespace.__getattr__"
      }
    ],
    "mypy/stats.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_mypy_file\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 116,
        "src": "def visit_mypy_file(self, o: MypyFile) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_mypy_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_from\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_import_from(self, imp: ImportFrom) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_import_from"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_all\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_import_all(self, imp: ImportAll) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_import_all"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 13,
        "src": "def visit_import(self, imp: Import) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_import"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 7,
        "src": "def visit_func_def(self, o: FuncDef) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 38,
        "src": "def visit_class_def(self, o: ClassDef) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_application\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 10,
        "src": "def visit_type_application(self, o: TypeApplication) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_type_application"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 6,
        "src": "def visit_assignment_stmt(self, o: AssignmentStmt) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_expression_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 22,
        "src": "def visit_expression_stmt(self, o: ExpressionStmt) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_expression_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_pass_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_pass_stmt(self, o: PassStmt) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_pass_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_break_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_break_stmt(self, o: BreakStmt) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_break_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_continue_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_continue_stmt(self, o: ContinueStmt) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_continue_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_name_expr(self, o: NameExpr) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_from_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 7,
        "src": "def visit_yield_from_expr(self, o: YieldFromExpr) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_yield_from_expr"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"expr\" has type \"Expression\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 1,
        "src": "if o.expr:",
        "target": "mypy.stats.StatisticsVisitor.visit_yield_from_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 3,
        "src": "def visit_call_expr(self, o: CallExpr) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_member_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 46,
        "src": "def visit_member_expr(self, o: MemberExpr) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_member_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_op_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_op_expr(self, o: OpExpr) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_op_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_comparison_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_comparison_expr(self, o: ComparisonExpr) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_comparison_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_index_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_index_expr(self, o: IndexExpr) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_index_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_assignment_expr(self, o: AssignmentExpr) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_assignment_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unary_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_unary_expr(self, o: UnaryExpr) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_unary_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_str_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_str_expr(self, o: StrExpr) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_str_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_bytes_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_bytes_expr(self, o: BytesExpr) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_bytes_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_int_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_int_expr(self, o: IntExpr) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_int_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_float_expr(self, o: FloatExpr) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_float_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_complex_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_complex_expr(self, o: ComplexExpr) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_complex_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_ellipsis\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_ellipsis(self, o: EllipsisExpr) -> None:",
        "target": "mypy.stats.StatisticsVisitor.visit_ellipsis"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeQuery\"",
        "offset": 123,
        "src": "def visit_any(self, t: AnyType) -> bool:",
        "target": "mypy.stats.HasAnyQuery.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeQuery\"",
        "offset": 9,
        "src": "def visit_callable_type(self, t: CallableType) -> bool:",
        "target": "mypy.stats.HasAnyQuery2.visit_callable_type"
      }
    ],
    "mypy/strconv.py": [
      {
        "code": "helpful-string",
        "column": 19,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 52,
        "src": "return f\"<{self.get_id(o)}>\"",
        "target": "mypy.strconv.StrConv.format_id"
      },
      {
        "code": "helpful-string",
        "column": 19,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 14,
        "src": "tag += f\"<{self.get_id(obj)}>\"",
        "target": "mypy.strconv.StrConv.dump"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 22,
        "src": "a: list[Any] = []",
        "target": "mypy.strconv.StrConv.func_helper"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Args\", args))",
        "target": "mypy.strconv.StrConv.func_helper"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append(o.type)",
        "target": "mypy.strconv.StrConv.func_helper"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append(\"Generator\")",
        "target": "mypy.strconv.StrConv.func_helper"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a.extend(extra)",
        "target": "mypy.strconv.StrConv.func_helper"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a.append(o.body)",
        "target": "mypy.strconv.StrConv.func_helper"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return a",
        "target": "mypy.strconv.StrConv.func_helper"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_mypy_file\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_mypy_file(self, o: mypy.nodes.MypyFile) -> str:",
        "target": "mypy.strconv.StrConv.visit_mypy_file"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 2,
        "src": "a: list[Any] = [o.defs]",
        "target": "mypy.strconv.StrConv.visit_mypy_file"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.insert(0, \"BOM\")",
        "target": "mypy.strconv.StrConv.visit_mypy_file"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 7,
        "src": "a.insert(0, o.path.replace(os.sep, \"/\"))",
        "target": "mypy.strconv.StrConv.visit_mypy_file"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append(\"IgnoredLines(%s)\" % \", \".join(str(line) for line in sorted(o.ignored_lines)))",
        "target": "mypy.strconv.StrConv.visit_mypy_file"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_mypy_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 2,
        "src": "def visit_import(self, o: mypy.nodes.Import) -> str:",
        "target": "mypy.strconv.StrConv.visit_import"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_from\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 9,
        "src": "def visit_import_from(self, o: mypy.nodes.ImportFrom) -> str:",
        "target": "mypy.strconv.StrConv.visit_import_from"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_all\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 9,
        "src": "def visit_import_all(self, o: mypy.nodes.ImportAll) -> str:",
        "target": "mypy.strconv.StrConv.visit_import_all"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_func_def(self, o: mypy.nodes.FuncDef) -> str:",
        "target": "mypy.strconv.StrConv.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded_func_def\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 16,
        "src": "def visit_overloaded_func_def(self, o: mypy.nodes.OverloadedFuncDef) -> str:",
        "target": "mypy.strconv.StrConv.visit_overloaded_func_def"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "a: Any = o.items.copy()",
        "target": "mypy.strconv.StrConv.visit_overloaded_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "a.insert(0, o.type)",
        "target": "mypy.strconv.StrConv.visit_overloaded_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "a.insert(0, o.impl)",
        "target": "mypy.strconv.StrConv.visit_overloaded_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "a.insert(-1, \"Static\")",
        "target": "mypy.strconv.StrConv.visit_overloaded_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "a.insert(-1, \"Class\")",
        "target": "mypy.strconv.StrConv.visit_overloaded_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_overloaded_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 2,
        "src": "def visit_class_def(self, o: mypy.nodes.ClassDef) -> str:",
        "target": "mypy.strconv.StrConv.visit_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_var\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 24,
        "src": "def visit_var(self, o: mypy.nodes.Var) -> str:",
        "target": "mypy.strconv.StrConv.visit_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_global_decl\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 8,
        "src": "def visit_global_decl(self, o: mypy.nodes.GlobalDecl) -> str:",
        "target": "mypy.strconv.StrConv.visit_global_decl"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_nonlocal_decl\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_nonlocal_decl(self, o: mypy.nodes.NonlocalDecl) -> str:",
        "target": "mypy.strconv.StrConv.visit_nonlocal_decl"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_decorator\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_decorator(self, o: mypy.nodes.Decorator) -> str:",
        "target": "mypy.strconv.StrConv.visit_decorator"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_block\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_block(self, o: mypy.nodes.Block) -> str:",
        "target": "mypy.strconv.StrConv.visit_block"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_expression_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_expression_stmt(self, o: mypy.nodes.ExpressionStmt) -> str:",
        "target": "mypy.strconv.StrConv.visit_expression_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_assignment_stmt(self, o: mypy.nodes.AssignmentStmt) -> str:",
        "target": "mypy.strconv.StrConv.visit_assignment_stmt"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "a: list[Any] = []",
        "target": "mypy.strconv.StrConv.visit_assignment_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 5,
        "src": "a.append(o.rvalue)",
        "target": "mypy.strconv.StrConv.visit_assignment_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append(o.type)",
        "target": "mypy.strconv.StrConv.visit_assignment_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_operator_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 2,
        "src": "def visit_operator_assignment_stmt(self, o: mypy.nodes.OperatorAssignmentStmt) -> str:",
        "target": "mypy.strconv.StrConv.visit_operator_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_while_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_while_stmt(self, o: mypy.nodes.WhileStmt) -> str:",
        "target": "mypy.strconv.StrConv.visit_while_stmt"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "a: list[Any] = [o.expr, o.body]",
        "target": "mypy.strconv.StrConv.visit_while_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Else\", o.else_body.body))",
        "target": "mypy.strconv.StrConv.visit_while_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_while_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_for_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 2,
        "src": "def visit_for_stmt(self, o: mypy.nodes.ForStmt) -> str:",
        "target": "mypy.strconv.StrConv.visit_for_stmt"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "a: list[Any] = []",
        "target": "mypy.strconv.StrConv.visit_for_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Async\", \"\"))",
        "target": "mypy.strconv.StrConv.visit_for_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a.append(o.index)",
        "target": "mypy.strconv.StrConv.visit_for_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append(o.index_type)",
        "target": "mypy.strconv.StrConv.visit_for_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a.extend([o.expr, o.body])",
        "target": "mypy.strconv.StrConv.visit_for_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a.extend([o.expr, o.body])",
        "target": "mypy.strconv.StrConv.visit_for_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Else\", o.else_body.body))",
        "target": "mypy.strconv.StrConv.visit_for_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_for_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 2,
        "src": "def visit_return_stmt(self, o: mypy.nodes.ReturnStmt) -> str:",
        "target": "mypy.strconv.StrConv.visit_return_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_if_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_if_stmt(self, o: mypy.nodes.IfStmt) -> str:",
        "target": "mypy.strconv.StrConv.visit_if_stmt"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "a: list[Any] = []",
        "target": "mypy.strconv.StrConv.visit_if_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"If\", [o.expr[i]]))",
        "target": "mypy.strconv.StrConv.visit_if_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a.append((\"Then\", o.body[i].body))",
        "target": "mypy.strconv.StrConv.visit_if_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 3,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_if_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "return self.dump([a, (\"Else\", o.else_body.body)], o)",
        "target": "mypy.strconv.StrConv.visit_if_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_break_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 2,
        "src": "def visit_break_stmt(self, o: mypy.nodes.BreakStmt) -> str:",
        "target": "mypy.strconv.StrConv.visit_break_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_continue_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_continue_stmt(self, o: mypy.nodes.ContinueStmt) -> str:",
        "target": "mypy.strconv.StrConv.visit_continue_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_pass_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_pass_stmt(self, o: mypy.nodes.PassStmt) -> str:",
        "target": "mypy.strconv.StrConv.visit_pass_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raise_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_raise_stmt(self, o: mypy.nodes.RaiseStmt) -> str:",
        "target": "mypy.strconv.StrConv.visit_raise_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_assert_stmt(self, o: mypy.nodes.AssertStmt) -> str:",
        "target": "mypy.strconv.StrConv.visit_assert_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_await_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_await_expr(self, o: mypy.nodes.AwaitExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_await_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_del_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_del_stmt(self, o: mypy.nodes.DelStmt) -> str:",
        "target": "mypy.strconv.StrConv.visit_del_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_try_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_try_stmt(self, o: mypy.nodes.TryStmt) -> str:",
        "target": "mypy.strconv.StrConv.visit_try_stmt"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "a: list[Any] = [o.body]",
        "target": "mypy.strconv.StrConv.visit_try_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append(\"*\")",
        "target": "mypy.strconv.StrConv.visit_try_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 3,
        "src": "a.append(o.types[i])",
        "target": "mypy.strconv.StrConv.visit_try_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append(o.vars[i])",
        "target": "mypy.strconv.StrConv.visit_try_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a.append(o.handlers[i])",
        "target": "mypy.strconv.StrConv.visit_try_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 3,
        "src": "a.append((\"Else\", o.else_body.body))",
        "target": "mypy.strconv.StrConv.visit_try_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Finally\", o.finally_body.body))",
        "target": "mypy.strconv.StrConv.visit_try_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_try_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_with_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 2,
        "src": "def visit_with_stmt(self, o: mypy.nodes.WithStmt) -> str:",
        "target": "mypy.strconv.StrConv.visit_with_stmt"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "a: list[Any] = []",
        "target": "mypy.strconv.StrConv.visit_with_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Async\", \"\"))",
        "target": "mypy.strconv.StrConv.visit_with_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Expr\", [o.expr[i]]))",
        "target": "mypy.strconv.StrConv.visit_with_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Target\", [o.target[i]]))",
        "target": "mypy.strconv.StrConv.visit_with_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append(o.unanalyzed_type)",
        "target": "mypy.strconv.StrConv.visit_with_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a + [o.body], o)",
        "target": "mypy.strconv.StrConv.visit_with_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "return self.dump(a + [o.body], o)",
        "target": "mypy.strconv.StrConv.visit_with_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_match_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 2,
        "src": "def visit_match_stmt(self, o: mypy.nodes.MatchStmt) -> str:",
        "target": "mypy.strconv.StrConv.visit_match_stmt"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "a: list[Any] = [o.subject]",
        "target": "mypy.strconv.StrConv.visit_match_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Pattern\", [o.patterns[i]]))",
        "target": "mypy.strconv.StrConv.visit_match_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Guard\", [o.guards[i]]))",
        "target": "mypy.strconv.StrConv.visit_match_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a.append((\"Body\", o.bodies[i].body))",
        "target": "mypy.strconv.StrConv.visit_match_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_match_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_int_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_int_expr(self, o: mypy.nodes.IntExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_int_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_str_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_str_expr(self, o: mypy.nodes.StrExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_str_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_bytes_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_bytes_expr(self, o: mypy.nodes.BytesExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_bytes_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_float_expr(self, o: mypy.nodes.FloatExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_float_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_complex_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_complex_expr(self, o: mypy.nodes.ComplexExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_complex_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_ellipsis\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_ellipsis(self, o: mypy.nodes.EllipsisExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_ellipsis"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_star_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_star_expr(self, o: mypy.nodes.StarExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_star_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_name_expr(self, o: mypy.nodes.NameExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_name_expr"
      },
      {
        "code": "helpful-string",
        "column": 22,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 5,
        "src": "pretty += f\" = {o.node.final_value}\"",
        "target": "mypy.strconv.StrConv.visit_name_expr"
      },
      {
        "code": "helpful-string",
        "column": 17,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 22,
        "src": "n += f\" [{fullname}{id}]\"",
        "target": "mypy.strconv.StrConv.pretty_name"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_member_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 11,
        "src": "def visit_member_expr(self, o: mypy.nodes.MemberExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_member_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_yield_expr(self, o: mypy.nodes.YieldExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_yield_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_from_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_yield_from_expr(self, o: mypy.nodes.YieldFromExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_yield_from_expr"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"expr\" has type \"Expression\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 1,
        "src": "if o.expr:",
        "target": "mypy.strconv.StrConv.visit_yield_from_expr"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "See https://kotlinisland.github.io/basedmypy/_refs.html#code-truthy-bool for more info",
        "offset": 0,
        "src": "if o.expr:",
        "target": null
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_call_expr(self, o: mypy.nodes.CallExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 4,
        "src": "extra: list[str | tuple[str, list[Any]]] = []",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"list[str | (str, list[Any])]\")",
        "offset": 5,
        "src": "extra.append(\"VarArg\")",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[str | (str, list[Any])]\")",
        "offset": 2,
        "src": "extra.append((\"KwArgs\", [o.arg_names[i], o.args[i]]))",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 0,
        "src": "extra.append((\"KwArgs\", [o.arg_names[i], o.args[i]]))",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "extra.append((\"KwArgs\", [o.arg_names[i], o.args[i]]))",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[str | (str, list[Any])]\")",
        "offset": 2,
        "src": "extra.append((\"DictVarArg\", [o.args[i]]))",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 0,
        "src": "extra.append((\"DictVarArg\", [o.args[i]]))",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "extra.append((\"DictVarArg\", [o.args[i]]))",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "a: list[Any] = [o.callee, (\"Args\", args)]",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a + extra, o)",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"list[str | (str, list[Any])]\")",
        "offset": 0,
        "src": "return self.dump(a + extra, o)",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_op_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 2,
        "src": "def visit_op_expr(self, o: mypy.nodes.OpExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_op_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_comparison_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_comparison_expr(self, o: mypy.nodes.ComparisonExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_comparison_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_cast_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_cast_expr(self, o: mypy.nodes.CastExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_cast_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_type_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_assert_type_expr(self, o: mypy.nodes.AssertTypeExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_assert_type_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_reveal_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_reveal_expr(self, o: mypy.nodes.RevealExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_reveal_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_assignment_expr(self, o: mypy.nodes.AssignmentExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_assignment_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unary_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_unary_expr(self, o: mypy.nodes.UnaryExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_unary_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_list_expr(self, o: mypy.nodes.ListExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_list_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_dict_expr(self, o: mypy.nodes.DictExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_dict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_set_expr(self, o: mypy.nodes.SetExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_set_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_tuple_expr(self, o: mypy.nodes.TupleExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_index_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_index_expr(self, o: mypy.nodes.IndexExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_index_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_super_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_super_expr(self, o: mypy.nodes.SuperExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_super_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_application\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_type_application(self, o: mypy.nodes.TypeApplication) -> str:",
        "target": "mypy.strconv.StrConv.visit_type_application"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_type_var_expr(self, o: mypy.nodes.TypeVarExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "a: list[Any] = []",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [\"Variance(COVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [\"Variance(COVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [\"Variance(CONTRAVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [\"Variance(CONTRAVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [(\"Values\", o.values)]",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [(\"Values\", o.values)]",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [f\"UpperBound({self.stringify_type(o.upper_bound)})\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [f\"UpperBound({self.stringify_type(o.upper_bound)})\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_paramspec_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 2,
        "src": "def visit_paramspec_expr(self, o: mypy.nodes.ParamSpecExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_paramspec_expr"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "a: list[Any] = []",
        "target": "mypy.strconv.StrConv.visit_paramspec_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [\"Variance(COVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_paramspec_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [\"Variance(COVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_paramspec_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [\"Variance(CONTRAVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_paramspec_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [\"Variance(CONTRAVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_paramspec_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [f\"UpperBound({self.stringify_type(o.upper_bound)})\"]",
        "target": "mypy.strconv.StrConv.visit_paramspec_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [f\"UpperBound({self.stringify_type(o.upper_bound)})\"]",
        "target": "mypy.strconv.StrConv.visit_paramspec_expr"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_paramspec_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 2,
        "src": "def visit_type_var_tuple_expr(self, o: mypy.nodes.TypeVarTupleExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_type_var_tuple_expr"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "a: list[Any] = []",
        "target": "mypy.strconv.StrConv.visit_type_var_tuple_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [\"Variance(COVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_tuple_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [\"Variance(COVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_tuple_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [\"Variance(CONTRAVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_tuple_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [\"Variance(CONTRAVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_tuple_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [f\"UpperBound({self.stringify_type(o.upper_bound)})\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_tuple_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [f\"UpperBound({self.stringify_type(o.upper_bound)})\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_tuple_expr"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_type_var_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 2,
        "src": "def visit_type_alias_expr(self, o: mypy.nodes.TypeAliasExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_type_alias_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_namedtuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_namedtuple_expr(self, o: mypy.nodes.NamedTupleExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_namedtuple_expr"
      },
      {
        "code": "helpful-string",
        "column": 15,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 1,
        "src": "return f\"NamedTupleExpr:{o.line}({o.info.name}, {self.stringify_type(o.info.tuple_type) if o.info.tuple_type is not None else None})\"",
        "target": "mypy.strconv.StrConv.visit_namedtuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_enum_call_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 2,
        "src": "def visit_enum_call_expr(self, o: mypy.nodes.EnumCallExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_enum_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_typeddict_expr(self, o: mypy.nodes.TypedDictExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_typeddict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit__promote_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit__promote_expr(self, o: mypy.nodes.PromoteExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit__promote_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_newtype_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_newtype_expr(self, o: mypy.nodes.NewTypeExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_newtype_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_lambda_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_lambda_expr(self, o: mypy.nodes.LambdaExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_lambda_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_generator_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_generator_expr(self, o: mypy.nodes.GeneratorExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_generator_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_list_comprehension(self, o: mypy.nodes.ListComprehension) -> str:",
        "target": "mypy.strconv.StrConv.visit_list_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_set_comprehension(self, o: mypy.nodes.SetComprehension) -> str:",
        "target": "mypy.strconv.StrConv.visit_set_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dictionary_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_dictionary_comprehension(self, o: mypy.nodes.DictionaryComprehension) -> str:",
        "target": "mypy.strconv.StrConv.visit_dictionary_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_conditional_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_conditional_expr(self, o: mypy.nodes.ConditionalExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_conditional_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_slice_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_slice_expr(self, o: mypy.nodes.SliceExpr) -> str:",
        "target": "mypy.strconv.StrConv.visit_slice_expr"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "a: list[Any] = [o.begin_index, o.end_index, o.stride]",
        "target": "mypy.strconv.StrConv.visit_slice_expr"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "if not a[0]:",
        "target": "mypy.strconv.StrConv.visit_slice_expr"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if not a[0]:",
        "target": "mypy.strconv.StrConv.visit_slice_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a[0] = \"<empty>\"",
        "target": "mypy.strconv.StrConv.visit_slice_expr"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "if not a[1]:",
        "target": "mypy.strconv.StrConv.visit_slice_expr"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if not a[1]:",
        "target": "mypy.strconv.StrConv.visit_slice_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a[1] = \"<empty>\"",
        "target": "mypy.strconv.StrConv.visit_slice_expr"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_slice_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_temp_node\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 2,
        "src": "def visit_temp_node(self, o: mypy.nodes.TempNode) -> str:",
        "target": "mypy.strconv.StrConv.visit_temp_node"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_as_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_as_pattern(self, o: mypy.patterns.AsPattern) -> str:",
        "target": "mypy.strconv.StrConv.visit_as_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_or_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_or_pattern(self, o: mypy.patterns.OrPattern) -> str:",
        "target": "mypy.strconv.StrConv.visit_or_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_value_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_value_pattern(self, o: mypy.patterns.ValuePattern) -> str:",
        "target": "mypy.strconv.StrConv.visit_value_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_singleton_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_singleton_pattern(self, o: mypy.patterns.SingletonPattern) -> str:",
        "target": "mypy.strconv.StrConv.visit_singleton_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_sequence_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_sequence_pattern(self, o: mypy.patterns.SequencePattern) -> str:",
        "target": "mypy.strconv.StrConv.visit_sequence_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_starred_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_starred_pattern(self, o: mypy.patterns.StarredPattern) -> str:",
        "target": "mypy.strconv.StrConv.visit_starred_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_mapping_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_mapping_pattern(self, o: mypy.patterns.MappingPattern) -> str:",
        "target": "mypy.strconv.StrConv.visit_mapping_pattern"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "a: list[Any] = []",
        "target": "mypy.strconv.StrConv.visit_mapping_pattern"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Key\", [o.keys[i]]))",
        "target": "mypy.strconv.StrConv.visit_mapping_pattern"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a.append((\"Value\", [o.values[i]]))",
        "target": "mypy.strconv.StrConv.visit_mapping_pattern"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Rest\", [o.rest]))",
        "target": "mypy.strconv.StrConv.visit_mapping_pattern"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_mapping_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 2,
        "src": "def visit_class_pattern(self, o: mypy.patterns.ClassPattern) -> str:",
        "target": "mypy.strconv.StrConv.visit_class_pattern"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "a: list[Any] = [o.class_ref]",
        "target": "mypy.strconv.StrConv.visit_class_pattern"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Positionals\", o.positionals))",
        "target": "mypy.strconv.StrConv.visit_class_pattern"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Keyword\", [o.keyword_keys[i], o.keyword_values[i]]))",
        "target": "mypy.strconv.StrConv.visit_class_pattern"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_class_pattern"
      }
    ],
    "mypy/stubdoc.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 59,
        "src": "def __repr__(self) -> str:",
        "target": "mypy.stubdoc.ArgSig.__repr__"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "def __eq__(self, other: Any) -> bool:",
        "target": "mypy.stubdoc.ArgSig.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 0,
        "src": "def __eq__(self, other: Any) -> bool:",
        "target": "mypy.stubdoc.ArgSig.__eq__"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(other, ArgSig):",
        "target": "mypy.stubdoc.ArgSig.__eq__"
      }
    ],
    "mypy/stubgen.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 237,
        "src": "def __repr__(self) -> str:",
        "target": "mypy.stubgen.StubSource.__repr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 37,
        "src": "def visit_call_expr(self, node: CallExpr) -> str:",
        "target": "mypy.stubgen.AliasPrinter.visit_call_expr"
      },
      {
        "code": "helpful-string",
        "column": 28,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 13,
        "src": "args.append(f\"{name}={arg.accept(self)}\")",
        "target": "mypy.stubgen.AliasPrinter.visit_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_name_expr(self, node: NameExpr) -> str:",
        "target": "mypy.stubgen.AliasPrinter.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_member_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_member_expr(self, o: MemberExpr) -> str:",
        "target": "mypy.stubgen.AliasPrinter.visit_member_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_str_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 11,
        "src": "def visit_str_expr(self, node: StrExpr) -> str:",
        "target": "mypy.stubgen.AliasPrinter.visit_str_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_index_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_index_expr(self, node: IndexExpr) -> str:",
        "target": "mypy.stubgen.AliasPrinter.visit_index_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_tuple_expr(self, node: TupleExpr) -> str:",
        "target": "mypy.stubgen.AliasPrinter.visit_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_list_expr(self, node: ListExpr) -> str:",
        "target": "mypy.stubgen.AliasPrinter.visit_list_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_dict_expr(self, o: DictExpr) -> str:",
        "target": "mypy.stubgen.AliasPrinter.visit_dict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_ellipsis\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 8,
        "src": "def visit_ellipsis(self, node: EllipsisExpr) -> str:",
        "target": "mypy.stubgen.AliasPrinter.visit_ellipsis"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_op_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_op_expr(self, o: OpExpr) -> str:",
        "target": "mypy.stubgen.AliasPrinter.visit_op_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 19,
        "src": "def visit_class_def(self, o: ClassDef) -> None:",
        "target": "mypy.stubgen.DefinitionFinder.visit_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_func_def(self, o: FuncDef) -> None:",
        "target": "mypy.stubgen.DefinitionFinder.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_block\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 24,
        "src": "def visit_block(self, block: Block) -> None:",
        "target": "mypy.stubgen.ReferenceFinder.visit_block"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_name_expr(self, e: NameExpr) -> None:",
        "target": "mypy.stubgen.ReferenceFinder.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.typetraverser.TypeTraverserVisitor\"",
        "offset": 3,
        "src": "def visit_instance(self, t: Instance) -> None:",
        "target": "mypy.stubgen.ReferenceFinder.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.typetraverser.TypeTraverserVisitor\"",
        "offset": 4,
        "src": "def visit_unbound_type(self, t: UnboundType) -> None:",
        "target": "mypy.stubgen.ReferenceFinder.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.typetraverser.TypeTraverserVisitor\"",
        "offset": 4,
        "src": "def visit_tuple_type(self, t: TupleType) -> None:",
        "target": "mypy.stubgen.ReferenceFinder.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.typetraverser.TypeTraverserVisitor\"",
        "offset": 5,
        "src": "def visit_callable_type(self, t: CallableType) -> None:",
        "target": "mypy.stubgen.ReferenceFinder.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_mypy_file\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 38,
        "src": "def visit_mypy_file(self, o: MypyFile) -> None:",
        "target": "mypy.stubgen.ASTStubGenerator.visit_mypy_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 8,
        "src": "def visit_overloaded_func_def(self, o: OverloadedFuncDef) -> None:",
        "target": "mypy.stubgen.ASTStubGenerator.visit_overloaded_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 137,
        "src": "def visit_func_def(self, o: FuncDef) -> None:",
        "target": "mypy.stubgen.ASTStubGenerator.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_decorator\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 56,
        "src": "def visit_decorator(self, o: Decorator) -> None:",
        "target": "mypy.stubgen.ASTStubGenerator.visit_decorator"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 73,
        "src": "def visit_class_def(self, o: ClassDef) -> None:",
        "target": "mypy.stubgen.ASTStubGenerator.visit_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_block\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 104,
        "src": "def visit_block(self, o: Block) -> None:",
        "target": "mypy.stubgen.ASTStubGenerator.visit_block"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 6,
        "src": "def visit_assignment_stmt(self, o: AssignmentStmt) -> None:",
        "target": "mypy.stubgen.ASTStubGenerator.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_if_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 238,
        "src": "def visit_if_stmt(self, o: IfStmt) -> None:",
        "target": "mypy.stubgen.ASTStubGenerator.visit_if_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_all\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 13,
        "src": "def visit_import_all(self, o: ImportAll) -> None:",
        "target": "mypy.stubgen.ASTStubGenerator.visit_import_all"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_from\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 3,
        "src": "def visit_import_from(self, o: ImportFrom) -> None:",
        "target": "mypy.stubgen.ASTStubGenerator.visit_import_from"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 37,
        "src": "def visit_import(self, o: Import) -> None:",
        "target": "mypy.stubgen.ASTStubGenerator.visit_import"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"should_reexport\" is not using @override but is overriding a method in class \"mypy.stubutil.BaseStubGenerator\"",
        "offset": 202,
        "src": "def should_reexport(self, name: str, full_module: str, name_is_alias: bool) -> bool:",
        "target": "mypy.stubgen.ASTStubGenerator.should_reexport"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 34,
        "src": "def visit_assignment_stmt(self, o: AssignmentStmt) -> None:",
        "target": "mypy.stubgen.SelfTraverser.visit_assignment_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 467,
        "src": "default=[],",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 9,
        "src": "default=[],",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 15,
        "src": "if ns.modules + ns.packages and ns.files:",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if ns.modules + ns.packages and ns.files:",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if ns.modules + ns.packages and ns.files:",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if ns.quiet and ns.verbose:",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if ns.quiet and ns.verbose:",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if ns.inspect and ns.parse_only:",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if ns.inspect and ns.parse_only:",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "if not os.path.exists(ns.output_dir):",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "os.makedirs(ns.output_dir)",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "no_import=ns.no_import,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "inspect=ns.inspect,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "doc_dir=ns.doc_dir,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "search_path=ns.search_path.split(\":\"),",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "ignore_errors=ns.ignore_errors,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "parse_only=ns.parse_only,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "include_private=ns.include_private,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "output_dir=ns.output_dir,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "modules=ns.modules,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "packages=ns.packages,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "files=ns.files,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "verbose=ns.verbose,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "quiet=ns.quiet,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "export_less=ns.export_less,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "include_docstrings=ns.include_docstrings,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "legacy=ns.legacy,",
        "target": "mypy.stubgen.parse_options"
      }
    ],
    "mypy/stubgenc.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_function_sig\" is not using @override but is overriding a method in class \"mypy.stubutil.SignatureGenerator\"",
        "offset": 66,
        "src": "def get_function_sig(",
        "target": "mypy.stubgenc.ExternalSignatureGenerator.get_function_sig"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_property_type\" is not using @override but is overriding a method in class \"mypy.stubutil.SignatureGenerator\"",
        "offset": 34,
        "src": "def get_property_type(self, default_type: str | None, ctx: FunctionContext) -> str | None:",
        "target": "mypy.stubgenc.ExternalSignatureGenerator.get_property_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_function_sig\" is not using @override but is overriding a method in class \"mypy.stubutil.SignatureGenerator\"",
        "offset": 5,
        "src": "def get_function_sig(",
        "target": "mypy.stubgenc.DocstringSignatureGenerator.get_function_sig"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_property_type\" is not using @override but is overriding a method in class \"mypy.stubutil.SignatureGenerator\"",
        "offset": 20,
        "src": "def get_property_type(self, default_type: str | None, ctx: FunctionContext) -> str | None:",
        "target": "mypy.stubgenc.DocstringSignatureGenerator.get_property_type"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"FullArgSpec\")",
        "offset": 144,
        "src": "argspec = inspect.getfullargspec(func)",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"FullArgSpec | None\")",
        "offset": 4,
        "src": "if argspec is None:",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"FullArgSpec\")",
        "offset": 17,
        "src": "args = argspec.args",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"FullArgSpec\")",
        "offset": 1,
        "src": "defaults = argspec.defaults",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...] | None\")",
        "offset": 0,
        "src": "defaults = argspec.defaults",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"FullArgSpec\")",
        "offset": 1,
        "src": "varargs = argspec.varargs",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"FullArgSpec\")",
        "offset": 1,
        "src": "kwargs = argspec.varkw",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"FullArgSpec\")",
        "offset": 1,
        "src": "annotations = argspec.annotations",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "annotations = argspec.annotations",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 3,
        "src": "if key not in annotations:",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "argtype = annotations[key]",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "argtype = annotations[key]",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if argtype is None:",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if not isinstance(argtype, str):",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return self.get_type_fullname(argtype)",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...] | None\")",
        "offset": 7,
        "src": "if defaults and i >= len(args) - len(defaults):",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...] | None | bool\")",
        "offset": 0,
        "src": "if defaults and i >= len(args) - len(defaults):",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "if defaults and i >= len(args) - len(defaults):",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 1,
        "src": "default_value = defaults[i - (len(args) - len(defaults))]",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "default_value = defaults[i - (len(args) - len(defaults))]",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "default_value = defaults[i - (len(args) - len(defaults))]",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "if arg in annotations:",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "argtype = annotations[arg]",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "argtype = annotations[arg]",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "argtype = self.get_type_annotation(default_value)",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if argtype == \"None\":",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "arglist.append(ArgSig(arg, argtype, default=True))",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_default_function_sig"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_sig_generators\" is not using @override but is overriding a method in class \"mypy.stubutil.BaseStubGenerator\"",
        "offset": 25,
        "src": "def get_sig_generators(self) -> list[SignatureGenerator]:",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_sig_generators"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 26,
        "src": "return getattr(obj, \"__module__\", None)",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_obj_module"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 8,
        "src": "all_items = self.get_members(self.module)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 2,
        "src": "all_items = sorted(all_items, key=lambda x: x[0])",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"def (x: (str, Any)) -> str\")",
        "offset": 0,
        "src": "all_items = sorted(all_items, key=lambda x: x[0])",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 0,
        "src": "all_items = sorted(all_items, key=lambda x: x[0])",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 2,
        "src": "for name, obj in all_items:",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for name, obj in all_items:",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 0,
        "src": "for name, obj in all_items:",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if inspect.ismodule(obj) and obj.__name__ in self.known_modules:",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 12,
        "src": "elif self.is_defined_in_module(obj) and not inspect.ismodule(obj):",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 73,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "elif self.is_defined_in_module(obj) and not inspect.ismodule(obj):",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 2,
        "src": "items.append((name, obj))",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 0,
        "src": "items.append((name, obj))",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "items.append((name, obj))",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "obj_module_name = self.get_obj_module(obj)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 6,
        "src": "self.set_defined_names(set([name for name, obj in all_items if not inspect.ismodule(obj)]))",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.set_defined_names(set([name for name, obj in all_items if not inspect.ismodule(obj)]))",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 0,
        "src": "self.set_defined_names(set([name for name, obj in all_items if not inspect.ismodule(obj)]))",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 92,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.set_defined_names(set([name for name, obj in all_items if not inspect.ismodule(obj)]))",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 10,
        "src": "for name, obj in items:",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for name, obj in items:",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 0,
        "src": "for name, obj in items:",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if self.is_function(obj):",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "self.generate_function_stub(name, obj, output=functions)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "elif inspect.isclass(obj):",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 1,
        "src": "self.generate_class_stub(name, obj, output=types)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "self.generate_variable_stub(name, obj, output=variables)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_module"
      },
      {
        "code": "possibly-undefined",
        "column": 37,
        "message": "Name \"output\" may be undefined",
        "offset": 16,
        "src": "for i, line in enumerate(output):",
        "target": "mypy.stubgenc"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 36,
        "src": "def get_members(self, obj: object) -> list[tuple[str, Any]]:",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_members"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "obj_dict: Mapping[str, Any] = getattr(obj, \"__dict__\")  # noqa: B009",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_members"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"Mapping[str, Any]\")",
        "offset": 2,
        "src": "for name in obj_dict:",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_members"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "value = getattr(obj, name)",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_members"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 4,
        "src": "results.append((name, value))",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_members"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 0,
        "src": "results.append((name, value))",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_members"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "results.append((name, value))",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_members"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 1,
        "src": "return results",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_members"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 10,
        "src": "return \"type[{}]\".format(self.get_type_fullname(obj))",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_type_annotation"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 39,
        "src": "inspect.getattr_static(class_info.cls, name), staticmethod",
        "target": "mypy.stubgenc.InspectionStubGenerator.is_staticmethod"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 5,
        "src": "return getattr(obj, \"__abstractmethod__\", False)",
        "target": "mypy.stubgenc.InspectionStubGenerator.is_abstract_method"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 7,
        "src": "def is_property_readonly(prop: Any) -> bool:",
        "target": "mypy.stubgenc.InspectionStubGenerator.is_property_readonly"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(prop: Any) -> bool\")",
        "offset": 0,
        "src": "def is_property_readonly(prop: Any) -> bool:",
        "target": "mypy.stubgenc"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return hasattr(prop, \"fset\") and prop.fset is None",
        "target": "mypy.stubgenc.InspectionStubGenerator.is_property_readonly"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return hasattr(prop, \"fset\") and prop.fset is None",
        "target": "mypy.stubgenc.InspectionStubGenerator.is_property_readonly"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 28,
        "src": "docstring: Any = getattr(obj, \"__doc__\", None)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_function_stub"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "docstring: Any = getattr(obj, \"__doc__\", None)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_function_stub"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if not isinstance(docstring, str):",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_function_stub"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "docstring=docstring,",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_function_stub"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 30,
        "src": "if docstring:",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_function_stub"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "docstring = self._indent_docstring(docstring)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_function_stub"
      },
      {
        "code": "no-any-expr",
        "column": 86,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "output.extend(self.format_func_def(inferred, decorators=decorators, docstring=docstring))",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_function_stub"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"MappingProxyType[str, Any]\")",
        "offset": 31,
        "src": "and \"__iter__\" not in ctx.class_info.cls.__dict__",
        "target": "mypy.stubgenc.InspectionStubGenerator._fix_iter"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 32,
        "src": "docstring = getattr(raw_obj, \"__doc__\", None)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_property_stub"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "fget = getattr(raw_obj, \"fget\", None)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_property_stub"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "if fget:",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_property_stub"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "alt_docstr = getattr(fget, \"__doc__\", None)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_property_stub"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "alt_docstr = getattr(fget, \"__doc__\", None)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_property_stub"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "if alt_docstr and docstring:",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_property_stub"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "if alt_docstr and docstring:",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_property_stub"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "docstring += \"\\n\" + alt_docstr",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_property_stub"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "docstring += \"\\n\" + alt_docstr",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_property_stub"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "docstring += \"\\n\" + alt_docstr",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_property_stub"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "elif alt_docstr:",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_property_stub"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "docstring = alt_docstr",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_property_stub"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 3,
        "src": "self.module_name, name, docstring=docstring, is_abstract=False, class_info=class_info",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_property_stub"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 44,
        "src": "typename = getattr(typ, \"__qualname__\", typ.__name__)",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_type_fullname"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 4,
        "src": "typename = f\"{module_name}.{typename}\"",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_type_fullname"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 1,
        "src": "return typename",
        "target": "mypy.stubgenc.InspectionStubGenerator.get_type_fullname"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 26,
        "src": "raw_lookup = getattr(cls, \"__dict__\")  # noqa: B009",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 1,
        "src": "items = self.get_members(cls)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 2,
        "src": "items = sorted(items, key=lambda x: method_name_sort_key(x[0]))",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"def (x: (str, Any)) -> (int, str)\")",
        "offset": 0,
        "src": "items = sorted(items, key=lambda x: method_name_sort_key(x[0]))",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 69,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 0,
        "src": "items = sorted(items, key=lambda x: method_name_sort_key(x[0]))",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 1,
        "src": "names = set(x[0] for x in items)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 0,
        "src": "names = set(x[0] for x in items)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 0,
        "src": "names = set(x[0] for x in items)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 6,
        "src": "attrs: list[tuple[str, Any]] = []",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 5,
        "src": "class_info = ClassInfo(class_name, \"\", getattr(cls, \"__doc__\", None), cls)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 2,
        "src": "for attr, value in items:",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for attr, value in items:",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 0,
        "src": "for attr, value in items:",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "raw_value = raw_lookup.get(attr, value)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "raw_value = raw_lookup.get(attr, value)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if self.is_method(class_info, attr, value) or self.is_classmethod(",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "class_info, attr, value",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression has type \"Any\"",
        "offset": 11,
        "src": "if self.is_classmethod(class_info, attr, value):",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "self.generate_function_stub(attr, value, output=methods, class_info=class_info)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "elif self.is_property(class_info, attr, raw_value):",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "raw_value,",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "value,",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "elif inspect.isclass(value) and self.is_defined_in_module(value):",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 70,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 0,
        "src": "elif inspect.isclass(value) and self.is_defined_in_module(value):",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 1,
        "src": "self.generate_class_stub(attr, value, types)",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 2,
        "src": "attrs.append((attr, value))",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 0,
        "src": "attrs.append((attr, value))",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "attrs.append((attr, value))",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 2,
        "src": "for attr, value in attrs:",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for attr, value in attrs:",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 0,
        "src": "for attr, value in attrs:",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if attr == \"__hash__\" and value is None:",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      },
      {
        "code": "no-any-expr",
        "column": 75,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "prop_type_name = self.strip_or_import(self.get_type_annotation(value))",
        "target": "mypy.stubgenc.InspectionStubGenerator.generate_class_stub"
      }
    ],
    "mypy/stubtest.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 49,
        "src": "def __repr__(self) -> str:",
        "target": "mypy.stubtest.Missing.__repr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 13,
        "src": "def __repr__(self) -> str:",
        "target": "mypy.stubtest.Unrepresentable.__repr__"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 10,
        "src": "def _style(message: str, **kwargs: Any) -> str:",
        "target": "mypy.stubtest._style"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "kwargs.setdefault(\"color\", \"none\")",
        "target": "mypy.stubtest._style"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return _formatter.style(message, **kwargs)",
        "target": "mypy.stubtest._style"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 14,
        "src": "def __init__(",
        "target": "mypy.stubtest.Error.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 25,
        "src": "self.runtime_object = runtime_object",
        "target": "mypy.stubtest.Error.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 4,
        "src": "runtime_sig = safe_inspect_signature(runtime_object)",
        "target": "mypy.stubtest.Error.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 2,
        "src": "self.runtime_desc = _truncate(repr(runtime_object), 100)",
        "target": "mypy.stubtest.Error.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 63,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 2,
        "src": "runtime_is_async = inspect.iscoroutinefunction(runtime_object)",
        "target": "mypy.stubtest.Error.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 40,
        "src": "if not isinstance(self.runtime_object, Missing):",
        "target": "mypy.stubtest.Error.get_description"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "runtime_line = inspect.getsourcelines(self.runtime_object)[1]",
        "target": "mypy.stubtest.Error.get_description"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "runtime_file = inspect.getsourcefile(self.runtime_object)",
        "target": "mypy.stubtest.Error.get_description"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 81,
        "src": "bottom_module = bottom_frame.f_globals.get(\"__name__\", \"\")",
        "target": "mypy.stubtest.test_module"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "bottom_module = bottom_frame.f_globals.get(\"__name__\", \"\")",
        "target": "mypy.stubtest.test_module"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if bottom_module == \"__main__\" or bottom_module.split(\".\")[0] == \"mypy\":",
        "target": "mypy.stubtest.test_module"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if bottom_module == \"__main__\" or bottom_module.split(\".\")[0] == \"mypy\":",
        "target": "mypy.stubtest.test_module"
      },
      {
        "code": "helpful-string",
        "column": 16,
        "message": "The type \"<Deleted 'e'>\" doesn't define a __format__, __str__ or __repr__ method",
        "offset": 4,
        "src": "f\"encountered unexpected error, {type(e).__name__}: {e}\",",
        "target": "mypy.stubtest.test_module"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"def [_T] (func: (...) -> _T) -> _SingleDispatchCallable[_T]\")",
        "offset": 13,
        "src": "@singledispatch",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@singledispatch",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify(",
        "target": "mypy.stubtest.verify"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"_SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]\")",
        "offset": 0,
        "src": "def verify(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 11,
        "src": "yield Error(object_path, \"is an unknown mypy node\", stub, runtime)",
        "target": "mypy.stubtest.verify"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]\")",
        "offset": 64,
        "src": "@verify.register(nodes.MypyFile)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[MypyFile, _SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(nodes.MypyFile)",
        "target": "mypy.stubtest"
      },
      {
        "code": "redundant-expr",
        "column": 7,
        "message": "Condition is always false",
        "offset": 7,
        "src": "if not isinstance(runtime, types.ModuleType):",
        "target": "mypy.stubtest.verify_mypyfile"
      },
      {
        "code": "unreachable",
        "column": 8,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "yield Error(object_path, \"is not a module\", stub, runtime)",
        "target": "mypy.stubtest.verify_mypyfile"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "runtime_all_as_set = set(runtime.__all__)",
        "target": "mypy.stubtest.verify_mypyfile"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 19,
        "src": "obj = getattr(r, attr)",
        "target": "mypy.stubtest.verify_mypyfile"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(obj, types.ModuleType):",
        "target": "mypy.stubtest.verify_mypyfile"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if callable(obj):",
        "target": "mypy.stubtest.verify_mypyfile"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "obj_mod = obj.__module__",
        "target": "mypy.stubtest.verify_mypyfile"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "if isinstance(obj_mod, str):",
        "target": "mypy.stubtest.verify_mypyfile"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 30,
        "src": "runtime_entry = getattr(runtime, entry, MISSING)",
        "target": "mypy.stubtest.verify_mypyfile"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 5,
        "src": "yield from verify(stub_entry, runtime_entry, object_path + [entry])",
        "target": "mypy.stubtest.verify_mypyfile"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def _verify_final(",
        "target": "mypy.stubtest._verify_final"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 10,
        "src": "if not stub.is_final and not issubclass(runtime, enum.Enum):",
        "target": "mypy.stubtest._verify_final"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 5,
        "src": "runtime,",
        "target": "mypy.stubtest._verify_final"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 10,
        "src": "runtime_final = getattr(runtime, \"__final__\", False)",
        "target": "mypy.stubtest._verify_final"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 0,
        "src": "runtime_final = getattr(runtime, \"__final__\", False)",
        "target": "mypy.stubtest._verify_final"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 4,
        "src": "if runtime_final and not stub.is_final:",
        "target": "mypy.stubtest._verify_final"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 5,
        "src": "runtime,",
        "target": "mypy.stubtest._verify_final"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "def _verify_metaclass(",
        "target": "mypy.stubtest._verify_metaclass"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"type[type[Any]]\")",
        "offset": 7,
        "src": "runtime_metaclass = type(runtime)",
        "target": "mypy.stubtest._verify_metaclass"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 0,
        "src": "runtime_metaclass = type(runtime)",
        "target": "mypy.stubtest._verify_metaclass"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"type[type[Any]]\")",
        "offset": 1,
        "src": "if runtime_metaclass is not type and stub.metaclass_type is None:",
        "target": "mypy.stubtest._verify_metaclass"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 6,
        "src": "runtime,",
        "target": "mypy.stubtest._verify_metaclass"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"type[type[Any]]\")",
        "offset": 2,
        "src": "runtime_desc=f\"{runtime_metaclass}\",",
        "target": "mypy.stubtest._verify_metaclass"
      },
      {
        "code": "helpful-string",
        "column": 29,
        "message": "The type \"type[type[Any]]\" doesn't define a __format__, __str__ or __repr__ method",
        "offset": 0,
        "src": "runtime_desc=f\"{runtime_metaclass}\",",
        "target": "mypy.stubtest._verify_metaclass"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"type[type[Any]]\")",
        "offset": 3,
        "src": "runtime_metaclass is type",
        "target": "mypy.stubtest._verify_metaclass"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 13,
        "src": "runtime,",
        "target": "mypy.stubtest._verify_metaclass"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]\")",
        "offset": 6,
        "src": "@verify.register(nodes.TypeInfo)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[TypeInfo, _SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(nodes.TypeInfo)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"def (stub: TypeInfo, runtime: type[Any] | Missing, object_path: list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@verify.register(nodes.TypeInfo)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify_typeinfo(",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"def (stub: TypeInfo, runtime: type[Any] | Missing, object_path: list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "def verify_typeinfo(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"type[Any] | Missing\")",
        "offset": 6,
        "src": "if not isinstance(runtime, Missing):",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 5,
        "src": "runtime,",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"type[Any] | Missing\")",
        "offset": 5,
        "src": "if isinstance(runtime, Missing):",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "redundant-expr",
        "column": 7,
        "message": "Condition is always false",
        "offset": 3,
        "src": "if not isinstance(runtime, type):",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 0,
        "src": "if not isinstance(runtime, type):",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "unreachable",
        "column": 8,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "yield Error(object_path, \"is not a type\", stub, runtime, stub_desc=repr(stub))",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 3,
        "src": "yield from _verify_final(stub, runtime, object_path)",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 76,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 1,
        "src": "is_runtime_typeddict = stub.typeddict_type is not None and is_typeddict(runtime)",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 2,
        "src": "stub, runtime, object_path, is_runtime_typeddict=is_runtime_typeddict",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 10,
        "src": "to_check.update(",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "m for m in vars(runtime) if not is_probably_private(m) and m not in IGNORABLE_CLASS_DUNDERS",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "m for m in vars(runtime) if not is_probably_private(m) and m not in IGNORABLE_CLASS_DUNDERS",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 0,
        "src": "m for m in vars(runtime) if not is_probably_private(m) and m not in IGNORABLE_CLASS_DUNDERS",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "m for m in vars(runtime) if not is_probably_private(m) and m not in IGNORABLE_CLASS_DUNDERS",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "m for m in vars(runtime) if not is_probably_private(m) and m not in IGNORABLE_CLASS_DUNDERS",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 21,
        "src": "runtime_attr = getattr(runtime, mangled_entry)",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 0,
        "src": "runtime_attr = getattr(runtime, mangled_entry)",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "runtime_attr = inspect.getattr_static(runtime, mangled_entry, MISSING)",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 0,
        "src": "runtime_attr = inspect.getattr_static(runtime, mangled_entry, MISSING)",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 11,
        "src": "and isinstance(runtime_attr, types.WrapperDescriptorType)",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "yield from verify(stub_to_verify, runtime_attr, object_path + [entry])",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def _static_lookup_runtime(object_path: list[str]) -> MaybeMissing[Any]:",
        "target": "mypy.stubtest._static_lookup_runtime"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 13,
        "src": "def _verify_static_class_methods(",
        "target": "mypy.stubtest._verify_static_class_methods"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "if inspect.isbuiltin(runtime):",
        "target": "mypy.stubtest._verify_static_class_methods"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 3,
        "src": "probably_class_method = isinstance(getattr(runtime, \"__self__\", None), type)",
        "target": "mypy.stubtest._verify_static_class_methods"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression type contains \"Any\" (has type \"BuiltinFunctionType[[*Untyped, **Untyped], Untyped]\")",
        "offset": 0,
        "src": "probably_class_method = isinstance(getattr(runtime, \"__self__\", None), type)",
        "target": "mypy.stubtest._verify_static_class_methods"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 7,
        "src": "if static_runtime is MISSING:",
        "target": "mypy.stubtest._verify_static_class_methods"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 3,
        "src": "if isinstance(static_runtime, classmethod) and not stub.is_class:",
        "target": "mypy.stubtest._verify_static_class_methods"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 2,
        "src": "if not isinstance(static_runtime, classmethod) and stub.is_class:",
        "target": "mypy.stubtest._verify_static_class_methods"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 2,
        "src": "if isinstance(static_runtime, staticmethod) and not stub.is_static:",
        "target": "mypy.stubtest._verify_static_class_methods"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 2,
        "src": "if not isinstance(static_runtime, staticmethod) and stub.is_static:",
        "target": "mypy.stubtest._verify_static_class_methods"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 41,
        "src": "if runtime_arg.default != inspect.Parameter.empty:",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "runtime_type = get_mypy_type_of_runtime_value(runtime_arg.default)",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 12,
        "src": "and type(runtime_arg.default) != object",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "and type(runtime_arg.default) != object",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "and runtime_arg.default is not ...",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 11,
        "src": "stub_default is not UNKNOWN",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "and runtime_arg.default is not UNREPRESENTABLE",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "stub_default != runtime_arg.default",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "stub_default != runtime_arg.default",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "stub_default != runtime_arg.default",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 3,
        "src": "or type(stub_default) is not type(runtime_arg.default)  # noqa: E721",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "or type(stub_default) is not type(runtime_arg.default)  # noqa: E721",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "f'runtime argument \"{runtime_arg.name}\" '",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__str__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 28,
        "src": "def __str__(self) -> str:",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def get_name(arg: Any) -> str:",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(arg, inspect.Parameter):",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if isinstance(arg, nodes.Argument):",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 4,
        "src": "def get_type(arg: Any) -> str | None:",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(arg, inspect.Parameter):",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if isinstance(arg, nodes.Argument):",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 4,
        "src": "def has_default(arg: Any) -> bool:",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(arg, inspect.Parameter):",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return bool(arg.default != inspect.Parameter.empty)",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(arg, nodes.Argument):",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 4,
        "src": "def get_desc(arg: Any) -> str:",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_type = get_type(arg)",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "get_name(arg)",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "+ (\" = ...\" if has_default(arg) else \"\")",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 65,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 198,
        "src": "if runtime.varkw is None or not set(runtime.kwonly).issubset(set(stub.kwonly)):",
        "target": "mypy.stubtest._verify_signature"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression type contains \"Any\" (has type \"set[str | Any]\")",
        "offset": 31,
        "src": "if not set(runtime.kwonly).issubset(set(stub.kwonly) | stub_pos_names):",
        "target": "mypy.stubtest._verify_signature"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]\")",
        "offset": 6,
        "src": "@verify.register(nodes.FuncItem)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[FuncItem, _SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(nodes.FuncItem)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"def (stub: FuncItem, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@verify.register(nodes.FuncItem)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify_funcitem(",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"def (stub: FuncItem, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "def verify_funcitem(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 3,
        "src": "if isinstance(runtime, Missing):",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "if not is_probably_a_function(runtime):",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, \"is not a function\", stub, runtime)",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if not callable(runtime):",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 4,
        "src": "static_runtime = _static_lookup_runtime(object_path)",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "for error_text in _verify_abstract_status(stub, runtime):",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, error_text, stub, runtime)",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "for error_text in _verify_final_method(stub, runtime, static_runtime):",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 0,
        "src": "for error_text in _verify_final_method(stub, runtime, static_runtime):",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, error_text, stub, runtime)",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "for message in _verify_static_class_methods(stub, runtime, static_runtime, object_path):",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 63,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 0,
        "src": "for message in _verify_static_class_methods(stub, runtime, static_runtime, object_path):",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 70,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, \"is inconsistent, \" + message, stub, runtime)",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "signature = safe_inspect_signature(runtime)",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "runtime_is_coroutine = inspect.iscoroutinefunction(runtime)",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 18,
        "src": "runtime,",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "possibly-undefined",
        "column": 37,
        "message": "Name \"stub_sig\" may be undefined",
        "offset": 8,
        "src": "for message in _verify_signature(stub_sig, runtime_sig, function_name=stub.name):",
        "target": "mypy.stubtest"
      },
      {
        "code": "possibly-undefined",
        "column": 47,
        "message": "Name \"runtime_sig\" may be undefined",
        "offset": 0,
        "src": "for message in _verify_signature(stub_sig, runtime_sig, function_name=stub.name):",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "runtime,",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]\")",
        "offset": 5,
        "src": "@verify.register(Missing)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[Missing, _SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(Missing)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"def (stub: Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@verify.register(Missing)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify_none(",
        "target": "mypy.stubtest.verify_none"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"def (stub: Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "def verify_none(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 3,
        "src": "yield Error(object_path, \"is not present in stub\", stub, runtime)",
        "target": "mypy.stubtest.verify_none"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]\")",
        "offset": 3,
        "src": "@verify.register(nodes.Var)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[Var, _SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(nodes.Var)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"def (stub: Var, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@verify.register(nodes.Var)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify_var(",
        "target": "mypy.stubtest.verify_var"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"def (stub: Var, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "def verify_var(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 3,
        "src": "if isinstance(runtime, Missing):",
        "target": "mypy.stubtest.verify_var"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "and is_read_only_property(runtime)",
        "target": "mypy.stubtest.verify_var"
      },
      {
        "code": "no-any-expr",
        "column": 86,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "yield Error(object_path, \"is read-only at runtime but not in the stub\", stub, runtime)",
        "target": "mypy.stubtest.verify_var"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "runtime_type = get_mypy_type_of_runtime_value(runtime)",
        "target": "mypy.stubtest.verify_var"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "if isinstance(runtime, enum.Enum):",
        "target": "mypy.stubtest.verify_var"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "runtime_type = get_mypy_type_of_runtime_value(runtime.value)",
        "target": "mypy.stubtest.verify_var"
      },
      {
        "code": "helpful-string",
        "column": 29,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 6,
        "src": "object_path, f\"variable differs from runtime type {runtime_type}\", stub, runtime",
        "target": "mypy.stubtest.verify_var"
      },
      {
        "code": "no-any-expr",
        "column": 89,
        "message": "Expression type contains \"Any\" (has type \"Enum | Any\")",
        "offset": 0,
        "src": "object_path, f\"variable differs from runtime type {runtime_type}\", stub, runtime",
        "target": "mypy.stubtest.verify_var"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]\")",
        "offset": 4,
        "src": "@verify.register(nodes.OverloadedFuncDef)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[OverloadedFuncDef, _SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(nodes.OverloadedFuncDef)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"def (stub: OverloadedFuncDef, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@verify.register(nodes.OverloadedFuncDef)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify_overloadedfuncdef(",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"def (stub: OverloadedFuncDef, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "def verify_overloadedfuncdef(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 4,
        "src": "if isinstance(runtime, Missing):",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "if is_read_only_property(runtime):",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 90,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, \"is read-only at runtime but not in the stub\", stub, runtime)",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if not is_probably_a_function(runtime):",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, \"is not a function\", stub, runtime)",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if not callable(runtime):",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 11,
        "src": "for msg in _verify_abstract_status(first_part.func, runtime):",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, msg, stub, runtime)",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 3,
        "src": "static_runtime = _static_lookup_runtime(object_path)",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "for message in _verify_static_class_methods(stub, runtime, static_runtime, object_path):",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 63,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 0,
        "src": "for message in _verify_static_class_methods(stub, runtime, static_runtime, object_path):",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 70,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, \"is inconsistent, \" + message, stub, runtime)",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "signature = safe_inspect_signature(runtime)",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 18,
        "src": "runtime,",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]\")",
        "offset": 6,
        "src": "@verify.register(nodes.TypeVarExpr)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[TypeVarExpr, _SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(nodes.TypeVarExpr)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"def (stub: TypeVarExpr, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@verify.register(nodes.TypeVarExpr)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify_typevarexpr(",
        "target": "mypy.stubtest.verify_typevarexpr"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"def (stub: TypeVarExpr, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "def verify_typevarexpr(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 3,
        "src": "if isinstance(runtime, Missing):",
        "target": "mypy.stubtest.verify_typevarexpr"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "if not isinstance(runtime, TypeVar):",
        "target": "mypy.stubtest.verify_typevarexpr"
      },
      {
        "code": "no-any-expr",
        "column": 59,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, \"is not a TypeVar\", stub, runtime)",
        "target": "mypy.stubtest.verify_typevarexpr"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]\")",
        "offset": 4,
        "src": "@verify.register(nodes.ParamSpecExpr)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[ParamSpecExpr, _SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(nodes.ParamSpecExpr)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"def (stub: ParamSpecExpr, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@verify.register(nodes.ParamSpecExpr)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify_paramspecexpr(",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"def (stub: ParamSpecExpr, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "def verify_paramspecexpr(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 3,
        "src": "if isinstance(runtime, Missing):",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"(Any | None, Any | None)\")",
        "offset": 3,
        "src": "maybe_paramspec_types = (",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "getattr(typing, \"ParamSpec\", None),",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "getattr(typing_extensions, \"ParamSpec\", None),",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 2,
        "src": "paramspec_types = tuple(t for t in maybe_paramspec_types if t is not None)",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "paramspec_types = tuple(t for t in maybe_paramspec_types if t is not None)",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"Generator[Any, None, None]\")",
        "offset": 0,
        "src": "paramspec_types = tuple(t for t in maybe_paramspec_types if t is not None)",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "paramspec_types = tuple(t for t in maybe_paramspec_types if t is not None)",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"(Any | None, Any | None)\")",
        "offset": 0,
        "src": "paramspec_types = tuple(t for t in maybe_paramspec_types if t is not None)",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 64,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "paramspec_types = tuple(t for t in maybe_paramspec_types if t is not None)",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 1,
        "src": "if not paramspec_types or not isinstance(runtime, paramspec_types):",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if not paramspec_types or not isinstance(runtime, paramspec_types):",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "if not paramspec_types or not isinstance(runtime, paramspec_types):",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, \"is not a ParamSpec\", stub, runtime)",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 4,
        "src": "def _verify_readonly_property(stub: nodes.Decorator, runtime: Any) -> Iterator[str]:",
        "target": "mypy.stubtest._verify_readonly_property"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if isinstance(runtime, property):",
        "target": "mypy.stubtest._verify_readonly_property"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression type contains \"Any\" (has type \"(Any) -> Any | None\")",
        "offset": 1,
        "src": "yield from _verify_final_method(stub.func, runtime.fget, MISSING)",
        "target": "mypy.stubtest._verify_readonly_property"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if inspect.isdatadescriptor(runtime):",
        "target": "mypy.stubtest._verify_readonly_property"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "runtime_type = get_mypy_type_of_runtime_value(runtime)",
        "target": "mypy.stubtest._verify_readonly_property"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 13,
        "src": "def _verify_abstract_status(stub: nodes.FuncDef, runtime: Any) -> Iterator[str]:",
        "target": "mypy.stubtest._verify_abstract_status"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 2,
        "src": "runtime_abstract = getattr(runtime, \"__isabstractmethod__\", False)",
        "target": "mypy.stubtest._verify_abstract_status"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "runtime_abstract = getattr(runtime, \"__isabstractmethod__\", False)",
        "target": "mypy.stubtest._verify_abstract_status"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 2,
        "src": "if runtime_abstract and not stub_abstract:",
        "target": "mypy.stubtest._verify_abstract_status"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "def _verify_final_method(",
        "target": "mypy.stubtest._verify_final_method"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 5,
        "src": "if getattr(runtime, \"__final__\", False) or (",
        "target": "mypy.stubtest._verify_final_method"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if getattr(runtime, \"__final__\", False) or (",
        "target": "mypy.stubtest._verify_final_method"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 1,
        "src": "static_runtime is not MISSING and getattr(static_runtime, \"__final__\", False)",
        "target": "mypy.stubtest._verify_final_method"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "static_runtime is not MISSING and getattr(static_runtime, \"__final__\", False)",
        "target": "mypy.stubtest._verify_final_method"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "static_runtime is not MISSING and getattr(static_runtime, \"__final__\", False)",
        "target": "mypy.stubtest._verify_final_method"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 0,
        "src": "static_runtime is not MISSING and getattr(static_runtime, \"__final__\", False)",
        "target": "mypy.stubtest._verify_final_method"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]\")",
        "offset": 60,
        "src": "@verify.register(nodes.Decorator)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[Decorator, _SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(nodes.Decorator)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"def (stub: Decorator, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@verify.register(nodes.Decorator)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify_decorator(",
        "target": "mypy.stubtest.verify_decorator"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"def (stub: Decorator, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "def verify_decorator(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 6,
        "src": "if not isinstance(runtime, Missing):",
        "target": "mypy.stubtest.verify_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "runtime,",
        "target": "mypy.stubtest.verify_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 5,
        "src": "if isinstance(runtime, Missing):",
        "target": "mypy.stubtest.verify_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "for message in _verify_readonly_property(stub, runtime):",
        "target": "mypy.stubtest.verify_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, message, stub, runtime)",
        "target": "mypy.stubtest.verify_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "for message in _verify_abstract_status(stub.func, runtime):",
        "target": "mypy.stubtest.verify_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, message, stub, runtime)",
        "target": "mypy.stubtest.verify_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "yield from verify(func, runtime, object_path)",
        "target": "mypy.stubtest.verify_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]\")",
        "offset": 3,
        "src": "@verify.register(nodes.TypeAlias)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[TypeAlias, _SingleDispatchCallable[Iterator[Error], def (stub: Node | Missing, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(nodes.TypeAlias)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"def (stub: TypeAlias, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@verify.register(nodes.TypeAlias)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify_typealias(",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"def (stub: TypeAlias, runtime: Any | Missing, object_path: list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "def verify_typealias(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 5,
        "src": "if isinstance(runtime, Missing):",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "runtime_origin = get_origin(runtime) or runtime",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "runtime_origin = get_origin(runtime) or runtime",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "runtime_origin = get_origin(runtime) or runtime",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if not isinstance(runtime_origin, type):",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "runtime,",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 31,
        "src": "if runtime_origin is not Union and (",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "yield Error(object_path, \"is not a Union\", stub, runtime, stub_desc=str(stub_target))",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"Any | ()\")",
        "offset": 4,
        "src": "if tuple not in getattr(runtime_origin, \"__mro__\", ()):",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if tuple not in getattr(runtime_origin, \"__mro__\", ()):",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 65,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "object_path, \"is not a subclass of tuple\", stub, runtime, stub_desc=stub_desc",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "if runtime_origin is not collections.abc.Callable:",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 71,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "object_path, \"is not a type alias for Callable\", stub, runtime, stub_desc=stub_desc",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 69,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "yield Error(object_path, \"is not a recognised type alias\", stub, runtime, stub_desc=stub_desc)",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 88,
        "src": "def is_probably_a_function(runtime: Any) -> bool:",
        "target": "mypy.stubtest.is_probably_a_function"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "isinstance(runtime, (types.FunctionType, types.BuiltinFunctionType))",
        "target": "mypy.stubtest.is_probably_a_function"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "or isinstance(runtime, (types.MethodType, types.BuiltinMethodType))",
        "target": "mypy.stubtest.is_probably_a_function"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "or (inspect.ismethoddescriptor(runtime) and callable(runtime))",
        "target": "mypy.stubtest.is_probably_a_function"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression type contains \"Any\" (has type \"(Any, Any) -> None | None\")",
        "offset": 5,
        "src": "return isinstance(runtime, property) and runtime.fset is None",
        "target": "mypy.stubtest.is_read_only_property"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def safe_inspect_signature(runtime: Any) -> inspect.Signature | None:",
        "target": "mypy.stubtest.safe_inspect_signature"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "return inspect.signature(runtime)",
        "target": "mypy.stubtest.safe_inspect_signature"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "hasattr(runtime, \"__text_signature__\")",
        "target": "mypy.stubtest.safe_inspect_signature"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "and \"<unrepresentable>\" in runtime.__text_signature__",
        "target": "mypy.stubtest.safe_inspect_signature"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "sig = runtime.__text_signature__.replace(\"<unrepresentable>\", \"...\")",
        "target": "mypy.stubtest.safe_inspect_signature"
      },
      {
        "code": "no-any-expr",
        "column": 68,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "sig = inspect._signature_fromstr(inspect.Signature, runtime, sig)  # type: ignore[attr-defined]",
        "target": "mypy.stubtest.safe_inspect_signature"
      },
      {
        "code": null,
        "column": 68,
        "message": "Error code \"no-any-expr\" not covered by \"type: ignore\" comment",
        "offset": 0,
        "src": "sig = inspect._signature_fromstr(inspect.Signature, runtime, sig)  # type: ignore[attr-defined]",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 77,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "sig = inspect._signature_fromstr(inspect.Signature, runtime, sig)  # type: ignore[attr-defined]",
        "target": "mypy.stubtest.safe_inspect_signature"
      },
      {
        "code": null,
        "column": 77,
        "message": "Error code \"no-any-expr\" not covered by \"type: ignore\" comment",
        "offset": 0,
        "src": "sig = inspect._signature_fromstr(inspect.Signature, runtime, sig)  # type: ignore[attr-defined]",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert isinstance(sig, inspect.Signature)",
        "target": "mypy.stubtest.safe_inspect_signature"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if parameter.default is ...",
        "target": "mypy.stubtest.safe_inspect_signature"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 42,
        "src": "def get_mypy_type_of_runtime_value(runtime: Any) -> mypy.types.Type | None:",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "if runtime is None:",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if isinstance(runtime, property):",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "runtime,",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 18,
        "src": "has_default = arg.default == inspect.Parameter.empty",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "arg_kinds.append(nodes.ARG_POS if has_default else nodes.ARG_OPT)",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "arg_kinds.append(nodes.ARG_POS if has_default else nodes.ARG_OPT)",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "arg_kinds.append(nodes.ARG_NAMED if has_default else nodes.ARG_NAMED_OPT)",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "redundant-expr",
        "column": 21,
        "message": "Condition is always true",
        "offset": 3,
        "src": "elif arg.kind == inspect.Parameter.VAR_KEYWORD:",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 19,
        "src": "stub = get_stub(type(runtime).__module__)",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "stub = get_stub(type(runtime).__module__)",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 3,
        "src": "type_name = type(runtime).__name__",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "type_name = type(runtime).__name__",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "if isinstance(runtime, tuple):",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 10,
        "src": "if isinstance(runtime, enum.Enum) and isinstance(runtime.name, str):",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif isinstance(runtime, bytes):",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif isinstance(runtime, (bool, int, str)):",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 372,
        "src": "default=[],",
        "target": "mypy.stubtest.parse_options"
      }
    ],
    "mypy/stubutil.py": [
      {
        "code": "helpful-string",
        "column": 10,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 129,
        "src": "print(f\"{mod}: Failed to import, skipping{message}\")",
        "target": "mypy.stubutil.report_missing"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.types.TypeStrVisitor\"",
        "offset": 93,
        "src": "def visit_any(self, t: AnyType) -> str:",
        "target": "mypy.stubutil.AnnotationPrinter.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.types.TypeStrVisitor\"",
        "offset": 5,
        "src": "def visit_unbound_type(self, t: UnboundType) -> str:",
        "target": "mypy.stubutil.AnnotationPrinter.visit_unbound_type"
      },
      {
        "code": "possibly-undefined",
        "column": 15,
        "message": "Name \"arg_module\" may be undefined",
        "offset": 13,
        "src": "if arg_module not in self.local_modules:",
        "target": "mypy.stubutil"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_none_type\" is not using @override but is overriding a method in class \"mypy.types.TypeStrVisitor\"",
        "offset": 12,
        "src": "def visit_none_type(self, t: NoneType) -> str:",
        "target": "mypy.stubutil.AnnotationPrinter.visit_none_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_list\" is not using @override but is overriding a method in class \"mypy.types.TypeStrVisitor\"",
        "offset": 3,
        "src": "def visit_type_list(self, t: TypeList) -> str:",
        "target": "mypy.stubutil.AnnotationPrinter.visit_type_list"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.types.TypeStrVisitor\"",
        "offset": 3,
        "src": "def visit_union_type(self, t: UnionType) -> str:",
        "target": "mypy.stubutil.AnnotationPrinter.visit_union_type"
      }
    ],
    "mypy/subtypes.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 431,
        "src": "def visit_unbound_type(self, left: UnboundType) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_any(self, left: AnyType) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_none_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_none_type(self, left: NoneType) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_none_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 16,
        "src": "def visit_uninhabited_type(self, left: UninhabitedType) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 7,
        "src": "def visit_erased_type(self, left: ErasedType) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_deleted_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_deleted_type(self, left: DeletedType) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_deleted_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_instance(self, left: Instance) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 176,
        "src": "def visit_type_var(self, left: TypeVarType) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 8,
        "src": "def visit_param_spec(self, left: ParamSpecType) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 12,
        "src": "def visit_type_var_tuple(self, left: TypeVarTupleType) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unpack_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_unpack_type(self, left: UnpackType) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_unpack_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_parameters\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 9,
        "src": "def visit_parameters(self, left: Parameters) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_parameters"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 13,
        "src": "def visit_callable_type(self, left: CallableType) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 64,
        "src": "def visit_tuple_type(self, left: TupleType) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 131,
        "src": "def visit_typeddict_type(self, left: TypedDictType) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_literal_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 36,
        "src": "def visit_literal_type(self, left: LiteralType) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_literal_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_overloaded(self, left: Overloaded) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_overloaded"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 83,
        "src": "def visit_union_type(self, left: UnionType) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_union_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_intersection_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 42,
        "src": "def visit_intersection_type(self, left: IntersectionType) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_intersection_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_partial_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_partial_type(self, left: PartialType) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_partial_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 13,
        "src": "def visit_type_type(self, left: TypeType) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_type_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 30,
        "src": "def visit_type_alias_type(self, left: TypeAliasType) -> bool:",
        "target": "mypy.subtypes.SubtypeVisitor.visit_type_alias_type"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 801,
        "src": "def report(*args: Any) -> None:",
        "target": "mypy.subtypes.unify_generic_callable"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"def (*args: Any) -> None\")",
        "offset": 9,
        "src": "type, non_none_inferred_vars, report, context=target",
        "target": "mypy.subtypes.unify_generic_callable"
      }
    ],
    "mypy/suggestions.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_function_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 112,
        "src": "def get_function_hook(self, fullname: str) -> Callable[[FunctionContext], Type] | None:",
        "target": "mypy.suggestions.SuggestionPlugin.get_function_hook"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_method_hook\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 6,
        "src": "def get_method_hook(self, fullname: str) -> Callable[[MethodContext], Type] | None:",
        "target": "mypy.suggestions.SuggestionPlugin.get_method_hook"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 29,
        "src": "def visit_return_stmt(self, o: ReturnStmt) -> None:",
        "target": "mypy.suggestions.ReturnFinder.visit_return_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 4,
        "src": "def visit_func_def(self, o: FuncDef) -> None:",
        "target": "mypy.suggestions.ReturnFinder.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 22,
        "src": "def visit_call_expr(self, o: CallExpr) -> None:",
        "target": "mypy.suggestions.ArgUseFinder.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"islice[tuple[Any, ...]]\")",
        "offset": 234,
        "src": "product = itertools.islice(itertools.product(*options), 0, self.max_guesses)",
        "target": "mypy.suggestions.SuggestionEngine.get_guesses"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"product[tuple[Any, ...]]\")",
        "offset": 0,
        "src": "product = itertools.islice(itertools.product(*options), 0, self.max_guesses)",
        "target": "mypy.suggestions.SuggestionEngine.get_guesses"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 1,
        "src": "return [refine_callable(base, base.copy_modified(arg_types=list(x))) for x in product]",
        "target": "mypy.suggestions.SuggestionEngine.get_guesses"
      },
      {
        "code": "no-any-expr",
        "column": 72,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "return [refine_callable(base, base.copy_modified(arg_types=list(x))) for x in product]",
        "target": "mypy.suggestions.SuggestionEngine.get_guesses"
      },
      {
        "code": "no-any-expr",
        "column": 86,
        "message": "Expression type contains \"Any\" (has type \"islice[tuple[Any, ...]]\")",
        "offset": 0,
        "src": "return [refine_callable(base, base.copy_modified(arg_types=list(x))) for x in product]",
        "target": "mypy.suggestions.SuggestionEngine.get_guesses"
      },
      {
        "code": "possibly-undefined",
        "column": 24,
        "message": "Name \"arg\" may be undefined",
        "offset": 118,
        "src": "args.append(arg)",
        "target": "mypy.suggestions"
      },
      {
        "code": "unreachable",
        "column": 61,
        "message": "Right operand of \"or\" is never evaluated",
        "offset": 105,
        "src": "if sym_line <= line and (closest_line is None or sym_line > closest_line):",
        "target": "mypy.suggestions.SuggestionEngine.find_node_by_file_and_line"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 88,
        "src": "return json.dumps([obj], sort_keys=True)",
        "target": "mypy.suggestions.SuggestionEngine.json_suggestion"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.types.TypeStrVisitor\"",
        "offset": 98,
        "src": "def visit_any(self, t: AnyType) -> str:",
        "target": "mypy.suggestions.TypeFormatter.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.types.TypeStrVisitor\"",
        "offset": 6,
        "src": "def visit_instance(self, t: Instance) -> str:",
        "target": "mypy.suggestions.TypeFormatter.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.types.TypeStrVisitor\"",
        "offset": 33,
        "src": "def visit_tuple_type(self, t: TupleType) -> str:",
        "target": "mypy.suggestions.TypeFormatter.visit_tuple_type"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"partial_fallback\" has type \"Instance\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 1,
        "src": "if t.partial_fallback and t.partial_fallback.type:",
        "target": "mypy.suggestions.TypeFormatter.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.types.TypeStrVisitor\"",
        "offset": 7,
        "src": "def visit_uninhabited_type(self, t: UninhabitedType) -> str:",
        "target": "mypy.suggestions.TypeFormatter.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.types.TypeStrVisitor\"",
        "offset": 3,
        "src": "def visit_typeddict_type(self, t: TypedDictType) -> str:",
        "target": "mypy.suggestions.TypeFormatter.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.types.TypeStrVisitor\"",
        "offset": 3,
        "src": "def visit_union_type(self, t: UnionType) -> str:",
        "target": "mypy.suggestions.TypeFormatter.visit_union_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.types.TypeStrVisitor\"",
        "offset": 6,
        "src": "def visit_callable_type(self, t: CallableType) -> str:",
        "target": "mypy.suggestions.TypeFormatter.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 28,
        "src": "def visit_any(self, t: AnyType) -> Type:",
        "target": "mypy.suggestions.MakeSuggestionAny.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 6,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> Type:",
        "target": "mypy.suggestions.MakeSuggestionAny.visit_type_alias_type"
      }
    ],
    "mypy/test/data.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"runtest\" is not using @override but is overriding a method in class \"_pytest.nodes.Item\"",
        "offset": 314,
        "src": "def runtest(self) -> None:",
        "target": "mypy.test.data.DataDrivenTestCase.runtest"
      },
      {
        "code": "no-untyped-usage",
        "column": 8,
        "message": "Usage of untyped name \"suite\" in typed context",
        "offset": 8,
        "src": "suite = parent.obj()",
        "target": "mypy.test.data.DataDrivenTestCase.runtest"
      },
      {
        "code": "no-untyped-usage",
        "column": 8,
        "message": "See https://kotlinisland.github.io/basedmypy/_refs.html#code-no-untyped-usage for more info",
        "offset": 0,
        "src": "suite = parent.obj()",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Untyped\"",
        "offset": 0,
        "src": "suite = parent.obj()",
        "target": "mypy.test.data.DataDrivenTestCase.runtest"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Untyped\"",
        "offset": 1,
        "src": "suite.setup()",
        "target": "mypy.test.data.DataDrivenTestCase.runtest"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Untyped\"",
        "offset": 2,
        "src": "suite.run_case(self)",
        "target": "mypy.test.data.DataDrivenTestCase.runtest"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setup\" is not using @override but is overriding a method in class \"_pytest.nodes.Node\"",
        "offset": 14,
        "src": "def setup(self) -> None:",
        "target": "mypy.test.data.DataDrivenTestCase.setup"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"teardown\" is not using @override but is overriding a method in class \"_pytest.nodes.Node\"",
        "offset": 36,
        "src": "def teardown(self) -> None:",
        "target": "mypy.test.data.DataDrivenTestCase.teardown"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"reportinfo\" is not using @override but is overriding a method in class \"_pytest.nodes.Item\"",
        "offset": 11,
        "src": "def reportinfo(self) -> tuple[str, int, str]:",
        "target": "mypy.test.data.DataDrivenTestCase.reportinfo"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def repr_failure(",
        "target": "mypy.test.data.DataDrivenTestCase.repr_failure"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"repr_failure\" is not using @override but is overriding a method in class \"_pytest.nodes.Node\"",
        "offset": 0,
        "src": "def repr_failure(",
        "target": "mypy.test.data.DataDrivenTestCase.repr_failure"
      },
      {
        "code": "redundant-expr",
        "column": 15,
        "message": "Condition is always false",
        "offset": 79,
        "src": "if id:",
        "target": "mypy.test.data.parse_test_data"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "data = collapse_line_continuation(data)",
        "target": "mypy.test.data.parse_test_data"
      },
      {
        "code": "possibly-undefined",
        "column": 34,
        "message": "Name \"severity\" may be undefined",
        "offset": 87,
        "src": "output.append(f\"{fnam}:{i + 1}: {severity}: {message}\")",
        "target": "mypy.test.data"
      },
      {
        "code": "possibly-undefined",
        "column": 34,
        "message": "Name \"severity\" may be undefined",
        "offset": 2,
        "src": "output.append(f\"{fnam}:{i + 1}:{col}: {severity}: {message}\")",
        "target": "mypy.test.data"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 39,
        "src": "def pytest_addoption(parser: Any) -> None:",
        "target": "mypy.test.data.pytest_addoption"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "group = parser.getgroup(\"mypy\")",
        "target": "mypy.test.data.pytest_addoption"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "group.addoption(",
        "target": "mypy.test.data.pytest_addoption"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "group.addoption(",
        "target": "mypy.test.data.pytest_addoption"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "group.addoption(",
        "target": "mypy.test.data.pytest_addoption"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "group.addoption(",
        "target": "mypy.test.data.pytest_addoption"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "group.addoption(",
        "target": "mypy.test.data.pytest_addoption"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Untyped\"",
        "offset": 10,
        "src": "if config.getoption(\"--update-data\") and config.getoption(\"--numprocesses\", default=1) > 1:",
        "target": "mypy.test.data.pytest_configure"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any (unannotated)\"",
        "offset": 0,
        "src": "if config.getoption(\"--update-data\") and config.getoption(\"--numprocesses\", default=1) > 1:",
        "target": "mypy.test.data.pytest_configure"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression has type \"Untyped\"",
        "offset": 0,
        "src": "if config.getoption(\"--update-data\") and config.getoption(\"--numprocesses\", default=1) > 1:",
        "target": "mypy.test.data.pytest_configure"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression has type \"Any (unannotated)\"",
        "offset": 0,
        "src": "if config.getoption(\"--update-data\") and config.getoption(\"--numprocesses\", default=1) > 1:",
        "target": "mypy.test.data.pytest_configure"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 8,
        "src": "def pytest_pycollect_makeitem(collector: Any, name: str, obj: object) -> Any | None:",
        "target": "mypy.test.data.pytest_pycollect_makeitem"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Untyped\"",
        "offset": 11,
        "src": "return DataSuiteCollector.from_parent(  # type: ignore[unused-ignore, no-untyped-call]",
        "target": "mypy.test.data.pytest_pycollect_makeitem"
      },
      {
        "code": null,
        "column": 19,
        "message": "Error code \"no-any-expr\" not covered by \"type: ignore\" comment",
        "offset": 0,
        "src": "return DataSuiteCollector.from_parent(  # type: ignore[unused-ignore, no-untyped-call]",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "parent=collector, name=name",
        "target": "mypy.test.data.pytest_pycollect_makeitem"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Untyped\"",
        "offset": 43,
        "src": "yield DataDrivenTestCase.from_parent(  # type: ignore[unused-ignore, no-untyped-call]",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": null,
        "column": 14,
        "message": "Error code \"no-any-expr\" not covered by \"type: ignore\" comment",
        "offset": 0,
        "src": "yield DataDrivenTestCase.from_parent(  # type: ignore[unused-ignore, no-untyped-call]",
        "target": null
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"collect\" is not using @override but is overriding a method in class \"_pytest.python.Class\"",
        "offset": 21,
        "src": "def collect(self) -> Iterator[DataFileCollector]:",
        "target": "mypy.test.data.DataSuiteCollector.collect"
      },
      {
        "code": "no-untyped-usage",
        "column": 27,
        "message": "Usage of untyped name \"obj\" in typed context",
        "offset": 4,
        "src": "suite: DataSuite = self.obj",
        "target": "mypy.test.data.DataSuiteCollector.collect"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"from_parent\" is not using @override but is overriding a method in class \"_pytest.nodes.Node\"",
        "offset": 27,
        "src": "def from_parent(",
        "target": "mypy.test.data"
      },
      {
        "code": "no-untyped-usage",
        "column": 8,
        "message": "Usage of untyped name \"collector\" in typed context",
        "offset": 3,
        "src": "collector = super().from_parent(parent, name=name)",
        "target": "mypy.test.data.DataFileCollector.from_parent"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Untyped\"",
        "offset": 0,
        "src": "collector = super().from_parent(parent, name=name)",
        "target": "mypy.test.data.DataFileCollector.from_parent"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Untyped\"",
        "offset": 1,
        "src": "assert isinstance(collector, DataFileCollector)",
        "target": "mypy.test.data.DataFileCollector.from_parent"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"collect\" is not using @override but is overriding a method in class \"_pytest.nodes.Collector\"",
        "offset": 3,
        "src": "def collect(self) -> Iterator[DataDrivenTestCase]:",
        "target": "mypy.test.data.DataFileCollector.collect"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Untyped\"",
        "offset": 3,
        "src": "suite=self.parent.obj,",
        "target": "mypy.test.data.DataFileCollector.collect"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Untyped\"",
        "offset": 1,
        "src": "file=os.path.join(self.parent.obj.data_prefix, self.name),",
        "target": "mypy.test.data.DataFileCollector.collect"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setup\" is not using @override but is overriding a method in class \"_pytest.nodes.Node\"",
        "offset": 3,
        "src": "def setup(self) -> None:",
        "target": "mypy.test.data.DataFileCollector.setup"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"teardown\" is not using @override but is overriding a method in class \"_pytest.nodes.Node\"",
        "offset": 4,
        "src": "def teardown(self) -> None:",
        "target": "mypy.test.data.DataFileCollector.teardown"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Untyped\"",
        "offset": 10,
        "src": "data_path = Path(self.parent.obj.data_prefix) / self.name",
        "target": "mypy.test.data.DataFileCollector._apply_fixes"
      }
    ],
    "mypy/test/helpers.py": [
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 144,
        "src": "actual_normalized = sorted(set(actual).difference({\"__main__\"}))",
        "target": "mypy.test.helpers.assert_module_equivalence"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 136,
        "src": "def retry_on_error(func: Callable[[], Any], max_wait: float = 1.0) -> None:",
        "target": "mypy.test.helpers.retry_on_error"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Untyped\"",
        "offset": 123,
        "src": "if testcase.config.getoption(\"--mypy-verbose\"):",
        "target": "mypy.test.helpers.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 99,
        "src": "base_version = getattr(mypy.version, \"base_based_version\", version)",
        "target": "mypy.test.helpers.normalize_file_output"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 1,
        "src": "result = [re.sub(r\"\\b\" + re.escape(base_version) + r\"\\b\", \"$VERSION\", x) for x in result]",
        "target": "mypy.test.helpers.normalize_file_output"
      }
    ],
    "mypy/test/meta/_pytest.py": [
      {
        "code": "possibly-undefined",
        "column": 19,
        "message": "Name \"proc\" may be undefined",
        "offset": 68,
        "src": "stdout=proc.stdout.decode(),",
        "target": "mypy.test.meta._pytest"
      },
      {
        "code": "possibly-undefined",
        "column": 19,
        "message": "See https://kotlinisland.github.io/basedmypy/_refs.html#code-possibly-undefined for more info",
        "offset": 0,
        "src": "stdout=proc.stdout.decode(),",
        "target": null
      }
    ],
    "mypy/test/test_find_sources.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"isfile\" is not using @override but is overriding a method in class \"mypy.fscache.FileSystemCache\"",
        "offset": 20,
        "src": "def isfile(self, file: str) -> bool:",
        "target": "mypy.test.test_find_sources.FakeFSCache.isfile"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"isdir\" is not using @override but is overriding a method in class \"mypy.fscache.FileSystemCache\"",
        "offset": 3,
        "src": "def isdir(self, dir: str) -> bool:",
        "target": "mypy.test.test_find_sources.FakeFSCache.isdir"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"listdir\" is not using @override but is overriding a method in class \"mypy.fscache.FileSystemCache\"",
        "offset": 5,
        "src": "def listdir(self, dir: str) -> list[str]:",
        "target": "mypy.test.test_find_sources.FakeFSCache.listdir"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"init_under_package_root\" is not using @override but is overriding a method in class \"mypy.fscache.FileSystemCache\"",
        "offset": 5,
        "src": "def init_under_package_root(self, file: str) -> bool:",
        "target": "mypy.test.test_find_sources.FakeFSCache.init_under_package_root"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 34,
        "src": "def setUp(self) -> None:",
        "target": "mypy.test.test_find_sources.SourceFinderSuite.setUp"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"tearDown\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 5,
        "src": "def tearDown(self) -> None:",
        "target": "mypy.test.test_find_sources.SourceFinderSuite.tearDown"
      }
    ],
    "mypy/test/test_ref_info.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 22,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypy.test.test_ref_info.RefInfoSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 19,
        "src": "data = json.load(refs_file)",
        "target": "mypy.test.test_ref_info.RefInfoSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "for item in data:",
        "target": "mypy.test.test_ref_info.RefInfoSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for item in data:",
        "target": "mypy.test.test_ref_info.RefInfoSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "a.append(f\"{item['line']}:{item['column']}:{item['target']}\")",
        "target": "mypy.test.test_ref_info.RefInfoSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "a.append(f\"{item['line']}:{item['column']}:{item['target']}\")",
        "target": "mypy.test.test_ref_info.RefInfoSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "a.append(f\"{item['line']}:{item['column']}:{item['target']}\")",
        "target": "mypy.test.test_ref_info.RefInfoSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "a.append(f\"{item['line']}:{item['column']}:{item['target']}\")",
        "target": "mypy.test.test_ref_info.RefInfoSuite.run_case"
      }
    ],
    "mypy/test/testapi.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 11,
        "src": "def setUp(self) -> None:",
        "target": "mypy.test.testapi.APISuite.setUp"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"tearDown\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 6,
        "src": "def tearDown(self) -> None:",
        "target": "mypy.test.testapi.APISuite.tearDown"
      }
    ],
    "mypy/test/testcheck.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 61,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypy.test.testcheck.TypeCheckSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "if lxml is None and os.path.basename(testcase.file) == \"check-reports.test\":",
        "target": "mypy.test.testcheck.TypeCheckSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"False | Untyped\")",
        "offset": 140,
        "src": "if output != a and testcase.config.getoption(\"--update-data\", False):",
        "target": "mypy.test.testcheck.TypeCheckSuite.run_case_once"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Untyped\"",
        "offset": 0,
        "src": "if output != a and testcase.config.getoption(\"--update-data\", False):",
        "target": "mypy.test.testcheck.TypeCheckSuite.run_case_once"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 82,
        "src": "meta = build.find_cache_meta(id, path, manager)",
        "target": "mypy.test.testcheck.TypeCheckSuite.find_missing_cache_files"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 1,
        "src": "if not build.validate_meta(meta, id, path, ignore_errors, manager):",
        "target": "mypy.test.testcheck.TypeCheckSuite.find_missing_cache_files"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 0,
        "src": "if not build.validate_meta(meta, id, path, ignore_errors, manager):",
        "target": "mypy.test.testcheck.TypeCheckSuite.find_missing_cache_files"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"based\" is not using @override but is overriding a method in class \"mypy.test.testcheck.TypeCheckSuite\"",
        "offset": 53,
        "src": "def based(self, testcase: DataDrivenTestCase) -> bool:",
        "target": "mypy.test.testcheck.BasedTypeCheckSuite.based"
      }
    ],
    "mypy/test/testcmdline.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 48,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypy.test.testcmdline.PythonCmdlineSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "if lxml is None and os.path.basename(testcase.file) == \"reports.test\":",
        "target": "mypy.test.testcmdline.PythonCmdlineSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 55,
        "src": "result = process.returncode",
        "target": "mypy.test.testcmdline.test_python_cmdline"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"list[str] | int | Any\")",
        "offset": 18,
        "src": "if err or result:",
        "target": "mypy.test.testcmdline.test_python_cmdline"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 0,
        "src": "if err or result:",
        "target": "mypy.test.testcmdline.test_python_cmdline"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"(str, int | Any, str)\")",
        "offset": 3,
        "src": "% (\" on step %d\" % step if testcase.output2 else \"\", result, \"\\n\".join(err + out))",
        "target": "mypy.test.testcmdline.test_python_cmdline"
      },
      {
        "code": "no-any-expr",
        "column": 69,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 0,
        "src": "% (\" on step %d\" % step if testcase.output2 else \"\", result, \"\\n\".join(err + out))",
        "target": "mypy.test.testcmdline.test_python_cmdline"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 7,
        "src": "if obvious_result != result:",
        "target": "mypy.test.testcmdline.test_python_cmdline"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 0,
        "src": "if obvious_result != result:",
        "target": "mypy.test.testcmdline.test_python_cmdline"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 1,
        "src": "out.append(f\"== Return code: {result}\")",
        "target": "mypy.test.testcmdline.test_python_cmdline"
      }
    ],
    "mypy/test/testconstraints.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 10,
        "src": "def setUp(self) -> None:",
        "target": "mypy.test.testconstraints.ConstraintsSuite.setUp"
      }
    ],
    "mypy/test/testdaemon.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 31,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypy.test.testdaemon.DaemonSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"(int, Any)\")",
        "offset": 74,
        "src": "return err.returncode, err.output",
        "target": "mypy.test.testdaemon.run_cmd"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return err.returncode, err.output",
        "target": "mypy.test.testdaemon.run_cmd"
      }
    ],
    "mypy/test/testdeps.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 27,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypy.test.testdeps.GetDependenciesSuite.run_case"
      }
    ],
    "mypy/test/testdiff.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 22,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypy.test.testdiff.ASTDiffSuite.run_case"
      }
    ],
    "mypy/test/testerrorstream.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 17,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypy.test.testerrorstream.ErrorStreamSuite.run_case"
      }
    ],
    "mypy/test/testfinegrained.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 74,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.run_case"
      },
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 3,
        "src": "return",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 94,
        "src": "response = server.check(sources, export_types=False, is_tty=False, terminal_width=-1)",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.run_check"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "out = response[\"out\"] or response[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.run_check"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "out = response[\"out\"] or response[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.run_check"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "out = response[\"out\"] or response[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.run_check"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "out = response[\"out\"] or response[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.run_check"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert isinstance(out, str)",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.run_check"
      },
      {
        "code": "no-any-explicit",
        "column": 18,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 136,
        "src": "res = cast(",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "res = cast(",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 13,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "val = val.replace(\"\\\\\\\\\", \"\\\\\")",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "val = val.replace(tmp_dir + os.path.sep, \"\")",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "val = val.replace(os.path.realpath(tmp_dir) + os.path.sep, \"\")",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "val = val.replace(os.path.abspath(tmp_dir) + os.path.sep, \"\")",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "output.extend(val.strip().split(\"\\n\"))",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-explicit",
        "column": 18,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 21,
        "src": "res = cast(",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "res = cast(",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 14,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "output.extend(val.strip().split(\"\\n\"))",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      }
    ],
    "mypy/test/testfscache.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 15,
        "src": "def setUp(self) -> None:",
        "target": "mypy.test.testfscache.TestFileSystemCache.setUp"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"tearDown\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 6,
        "src": "def tearDown(self) -> None:",
        "target": "mypy.test.testfscache.TestFileSystemCache.tearDown"
      }
    ],
    "mypy/test/testinfer.py": [
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 164,
        "src": "d.items(), [({0, 1}, {\"group1\"}), ({2, 3, 4}, {\"group2\"}), ({5, 6, 7}, {\"group3\"})]",
        "target": "mypy.test.testinfer.OperandDisjointDictSuite.test_independent_maps"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 14,
        "src": "[",
        "target": "mypy.test.testinfer.OperandDisjointDictSuite.test_partial_merging"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 17,
        "src": "[({0, 1, 2, 3, 4, 10, 11, 12, 13, 14, 15, 16}, {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"})],",
        "target": "mypy.test.testinfer.OperandDisjointDictSuite.test_full_merging"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 11,
        "src": "self.assertEqual(d.items(), [({0, 1, 2, 3, 4, 5, 6}, {\"a\", \"b\", \"c\", \"d\", \"e\"})])",
        "target": "mypy.test.testinfer.OperandDisjointDictSuite.test_merge_with_multiple_overlaps"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 29,
        "src": "[(\"==\", [0, 1]), (\"==\", [1, 2]), (\"<\", [2, 3]), (\"==\", [3, 4])],",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_basic_cases"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 4,
        "src": "[(\"==\", [0, 1, 2]), (\"<\", [2, 3]), (\"==\", [3, 4])],",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_basic_cases"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 4,
        "src": "[(\"==\", [0, 1]), (\"==\", [1, 2]), (\"<\", [2, 3]), (\"==\", [3, 4])],",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_basic_cases"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 4,
        "src": "[(\"==\", [0, 1, 2]), (\"<\", [2, 3]), (\"==\", [3, 4])],",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_basic_cases"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 17,
        "src": "[(\"==\", [0, 1, 2]), (\"is\", [2, 3, 4])],",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_multiple_groups"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 8,
        "src": "[(\"==\", [0, 1, 2, 3, 4])],",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_multiple_groups"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 8,
        "src": "[(\"is\", [0, 1]), (\"==\", [1, 2, 3, 4])],",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_multiple_groups"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 8,
        "src": "[(\"is\", [0, 1, 2]), (\"<\", [2, 3]), (\"==\", [3, 4, 5])],",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_multiple_groups"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 58,
        "src": "[(\"==\", [0, 1, 2]), (\"is\", [2, 3, 4])],",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_multiple_groups_different_operators"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 26,
        "src": "self.assertEqual(group_comparison_operands([], {}, set()), [])",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_empty_pair_list"
      },
      {
        "code": "no-any-expr",
        "column": 68,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "self.assertEqual(group_comparison_operands([], {}, {\"==\"}), [])",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_empty_pair_list"
      }
    ],
    "mypy/test/testipc.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 38,
        "src": "def setUp(self) -> None:",
        "target": "mypy.test.testipc.IPCTests.setUp"
      }
    ],
    "mypy/test/testmerge.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setup\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 43,
        "src": "def setup(self) -> None:",
        "target": "mypy.test.testmerge.ASTMergeSuite.setup"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 7,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypy.test.testmerge.ASTMergeSuite.run_case"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always true",
        "offset": 125,
        "src": "if isinstance(node.node, Node):",
        "target": "mypy.test.testmerge.ASTMergeSuite.format_symbol_table_node"
      },
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 3,
        "src": "s = f\"? ({type(node.node)})\"",
        "target": "mypy.test.testmerge.ASTMergeSuite.format_symbol_table_node"
      }
    ],
    "mypy/test/testmodulefinder.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 14,
        "src": "def setUp(self) -> None:",
        "target": "mypy.test.testmodulefinder.ModuleFinderSuite.setUp"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 127,
        "src": "def setUp(self) -> None:",
        "target": "mypy.test.testmodulefinder.ModuleFinderSitePackagesSuite.setUp"
      }
    ],
    "mypy/test/testparse.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 27,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypy.test.testparse.ParserSuite.run_case"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 47,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypy.test.testparse.ParseErrorSuite.run_case"
      }
    ],
    "mypy/test/testpep561.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 26,
        "src": "def run_case(self, test_case: DataDrivenTestCase) -> None:",
        "target": "mypy.test.testpep561.PEP561Suite.run_case"
      },
      {
        "code": "possibly-undefined",
        "column": 22,
        "message": "Name \"program\" may be undefined",
        "offset": 144,
        "src": "os.remove(program)",
        "target": "mypy.test.testpep561"
      },
      {
        "code": "unreachable",
        "column": 4,
        "message": "Statement is unreachable",
        "offset": 20,
        "src": "packages = \"packages\"",
        "target": "mypy.test.testpep561.test_mypy_path_is_respected"
      }
    ],
    "mypy/test/testpythoneval.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 37,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypy.test.testpythoneval.PythonEvaluationSuite.run_case"
      }
    ],
    "mypy/test/testreports.py": [
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 18,
        "src": "@pytest.mark.skipif(lxml is None, reason=\"Cannot import lxml. Is it installed?\")",
        "target": "mypy.test.testreports"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 5,
        "src": "@pytest.mark.skipif(lxml is None, reason=\"Cannot import lxml. Is it installed?\")",
        "target": "mypy.test.testreports"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 11,
        "src": "child_package.classes[\"class\"] = etree.Element(\"class\")",
        "target": "mypy.test.testreports.CoberturaReportSuite.test_as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "child_package.classes[\"class\"] = etree.Element(\"class\")",
        "target": "mypy.test.testreports.CoberturaReportSuite.test_as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 19,
        "src": "expected_output, etree.tostring(cobertura_package.as_xml(), pretty_print=True)",
        "target": "mypy.test.testreports.CoberturaReportSuite.test_as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "expected_output, etree.tostring(cobertura_package.as_xml(), pretty_print=True)",
        "target": "mypy.test.testreports.CoberturaReportSuite.test_as_xml"
      }
    ],
    "mypy/test/testsemanal.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 56,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypy.test.testsemanal.SemAnalSuite.run_case"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 45,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypy.test.testsemanal.SemAnalErrorSuite.run_case"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 33,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypy.test.testsemanal.SemAnalSymtableSuite.run_case"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 33,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypy.test.testsemanal.SemAnalTypeInfoSuite.run_case"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__str__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 36,
        "src": "def __str__(self) -> str:",
        "target": "mypy.test.testsemanal.TypeInfoMap.__str__"
      }
    ],
    "mypy/test/testsolve.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 13,
        "src": "def setUp(self) -> None:",
        "target": "mypy.test.testsolve.SolveSuite.setUp"
      }
    ],
    "mypy/test/teststubgen.py": [
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"[_FT: (...) -> Any] (_FT) -> _FT\")",
        "offset": 51,
        "src": "@unittest.skipIf(sys.platform == \"win32\", \"clean up fails on Windows\")",
        "target": "mypy.test.teststubgen"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"[_FT: (...) -> Any] (_FT) -> _FT\")",
        "offset": 27,
        "src": "@unittest.skipIf(sys.platform == \"win32\", \"clean up fails on Windows\")",
        "target": "mypy.test.teststubgen"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"[_FT: (...) -> Any] (_FT) -> _FT\")",
        "offset": 26,
        "src": "@unittest.skipIf(sys.platform == \"win32\", \"clean up fails on Windows\")",
        "target": "mypy.test.teststubgen"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 21,
        "src": "def run(self, result: Any | None = None) -> Any | None:",
        "target": "mypy.test.teststubgen.StubgenCmdLineSuite.run"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 0,
        "src": "def run(self, result: Any | None = None) -> Any | None:",
        "target": "mypy.test.teststubgen.StubgenCmdLineSuite.run"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 2,
        "src": "return super().run(result)",
        "target": "mypy.test.teststubgen.StubgenCmdLineSuite.run"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 16,
        "src": "{\"mypy\", \"mypy.errors\", \"mypy.stubgen\", \"mypy.test\", \"mypy.test.helpers\"}",
        "target": "mypy.test.teststubgen.StubgenCliParseSuite.test_walk_packages"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"[_FT: (...) -> Any] (_FT) -> _FT\")",
        "offset": 436,
        "src": "@unittest.skipIf(sys.platform == \"win32\", \"Tests building the paths common ancestor on *nix\")",
        "target": "mypy.test.teststubgen"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"[_FT: (...) -> Any] (_FT) -> _FT\")",
        "offset": 16,
        "src": "@unittest.skipIf(",
        "target": "mypy.test.teststubgen"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"[_FT: (...) -> Any] (_FT) -> _FT\")",
        "offset": 85,
        "src": "@unittest.skipIf(sys.platform == \"win32\", \"clean up fails on Windows\")",
        "target": "mypy.test.teststubgen"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 1,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypy.test.teststubgen"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"def (self: Any) -> str\")",
        "offset": 458,
        "src": "test.__doc__ = property(lambda self: \"test(arg0: str) -> None\")  # type: ignore[assignment]",
        "target": "mypy.test.teststubgen.StubgencSuite.test_generate_c_function_no_crash_for_non_str_docstring"
      },
      {
        "code": null,
        "column": 32,
        "message": "Error code \"no-any-expr\" not covered by \"type: ignore\" comment",
        "offset": 0,
        "src": "test.__doc__ = property(lambda self: \"test(arg0: str) -> None\")  # type: ignore[assignment]",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"MappingProxyType[str, Any]\")",
        "offset": 30,
        "src": "TestClass.__dict__[\"attribute\"],",
        "target": "mypy.test.teststubgen.StubgencSuite.test_generate_c_property_with_pybind11"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "TestClass.__dict__[\"attribute\"],",
        "target": "mypy.test.teststubgen.StubgencSuite.test_generate_c_property_with_pybind11"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "TestClass.attribute,",
        "target": "mypy.test.teststubgen.StubgencSuite.test_generate_c_property_with_pybind11"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"MappingProxyType[str, Any]\")",
        "offset": 29,
        "src": "TestClass.__dict__[\"attribute\"],",
        "target": "mypy.test.teststubgen.StubgencSuite.test_generate_c_property_with_rw_property"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "TestClass.__dict__[\"attribute\"],",
        "target": "mypy.test.teststubgen.StubgencSuite.test_generate_c_property_with_rw_property"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 173,
        "src": "docstring=getattr(TestClass, \"__doc__\", None),",
        "target": "mypy.test.teststubgen.StubgencSuite.test_generate_c_type_with_overload_shiboken"
      }
    ],
    "mypy/test/teststubtest.py": [
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 189,
        "src": "def collect_cases(fn: Callable[..., Iterator[Case]]) -> FunctionType[..., None]:",
        "target": "mypy.test.teststubtest.collect_cases"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 8,
        "src": "def test(*args: Any, **kwargs: Any) -> None:",
        "target": "mypy.test.teststubtest.collect_cases"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 1,
        "src": "cases = list(fn(*args, **kwargs))",
        "target": "mypy.test.teststubtest.collect_cases"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "cases = list(fn(*args, **kwargs))",
        "target": "mypy.test.teststubtest.collect_cases"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"def (*args: Any, **kwargs: Any) -> None\")",
        "offset": 24,
        "src": "return test",
        "target": "mypy.test.teststubtest.collect_cases"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 4,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_basic_good(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 18,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_types(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 21,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_coroutines(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 9,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_arg_name(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 39,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_arg_kind(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 32,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_default_presence(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 34,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_default_value(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 62,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_static_class_method(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 64,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_arg_mismatch(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 17,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_varargs_varkwargs(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 66,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_overload(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 72,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_property(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 103,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_var(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 63,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_type_alias(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 190,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_enum(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 98,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_decorator(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 16,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_all_at_runtime_not_stub(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 9,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_all_in_stub_not_at_runtime(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 3,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_all_in_stub_different_to_all_at_runtime(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 16,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_missing(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 33,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_missing_no_runtime_all(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 8,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_non_public_1(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 6,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_non_public_2(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 5,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_dunders(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 28,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_not_subclassable(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 10,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_has_runtime_final_decorator(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 256,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_name_mangling(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 58,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_mro(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 31,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_good_literal(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 33,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_bad_literal(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 35,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_special_subtype(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 34,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_runtime_typing_objects(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 31,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_named_tuple(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 35,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_named_tuple_typing_and_collections(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 29,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_type_var(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 14,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_metaclass_match(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 48,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_metaclass_abcmeta(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 13,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_abstract_methods(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 97,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_abstract_properties(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"def (fn: (...) -> Iterator[Case]) -> def (...) -> None\")",
        "offset": 66,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"def (...) -> None\")",
        "offset": 1,
        "src": "def test_type_check_only(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 225,
        "src": "def f(a: int, b: int, *, c: int, d: int = 0, **kwargs: Any) -> None:",
        "target": "mypy.test.teststubtest.StubtestMiscUnit.test_signature"
      },
      {
        "code": "no-any-expr",
        "column": 81,
        "message": "Expression type contains \"Any\" (has type \"def (a: int, b: int, *, c: int, d: int = ..., **kwargs: Any) -> None\")",
        "offset": 4,
        "src": "str(mypy.stubtest.Signature.from_inspect_signature(inspect.signature(f)))",
        "target": "mypy.test.teststubtest.StubtestMiscUnit.test_signature"
      }
    ],
    "mypy/test/testsubtypes.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 11,
        "src": "def setUp(self) -> None:",
        "target": "mypy.test.testsubtypes.SubtypingSuite.setUp"
      }
    ],
    "mypy/test/testtransform.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 28,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypy.test.testtransform.TransformSuite.run_case"
      }
    ],
    "mypy/test/testtypegen.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 24,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypy.test.testtypegen.TypeExportSuite.run_case"
      },
      {
        "code": "truthy-bool",
        "column": 39,
        "message": "Expression has type \"Type\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 41,
        "src": "if node.line != -1 and map[node]:",
        "target": "mypy.test.testtypegen.TypeExportSuite.run_case"
      }
    ],
    "mypy/test/testtypes.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 61,
        "src": "def setUp(self) -> None:",
        "target": "mypy.test.testtypes.TypesSuite.setUp"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 166,
        "src": "def setUp(self) -> None:",
        "target": "mypy.test.testtypes.TypeOpsSuite.setUp"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 486,
        "src": "def setUp(self) -> None:",
        "target": "mypy.test.testtypes.JoinSuite.setUp"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 403,
        "src": "def setUp(self) -> None:",
        "target": "mypy.test.testtypes.MeetSuite.setUp"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 247,
        "src": "def setUp(self) -> None:",
        "target": "mypy.test.testtypes.SameTypeSuite.setUp"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 43,
        "src": "def setUp(self) -> None:",
        "target": "mypy.test.testtypes.RemoveLastKnownValueSuite.setUp"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 42,
        "src": "def setUp(self) -> None:",
        "target": "mypy.test.testtypes.ShallowOverloadMatchingSuite.setUp"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"[_FT: (...) -> Any] (_FT) -> _FT\")",
        "offset": 136,
        "src": "@skipUnless(mypy.expandtype.__file__.endswith(\".py\"), \"Skip for compiled mypy\")",
        "target": "mypy.test.testtypes"
      }
    ],
    "mypy/test/update_data.py": [
      {
        "code": "unreachable",
        "column": 22,
        "message": "Intersection of \"DataSuiteCollector & DataFileCollector\" cannot exist: would have incompatible method signatures",
        "offset": 17,
        "src": "assert isinstance(collector, DataFileCollector)",
        "target": "mypy.test.update_data.update_testcase_output"
      },
      {
        "code": "unreachable",
        "column": 4,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "for fix in _iter_fixes(testcase, actual, incremental_step=incremental_step):",
        "target": "mypy.test.update_data.update_testcase_output"
      },
      {
        "code": "helpful-string",
        "column": 24,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 43,
        "src": "file_path = f\"tmp/{test_item.arg}\"",
        "target": "mypy.test.update_data._iter_fixes"
      }
    ],
    "mypy/test/visitors.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 23,
        "src": "def visit_assignment_stmt(self, s: AssignmentStmt) -> None:",
        "target": "mypy.test.visitors.SkippedNodeSearcher.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_name_expr(self, n: NameExpr) -> None:",
        "target": "mypy.test.visitors.SkippedNodeSearcher.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_int_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_int_expr(self, n: IntExpr) -> None:",
        "target": "mypy.test.visitors.SkippedNodeSearcher.visit_int_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"type\" is not using @override but is overriding a method in class \"mypy.treetransform.TransformVisitor\"",
        "offset": 26,
        "src": "def type(self, type: Type) -> Type:",
        "target": "mypy.test.visitors.TypeAssertTransformVisitor.type"
      }
    ],
    "mypy/traverser.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_mypy_file\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 113,
        "src": "def visit_mypy_file(self, o: MypyFile) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_mypy_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_block\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_block(self, block: Block) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_block"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always true",
        "offset": 5,
        "src": "if o.arguments is not None:",
        "target": "mypy.traverser.TraverserVisitor.visit_func"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 11,
        "src": "def visit_func_def(self, o: FuncDef) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded_func_def\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_overloaded_func_def(self, o: OverloadedFuncDef) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_overloaded_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_class_def(self, o: ClassDef) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_decorator\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 13,
        "src": "def visit_decorator(self, o: Decorator) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_decorator"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_expression_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_expression_stmt(self, o: ExpressionStmt) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_expression_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_assignment_stmt(self, o: AssignmentStmt) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_operator_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_operator_assignment_stmt(self, o: OperatorAssignmentStmt) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_operator_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_while_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_while_stmt(self, o: WhileStmt) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_while_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_for_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_for_stmt(self, o: ForStmt) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_for_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_return_stmt(self, o: ReturnStmt) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_return_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_assert_stmt(self, o: AssertStmt) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_assert_stmt"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always true",
        "offset": 1,
        "src": "if o.expr is not None:",
        "target": "mypy.traverser.TraverserVisitor.visit_assert_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_del_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_del_stmt(self, o: DelStmt) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_del_stmt"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always true",
        "offset": 1,
        "src": "if o.expr is not None:",
        "target": "mypy.traverser.TraverserVisitor.visit_del_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_if_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_if_stmt(self, o: IfStmt) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_if_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raise_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 8,
        "src": "def visit_raise_stmt(self, o: RaiseStmt) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_raise_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_try_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_try_stmt(self, o: TryStmt) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_try_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_with_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 15,
        "src": "def visit_with_stmt(self, o: WithStmt) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_with_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_match_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 8,
        "src": "def visit_match_stmt(self, o: MatchStmt) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_match_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_member_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 9,
        "src": "def visit_member_expr(self, o: MemberExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_member_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_from_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_yield_from_expr(self, o: YieldFromExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_yield_from_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_yield_expr(self, o: YieldExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_yield_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_call_expr(self, o: CallExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_op_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_op_expr(self, o: OpExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_op_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_comparison_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_comparison_expr(self, o: ComparisonExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_comparison_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_slice_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_slice_expr(self, o: SliceExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_slice_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_cast_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 8,
        "src": "def visit_cast_expr(self, o: CastExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_cast_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_type_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_assert_type_expr(self, o: AssertTypeExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_assert_type_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_reveal_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_reveal_expr(self, o: RevealExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_reveal_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 8,
        "src": "def visit_assignment_expr(self, o: AssignmentExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_assignment_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unary_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_unary_expr(self, o: UnaryExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_unary_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_list_expr(self, o: ListExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_list_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_tuple_expr(self, o: TupleExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_dict_expr(self, o: DictExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_dict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_set_expr(self, o: SetExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_set_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_index_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_index_expr(self, o: IndexExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_index_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_generator_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_generator_expr(self, o: GeneratorExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_generator_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dictionary_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 8,
        "src": "def visit_dictionary_comprehension(self, o: DictionaryComprehension) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_dictionary_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 9,
        "src": "def visit_list_comprehension(self, o: ListComprehension) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_list_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_set_comprehension(self, o: SetComprehension) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_set_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_conditional_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_conditional_expr(self, o: ConditionalExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_conditional_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_application\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_type_application(self, o: TypeApplication) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_type_application"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_lambda_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_lambda_expr(self, o: LambdaExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_lambda_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_star_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_star_expr(self, o: StarExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_star_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_await_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_await_expr(self, o: AwaitExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_await_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_super_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_super_expr(self, o: SuperExpr) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_super_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_as_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_as_pattern(self, o: AsPattern) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_as_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_or_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_or_pattern(self, o: OrPattern) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_or_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_value_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_value_pattern(self, o: ValuePattern) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_value_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_sequence_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_sequence_pattern(self, o: SequencePattern) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_sequence_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_starred_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_starred_pattern(self, o: StarredPattern) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_starred_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_mapping_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_mapping_pattern(self, o: MappingPattern) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_mapping_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 8,
        "src": "def visit_class_pattern(self, o: ClassPattern) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_class_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_import(self, o: Import) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_import"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_from\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_import_from(self, o: ImportFrom) -> None:",
        "target": "mypy.traverser.TraverserVisitor.visit_import_from"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_mypy_file\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 21,
        "src": "def visit_mypy_file(self, o: MypyFile) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_mypy_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 7,
        "src": "def visit_import(self, o: Import) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_import"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_from\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_import_from(self, o: ImportFrom) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_import_from"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_all\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_import_all(self, o: ImportAll) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_import_all"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 7,
        "src": "def visit_func_def(self, o: FuncDef) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_overloaded_func_def(self, o: OverloadedFuncDef) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_overloaded_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_class_def(self, o: ClassDef) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_global_decl\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_global_decl(self, o: GlobalDecl) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_global_decl"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_nonlocal_decl\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_nonlocal_decl(self, o: NonlocalDecl) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_nonlocal_decl"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_decorator\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_decorator(self, o: Decorator) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_decorator"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_type_alias(self, o: TypeAlias) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_type_alias"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_block\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 7,
        "src": "def visit_block(self, block: Block) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_block"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_expression_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_expression_stmt(self, o: ExpressionStmt) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_expression_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_assignment_stmt(self, o: AssignmentStmt) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_operator_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_operator_assignment_stmt(self, o: OperatorAssignmentStmt) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_operator_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_while_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_while_stmt(self, o: WhileStmt) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_while_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_for_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_for_stmt(self, o: ForStmt) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_for_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_return_stmt(self, o: ReturnStmt) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_return_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_assert_stmt(self, o: AssertStmt) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_assert_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_del_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_del_stmt(self, o: DelStmt) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_del_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_if_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_if_stmt(self, o: IfStmt) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_if_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_break_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_break_stmt(self, o: BreakStmt) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_break_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_continue_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_continue_stmt(self, o: ContinueStmt) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_continue_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_pass_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_pass_stmt(self, o: PassStmt) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_pass_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raise_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_raise_stmt(self, o: RaiseStmt) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_raise_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_try_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_try_stmt(self, o: TryStmt) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_try_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_with_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_with_stmt(self, o: WithStmt) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_with_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_match_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_match_stmt(self, o: MatchStmt) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_match_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_int_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_int_expr(self, o: IntExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_int_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_str_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_str_expr(self, o: StrExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_str_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_bytes_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_bytes_expr(self, o: BytesExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_bytes_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_float_expr(self, o: FloatExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_float_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_complex_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_complex_expr(self, o: ComplexExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_complex_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_ellipsis\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_ellipsis(self, o: EllipsisExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_ellipsis"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_star_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_star_expr(self, o: StarExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_star_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_name_expr(self, o: NameExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_member_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_member_expr(self, o: MemberExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_member_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_from_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_yield_from_expr(self, o: YieldFromExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_yield_from_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_yield_expr(self, o: YieldExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_yield_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_call_expr(self, o: CallExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_op_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_op_expr(self, o: OpExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_op_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_comparison_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_comparison_expr(self, o: ComparisonExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_comparison_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_cast_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_cast_expr(self, o: CastExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_cast_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_type_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_assert_type_expr(self, o: AssertTypeExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_assert_type_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_reveal_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_reveal_expr(self, o: RevealExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_reveal_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_super_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_super_expr(self, o: SuperExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_super_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_assignment_expr(self, o: AssignmentExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_assignment_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unary_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_unary_expr(self, o: UnaryExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_unary_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_list_expr(self, o: ListExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_list_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dict_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_dict_expr(self, o: DictExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_dict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_tuple_expr(self, o: TupleExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_set_expr(self, o: SetExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_set_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_index_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_index_expr(self, o: IndexExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_index_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_application\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_type_application(self, o: TypeApplication) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_type_application"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_lambda_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_lambda_expr(self, o: LambdaExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_lambda_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_comprehension\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_list_comprehension(self, o: ListComprehension) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_list_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_comprehension\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_set_comprehension(self, o: SetComprehension) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_set_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dictionary_comprehension\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_dictionary_comprehension(self, o: DictionaryComprehension) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_dictionary_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_generator_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_generator_expr(self, o: GeneratorExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_generator_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_slice_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_slice_expr(self, o: SliceExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_slice_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_conditional_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_conditional_expr(self, o: ConditionalExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_conditional_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_type_var_expr(self, o: TypeVarExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_type_var_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_paramspec_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_paramspec_expr(self, o: ParamSpecExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_paramspec_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_type_var_tuple_expr(self, o: TypeVarTupleExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_type_var_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_type_alias_expr(self, o: TypeAliasExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_type_alias_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_namedtuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_namedtuple_expr(self, o: NamedTupleExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_namedtuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_enum_call_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_enum_call_expr(self, o: EnumCallExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_enum_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_typeddict_expr(self, o: TypedDictExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_typeddict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_newtype_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_newtype_expr(self, o: NewTypeExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_newtype_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_await_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_await_expr(self, o: AwaitExpr) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_await_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_as_pattern\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 7,
        "src": "def visit_as_pattern(self, o: AsPattern) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_as_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_or_pattern\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_or_pattern(self, o: OrPattern) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_or_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_value_pattern\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_value_pattern(self, o: ValuePattern) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_value_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_singleton_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_singleton_pattern(self, o: SingletonPattern) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_singleton_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_sequence_pattern\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_sequence_pattern(self, o: SequencePattern) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_sequence_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_starred_pattern\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_starred_pattern(self, o: StarredPattern) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_starred_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_mapping_pattern\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_mapping_pattern(self, o: MappingPattern) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_mapping_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_pattern\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_class_pattern(self, o: ClassPattern) -> None:",
        "target": "mypy.traverser.ExtendedTraverserVisitor.visit_class_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 10,
        "src": "def visit_return_stmt(self, o: ReturnStmt) -> None:",
        "target": "mypy.traverser.ReturnSeeker.visit_return_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 20,
        "src": "def visit_func_def(self, defn: FuncDef) -> None:",
        "target": "mypy.traverser.FuncCollectorBase.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 12,
        "src": "def visit_yield_expr(self, o: YieldExpr) -> None:",
        "target": "mypy.traverser.YieldSeeker.visit_yield_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_from_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 15,
        "src": "def visit_yield_from_expr(self, o: YieldFromExpr) -> None:",
        "target": "mypy.traverser.YieldFromSeeker.visit_yield_from_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_await_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 15,
        "src": "def visit_await_expr(self, o: AwaitExpr) -> None:",
        "target": "mypy.traverser.AwaitSeeker.visit_await_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 15,
        "src": "def visit_return_stmt(self, stmt: ReturnStmt) -> None:",
        "target": "mypy.traverser.ReturnCollector.visit_return_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 16,
        "src": "def visit_assignment_stmt(self, stmt: AssignmentStmt) -> None:",
        "target": "mypy.traverser.YieldCollector.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_yield_expr(self, expr: YieldExpr) -> None:",
        "target": "mypy.traverser.YieldCollector.visit_yield_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 16,
        "src": "def visit_assignment_stmt(self, stmt: AssignmentStmt) -> None:",
        "target": "mypy.traverser.YieldFromCollector.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_from_expr\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 5,
        "src": "def visit_yield_from_expr(self, expr: YieldFromExpr) -> None:",
        "target": "mypy.traverser.YieldFromCollector.visit_yield_from_expr"
      }
    ],
    "mypy/treetransform.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_mypy_file\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 145,
        "src": "def visit_mypy_file(self, node: MypyFile) -> MypyFile:",
        "target": "mypy.treetransform.TransformVisitor.visit_mypy_file"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 10,
        "src": "def visit_import(self, node: Import) -> Import:",
        "target": "mypy.treetransform.TransformVisitor.visit_import"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_from\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_import_from(self, node: ImportFrom) -> ImportFrom:",
        "target": "mypy.treetransform.TransformVisitor.visit_import_from"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_all\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_import_all(self, node: ImportAll) -> ImportAll:",
        "target": "mypy.treetransform.TransformVisitor.visit_import_all"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 16,
        "src": "def visit_func_def(self, node: FuncDef) -> FuncDef:",
        "target": "mypy.treetransform.TransformVisitor.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_lambda_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 44,
        "src": "def visit_lambda_expr(self, node: LambdaExpr) -> LambdaExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_lambda_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded_func_def\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 20,
        "src": "def visit_overloaded_func_def(self, node: OverloadedFuncDef) -> OverloadedFuncDef:",
        "target": "mypy.treetransform.TransformVisitor.visit_overloaded_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 18,
        "src": "def visit_class_def(self, node: ClassDef) -> ClassDef:",
        "target": "mypy.treetransform.TransformVisitor.visit_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_global_decl\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 13,
        "src": "def visit_global_decl(self, node: GlobalDecl) -> GlobalDecl:",
        "target": "mypy.treetransform.TransformVisitor.visit_global_decl"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_nonlocal_decl\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_nonlocal_decl(self, node: NonlocalDecl) -> NonlocalDecl:",
        "target": "mypy.treetransform.TransformVisitor.visit_nonlocal_decl"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_block\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_block(self, node: Block) -> Block:",
        "target": "mypy.treetransform.TransformVisitor.visit_block"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_decorator\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_decorator(self, node: Decorator) -> Decorator:",
        "target": "mypy.treetransform.TransformVisitor.visit_decorator"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_var\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 8,
        "src": "def visit_var(self, node: Var) -> Var:",
        "target": "mypy.treetransform.TransformVisitor.visit_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_expression_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 22,
        "src": "def visit_expression_stmt(self, node: ExpressionStmt) -> ExpressionStmt:",
        "target": "mypy.treetransform.TransformVisitor.visit_expression_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_assignment_stmt(self, node: AssignmentStmt) -> AssignmentStmt:",
        "target": "mypy.treetransform.TransformVisitor.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_operator_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 14,
        "src": "def visit_operator_assignment_stmt(",
        "target": "mypy.treetransform.TransformVisitor.visit_operator_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_while_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_while_stmt(self, node: WhileStmt) -> WhileStmt:",
        "target": "mypy.treetransform.TransformVisitor.visit_while_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_for_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_for_stmt(self, node: ForStmt) -> ForStmt:",
        "target": "mypy.treetransform.TransformVisitor.visit_for_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 12,
        "src": "def visit_return_stmt(self, node: ReturnStmt) -> ReturnStmt:",
        "target": "mypy.treetransform.TransformVisitor.visit_return_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_assert_stmt(self, node: AssertStmt) -> AssertStmt:",
        "target": "mypy.treetransform.TransformVisitor.visit_assert_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_del_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_del_stmt(self, node: DelStmt) -> DelStmt:",
        "target": "mypy.treetransform.TransformVisitor.visit_del_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_if_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_if_stmt(self, node: IfStmt) -> IfStmt:",
        "target": "mypy.treetransform.TransformVisitor.visit_if_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_break_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_break_stmt(self, node: BreakStmt) -> BreakStmt:",
        "target": "mypy.treetransform.TransformVisitor.visit_break_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_continue_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_continue_stmt(self, node: ContinueStmt) -> ContinueStmt:",
        "target": "mypy.treetransform.TransformVisitor.visit_continue_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_pass_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_pass_stmt(self, node: PassStmt) -> PassStmt:",
        "target": "mypy.treetransform.TransformVisitor.visit_pass_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raise_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_raise_stmt(self, node: RaiseStmt) -> RaiseStmt:",
        "target": "mypy.treetransform.TransformVisitor.visit_raise_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_try_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_try_stmt(self, node: TryStmt) -> TryStmt:",
        "target": "mypy.treetransform.TransformVisitor.visit_try_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_with_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 12,
        "src": "def visit_with_stmt(self, node: WithStmt) -> WithStmt:",
        "target": "mypy.treetransform.TransformVisitor.visit_with_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_as_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 11,
        "src": "def visit_as_pattern(self, p: AsPattern) -> AsPattern:",
        "target": "mypy.treetransform.TransformVisitor.visit_as_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_or_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 6,
        "src": "def visit_or_pattern(self, p: OrPattern) -> OrPattern:",
        "target": "mypy.treetransform.TransformVisitor.visit_or_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_value_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_value_pattern(self, p: ValuePattern) -> ValuePattern:",
        "target": "mypy.treetransform.TransformVisitor.visit_value_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_singleton_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_singleton_pattern(self, p: SingletonPattern) -> SingletonPattern:",
        "target": "mypy.treetransform.TransformVisitor.visit_singleton_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_sequence_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_sequence_pattern(self, p: SequencePattern) -> SequencePattern:",
        "target": "mypy.treetransform.TransformVisitor.visit_sequence_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_starred_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_starred_pattern(self, p: StarredPattern) -> StarredPattern:",
        "target": "mypy.treetransform.TransformVisitor.visit_starred_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_mapping_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_mapping_pattern(self, p: MappingPattern) -> MappingPattern:",
        "target": "mypy.treetransform.TransformVisitor.visit_mapping_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_class_pattern(self, p: ClassPattern) -> ClassPattern:",
        "target": "mypy.treetransform.TransformVisitor.visit_class_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_match_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 10,
        "src": "def visit_match_stmt(self, o: MatchStmt) -> MatchStmt:",
        "target": "mypy.treetransform.TransformVisitor.visit_match_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_star_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 8,
        "src": "def visit_star_expr(self, node: StarExpr) -> StarExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_star_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_int_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_int_expr(self, node: IntExpr) -> IntExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_int_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_str_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_str_expr(self, node: StrExpr) -> StrExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_str_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_bytes_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_bytes_expr(self, node: BytesExpr) -> BytesExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_bytes_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_float_expr(self, node: FloatExpr) -> FloatExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_float_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_complex_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_complex_expr(self, node: ComplexExpr) -> ComplexExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_complex_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_ellipsis\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_ellipsis(self, node: EllipsisExpr) -> EllipsisExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_ellipsis"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_name_expr(self, node: NameExpr) -> NameExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_member_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 11,
        "src": "def visit_member_expr(self, node: MemberExpr) -> MemberExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_member_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_from_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 27,
        "src": "def visit_yield_from_expr(self, node: YieldFromExpr) -> YieldFromExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_yield_from_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_yield_expr(self, node: YieldExpr) -> YieldExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_yield_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_await_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_await_expr(self, node: AwaitExpr) -> AwaitExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_await_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_call_expr(self, node: CallExpr) -> CallExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_op_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 9,
        "src": "def visit_op_expr(self, node: OpExpr) -> OpExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_op_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_comparison_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 10,
        "src": "def visit_comparison_expr(self, node: ComparisonExpr) -> ComparisonExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_comparison_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_cast_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_cast_expr(self, node: CastExpr) -> CastExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_cast_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_type_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_assert_type_expr(self, node: AssertTypeExpr) -> AssertTypeExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_assert_type_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_reveal_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_reveal_expr(self, node: RevealExpr) -> RevealExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_reveal_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_super_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 8,
        "src": "def visit_super_expr(self, node: SuperExpr) -> SuperExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_super_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_assignment_expr(self, node: AssignmentExpr) -> AssignmentExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_assignment_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unary_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_unary_expr(self, node: UnaryExpr) -> UnaryExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_unary_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_list_expr(self, node: ListExpr) -> ListExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_list_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_dict_expr(self, node: DictExpr) -> DictExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_dict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_tuple_expr(self, node: TupleExpr) -> TupleExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_set_expr(self, node: SetExpr) -> SetExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_set_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_index_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_index_expr(self, node: IndexExpr) -> IndexExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_index_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_application\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 12,
        "src": "def visit_type_application(self, node: TypeApplication) -> TypeApplication:",
        "target": "mypy.treetransform.TransformVisitor.visit_type_application"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_list_comprehension(self, node: ListComprehension) -> ListComprehension:",
        "target": "mypy.treetransform.TransformVisitor.visit_list_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_set_comprehension(self, node: SetComprehension) -> SetComprehension:",
        "target": "mypy.treetransform.TransformVisitor.visit_set_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dictionary_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_dictionary_comprehension(",
        "target": "mypy.treetransform.TransformVisitor.visit_dictionary_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_generator_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 12,
        "src": "def visit_generator_expr(self, node: GeneratorExpr) -> GeneratorExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_generator_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_slice_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 12,
        "src": "def visit_slice_expr(self, node: SliceExpr) -> SliceExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_slice_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_conditional_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 7,
        "src": "def visit_conditional_expr(self, node: ConditionalExpr) -> ConditionalExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_conditional_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_type_var_expr(self, node: TypeVarExpr) -> TypeVarExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_type_var_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_paramspec_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 10,
        "src": "def visit_paramspec_expr(self, node: ParamSpecExpr) -> ParamSpecExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_paramspec_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 9,
        "src": "def visit_type_var_tuple_expr(self, node: TypeVarTupleExpr) -> TypeVarTupleExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_type_var_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 10,
        "src": "def visit_type_alias_expr(self, node: TypeAliasExpr) -> TypeAliasExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_type_alias_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_newtype_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_newtype_expr(self, node: NewTypeExpr) -> NewTypeExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_newtype_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_namedtuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 5,
        "src": "def visit_namedtuple_expr(self, node: NamedTupleExpr) -> NamedTupleExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_namedtuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_enum_call_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_enum_call_expr(self, node: EnumCallExpr) -> EnumCallExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit_enum_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_typeddict_expr(self, node: TypedDictExpr) -> Node:",
        "target": "mypy.treetransform.TransformVisitor.visit_typeddict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit__promote_expr\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit__promote_expr(self, node: PromoteExpr) -> PromoteExpr:",
        "target": "mypy.treetransform.TransformVisitor.visit__promote_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_temp_node\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 3,
        "src": "def visit_temp_node(self, node: TempNode) -> TempNode:",
        "target": "mypy.treetransform.TransformVisitor.visit_temp_node"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 102,
        "src": "def visit_func_def(self, node: FuncDef) -> None:",
        "target": "mypy.treetransform.FuncMapInitializer.visit_func_def"
      }
    ],
    "mypy/tvar_scope.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__str__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 148,
        "src": "def __str__(self) -> str:",
        "target": "mypy.tvar_scope.TypeVarLikeScope.__str__"
      }
    ],
    "mypy/type_visitor.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 195,
        "src": "def visit_unbound_type(self, t: UnboundType) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_any(self, t: AnyType) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_none_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_none_type(self, t: NoneType) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_none_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_uninhabited_type(self, t: UninhabitedType) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_erased_type(self, t: ErasedType) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_deleted_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_deleted_type(self, t: DeletedType) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_deleted_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_instance(self, t: Instance) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 16,
        "src": "def visit_type_var(self, t: TypeVarType) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_param_spec(self, t: ParamSpecType) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_parameters\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_parameters(self, t: Parameters) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_parameters"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_var_tuple(self, t: TypeVarTupleType) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_partial_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_partial_type(self, t: PartialType) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_partial_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unpack_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_unpack_type(self, t: UnpackType) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_unpack_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_callable_type(self, t: CallableType) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 7,
        "src": "def visit_tuple_type(self, t: TupleType) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_tuple_type"
      },
      {
        "code": "no-any-explicit",
        "column": 12,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 4,
        "src": "cast(Any, t.partial_fallback.accept(self)),",
        "target": "mypy.type_visitor.TypeTranslator.visit_tuple_type"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "cast(Any, t.partial_fallback.accept(self)),",
        "target": "mypy.type_visitor.TypeTranslator.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_typeddict_type(self, t: TypedDictType) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_typeddict_type"
      },
      {
        "code": "no-any-explicit",
        "column": 12,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 6,
        "src": "cast(Any, t.fallback.accept(self)),",
        "target": "mypy.type_visitor.TypeTranslator.visit_typeddict_type"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "cast(Any, t.fallback.accept(self)),",
        "target": "mypy.type_visitor.TypeTranslator.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_literal_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_literal_type(self, t: LiteralType) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_literal_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_union_type(self, t: UnionType) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_union_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_intersection_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_intersection_type(self, t: IntersectionType) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_intersection_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 11,
        "src": "def visit_overloaded(self, t: Overloaded) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_overloaded"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 8,
        "src": "def visit_type_type(self, t: TypeType) -> Type:",
        "target": "mypy.type_visitor.TypeTranslator.visit_type_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> Type:",
        "target": "mypy.type_visitor"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 32,
        "src": "def visit_unbound_type(self, t: UnboundType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_list\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_list(self, t: TypeList) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_type_list"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_argument\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_callable_argument(self, t: CallableArgument) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_callable_argument"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_any(self, t: AnyType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_uninhabited_type(self, t: UninhabitedType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_none_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_none_type(self, t: NoneType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_none_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_erased_type(self, t: ErasedType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_deleted_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_deleted_type(self, t: DeletedType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_deleted_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_var(self, t: TypeVarType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_param_spec(self, t: ParamSpecType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_var_tuple(self, t: TypeVarTupleType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unpack_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_unpack_type(self, t: UnpackType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_unpack_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_parameters\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_parameters(self, t: Parameters) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_parameters"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_partial_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_partial_type(self, t: PartialType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_partial_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_instance(self, t: Instance) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_callable_type(self, t: CallableType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_tuple_type(self, t: TupleType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_typeddict_type(self, t: TypedDictType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raw_expression_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_raw_expression_type(self, t: RawExpressionType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_raw_expression_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_literal_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_literal_type(self, t: LiteralType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_literal_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_union_type(self, t: UnionType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_union_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_intersection_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_intersection_type(self, t: IntersectionType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_intersection_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_overloaded(self, t: Overloaded) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_overloaded"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_type(self, t: TypeType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_type_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_ellipsis_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_ellipsis_type(self, t: EllipsisType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_ellipsis_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_placeholder_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_placeholder_type(self, t: PlaceholderType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_placeholder_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> T:",
        "target": "mypy.type_visitor.TypeQuery.visit_type_alias_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 58,
        "src": "def visit_unbound_type(self, t: UnboundType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_list\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_list(self, t: TypeList) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_type_list"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_argument\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_callable_argument(self, t: CallableArgument) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_callable_argument"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_any(self, t: AnyType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_uninhabited_type(self, t: UninhabitedType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_none_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_none_type(self, t: NoneType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_none_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_erased_type(self, t: ErasedType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_deleted_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_deleted_type(self, t: DeletedType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_deleted_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_var(self, t: TypeVarType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_param_spec(self, t: ParamSpecType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_var_tuple(self, t: TypeVarTupleType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unpack_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_unpack_type(self, t: UnpackType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_unpack_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_parameters\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_parameters(self, t: Parameters) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_parameters"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_partial_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_partial_type(self, t: PartialType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_partial_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_instance(self, t: Instance) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_callable_type(self, t: CallableType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 10,
        "src": "def visit_tuple_type(self, t: TupleType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_typeddict_type(self, t: TypedDictType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raw_expression_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_raw_expression_type(self, t: RawExpressionType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_raw_expression_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_literal_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_literal_type(self, t: LiteralType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_literal_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_union_type(self, t: UnionType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_union_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_intersection_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_intersection_type(self, t: IntersectionType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_intersection_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_overloaded(self, t: Overloaded) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_overloaded"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_type(self, t: TypeType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_type_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_ellipsis_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_ellipsis_type(self, t: EllipsisType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_ellipsis_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_placeholder_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_placeholder_type(self, t: PlaceholderType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_placeholder_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> bool:",
        "target": "mypy.type_visitor.BoolTypeQuery.visit_type_alias_type"
      }
    ],
    "mypy/typeanal.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 270,
        "src": "def visit_unbound_type(self, t: UnboundType, defining_literal: bool = False) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 673,
        "src": "def visit_any(self, t: AnyType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_none_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_none_type(self, t: NoneType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_none_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_uninhabited_type(self, t: UninhabitedType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_erased_type(self, t: ErasedType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_deleted_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_deleted_type(self, t: DeletedType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_deleted_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_list\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_list(self, t: TypeList) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_type_list"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_argument\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 22,
        "src": "def visit_callable_argument(self, t: CallableArgument) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_callable_argument"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_instance(self, t: Instance) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_type_alias_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_type_var(self, t: TypeVarType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_param_spec(self, t: ParamSpecType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_var_tuple(self, t: TypeVarTupleType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unpack_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_unpack_type(self, t: UnpackType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_unpack_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_parameters\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 9,
        "src": "def visit_parameters(self, t: Parameters) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_parameters"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_callable_type(self, t: CallableType, nested: bool = True) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 153,
        "src": "def visit_overloaded(self, t: Overloaded) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_overloaded"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 8,
        "src": "def visit_tuple_type(self, t: TupleType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 44,
        "src": "def visit_typeddict_type(self, t: TypedDictType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raw_expression_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 6,
        "src": "def visit_raw_expression_type(self, t: RawExpressionType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_raw_expression_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_literal_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 47,
        "src": "def visit_literal_type(self, t: LiteralType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_literal_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 15,
        "src": "def visit_union_type(self, t: UnionType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_union_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_intersection_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 10,
        "src": "def visit_intersection_type(self, t: IntersectionType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_intersection_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_partial_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 13,
        "src": "def visit_partial_type(self, t: PartialType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_partial_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_ellipsis_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_ellipsis_type(self, t: EllipsisType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_ellipsis_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 10,
        "src": "def visit_type_type(self, t: TypeType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_type_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_placeholder_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_placeholder_type(self, t: PlaceholderType) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.visit_placeholder_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeguard_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 16,
        "src": "def visit_typeguard_type(self, t: TypeGuardType) -> Instance:",
        "target": "mypy.typeanal.TypeAnalyser.visit_typeguard_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"analyze_callable_args\" is not using @override but is overriding a method in class \"mypy.plugin.TypeAnalyzerPluginInterface\"",
        "offset": 173,
        "src": "def analyze_callable_args(",
        "target": "mypy.typeanal.TypeAnalyser.analyze_callable_args"
      },
      {
        "code": "helpful-string",
        "column": 30,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 21,
        "src": "self.fail(f'Invalid argument constructor \"{found.fullname}\"', arg)",
        "target": "mypy.typeanal.TypeAnalyser.analyze_callable_args"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"analyze_type\" is not using @override but is overriding a method in class \"mypy.plugin.TypeAnalyzerPluginInterface\"",
        "offset": 149,
        "src": "def analyze_type(self, t: Type) -> Type:",
        "target": "mypy.typeanal.TypeAnalyser.analyze_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"fail\" is not using @override but is overriding a method in class \"mypy.plugin.TypeAnalyzerPluginInterface\"",
        "offset": 3,
        "src": "def fail(self, msg: str, ctx: Context, *, code: ErrorCode | None = None) -> None:",
        "target": "mypy.typeanal.TypeAnalyser.fail"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"named_type\" is not using @override but is overriding a method in class \"mypy.plugin.TypeAnalyzerPluginInterface\"",
        "offset": 189,
        "src": "def named_type(",
        "target": "mypy.typeanal.TypeAnalyser.named_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeQuery\"",
        "offset": 358,
        "src": "def visit_unbound_type(self, t: UnboundType) -> TypeVarLikeList:",
        "target": "mypy.typeanal.TypeVarLikeQuery.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeQuery\"",
        "offset": 33,
        "src": "def visit_callable_type(self, t: CallableType) -> TypeVarLikeList:",
        "target": "mypy.typeanal.TypeVarLikeQuery.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 22,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> Type:",
        "target": "mypy.typeanal.DivergingAliasDetector.visit_type_alias_type"
      },
      {
        "code": "helpful-string",
        "column": 36,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 1,
        "src": "assert t.alias is not None, f\"Unfixed type alias {t.type_ref}\"",
        "target": "mypy.typeanal.DivergingAliasDetector.visit_type_alias_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeQuery\"",
        "offset": 64,
        "src": "def visit_any(self, t: AnyType) -> bool:",
        "target": "mypy.typeanal.HasExplicitAny.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeQuery\"",
        "offset": 3,
        "src": "def visit_typeddict_type(self, t: TypedDictType) -> bool:",
        "target": "mypy.typeanal.HasExplicitAny.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 18,
        "src": "def visit_any(self, t: AnyType) -> bool:",
        "target": "mypy.typeanal.HasAnyFromUnimportedType.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 3,
        "src": "def visit_typeddict_type(self, t: TypedDictType) -> bool:",
        "target": "mypy.typeanal.HasAnyFromUnimportedType.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"query_types\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeQuery\"",
        "offset": 16,
        "src": "def query_types(self, types: Iterable[Type]) -> list[Type]:",
        "target": "mypy.typeanal.CollectAllInnerTypesQuery.query_types"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 97,
        "src": "def visit_unbound_type(self, t: UnboundType) -> bool:",
        "target": "mypy.typeanal.HasSelfType.visit_unbound_type"
      }
    ],
    "mypy/typeops.py": [
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always true",
        "offset": 492,
        "src": "if extra_attrs_set is None:",
        "target": "mypy.typeops.make_simplified_union"
      },
      {
        "code": "unreachable",
        "column": 20,
        "message": "Statement is unreachable",
        "offset": 3,
        "src": "extra_attrs_set.add(instance.extra_attrs)",
        "target": "mypy.typeops.make_simplified_union"
      },
      {
        "code": "redundant-expr",
        "column": 16,
        "message": "Condition is always false",
        "offset": 33,
        "src": "isinstance(proper_ti, LiteralType)",
        "target": "mypy.typeops._remove_redundant_union_items"
      },
      {
        "code": "unreachable",
        "column": 20,
        "message": "Right operand of \"and\" is never evaluated",
        "offset": 2,
        "src": "and proper_ti.fallback in unduplicated_literal_fallbacks",
        "target": "mypy.typeops._remove_redundant_union_items"
      },
      {
        "code": "redundant-expr",
        "column": 23,
        "message": "Condition is always true",
        "offset": 42,
        "src": "if unduplicated_literal_fallbacks is None:",
        "target": "mypy.typeops._remove_redundant_union_items"
      },
      {
        "code": "redundant-expr",
        "column": 15,
        "message": "Condition is always true",
        "offset": 54,
        "src": "if extra_attrs_set is None:",
        "target": "mypy.typeops.make_simplified_intersection"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 3,
        "src": "extra_attrs_set.add(instance.extra_attrs)",
        "target": "mypy.typeops.make_simplified_intersection"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 371,
        "src": "sum_types: dict[str, tuple[set[Any], list[int]]] = {}",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"dict[str, (set[Any], list[int])]\")",
        "offset": 6,
        "src": "if fullname not in sum_types:",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, (set[Any], list[int])]\")",
        "offset": 1,
        "src": "sum_types[fullname] = (",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"(set[Any], list[int])\")",
        "offset": 0,
        "src": "sum_types[fullname] = (",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 1,
        "src": "set(typ.fallback.get_enum_values())",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 2,
        "src": "else {True, False},",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"dict[str, (set[Any], list[int])]\")",
        "offset": 3,
        "src": "literals, indexes = sum_types[fullname]",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"(set[Any], list[int])\")",
        "offset": 0,
        "src": "literals, indexes = sum_types[fullname]",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 0,
        "src": "literals, indexes = sum_types[fullname]",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 1,
        "src": "literals.discard(typ.value)",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 2,
        "src": "if not literals:",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 6,
        "src": "proper_types, [(i not in marked_for_deletion) for i in range(len(proper_types))]",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeQuery\"",
        "offset": 44,
        "src": "def visit_type_var(self, t: TypeVarType) -> list[TypeVarLikeType]:",
        "target": "mypy.typeops.TypeVarExtractor.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeQuery\"",
        "offset": 3,
        "src": "def visit_param_spec(self, t: ParamSpecType) -> list[TypeVarLikeType]:",
        "target": "mypy.typeops.TypeVarExtractor.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeQuery\"",
        "offset": 3,
        "src": "def visit_type_var_tuple(self, t: TypeVarTupleType) -> list[TypeVarLikeType]:",
        "target": "mypy.typeops.TypeVarExtractor.visit_type_var_tuple"
      }
    ],
    "mypy/types.py": [
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 46,
        "src": "JsonDict: _TypeAlias = Dict[str, Any]",
        "target": "mypy.types"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 131,
        "src": "_dummy: Final[Any] = object()",
        "target": "mypy.types"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 96,
        "src": "def __repr__(self) -> str:",
        "target": "mypy.types.Type.__repr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"can_be_true_default\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 122,
        "src": "def can_be_true_default(self) -> bool:",
        "target": "mypy.types.TypeAliasType.can_be_true_default"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"can_be_false_default\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 5,
        "src": "def can_be_false_default(self) -> bool:",
        "target": "mypy.types.TypeAliasType.can_be_false_default"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 5,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.TypeAliasType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.TypeAliasType.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.TypeAliasType.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 6,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.TypeAliasType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 5,
        "src": "\"args\": [arg.serialize() for arg in self.args],",
        "target": "mypy.types.TypeAliasType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"args\": [arg.serialize() for arg in self.args],",
        "target": "mypy.types.TypeAliasType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 5,
        "src": "def deserialize(cls, data: JsonDict) -> TypeAliasType:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"TypeAliasType\"",
        "target": "mypy.types.TypeAliasType.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 25,
        "src": "def __repr__(self) -> str:",
        "target": "mypy.types.TypeGuardedType.__repr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 12,
        "src": "def __repr__(self) -> str:",
        "target": "mypy.types.RequiredType.__repr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 6,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.RequiredType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 51,
        "src": "def __repr__(self) -> str:",
        "target": "mypy.types.TypeVarId.__repr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.TypeVarId.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__ne__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 8,
        "src": "def __ne__(self, other: object) -> bool:",
        "target": "mypy.types.TypeVarId.__ne__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.TypeVarId.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 35,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.TypeVarLikeType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 4,
        "src": "def deserialize(cls, data: JsonDict) -> TypeVarLikeType:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def copy_modified(self, *, id: TypeVarId, **kwargs: Any) -> Self:",
        "target": "mypy.types.TypeVarLikeType.copy_modified"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 40,
        "src": "def copy_modified(",
        "target": "mypy.types.TypeVarType.copy_modified"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"copy_modified\" is not using @override but is overriding a method in class \"mypy.types.TypeVarLikeType\"",
        "offset": 0,
        "src": "def copy_modified(",
        "target": "mypy.types.TypeVarType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "values: Bogus[list[Type]] = _dummy,",
        "target": "mypy.types.TypeVarType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "upper_bound: Bogus[Type] = _dummy,",
        "target": "mypy.types.TypeVarType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "default: Bogus[Type] = _dummy,",
        "target": "mypy.types.TypeVarType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "id: Bogus[TypeVarId | int] = _dummy,",
        "target": "mypy.types.TypeVarType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "scopename: Bogus[str | None] = _dummy,",
        "target": "mypy.types.TypeVarType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "id=self.id if id is _dummy else id,",
        "target": "mypy.types.TypeVarType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "values=self.values if values is _dummy else values,",
        "target": "mypy.types.TypeVarType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 59,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "upper_bound=self.upper_bound if upper_bound is _dummy else upper_bound,",
        "target": "mypy.types.TypeVarType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "default=self.default if default is _dummy else default,",
        "target": "mypy.types.TypeVarType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "scopename=self.scopename if scopename == _dummy else scopename,",
        "target": "mypy.types.TypeVarType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "scopename=self.scopename if scopename == _dummy else scopename,",
        "target": "mypy.types.TypeVarType.copy_modified"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.TypeVarType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.TypeVarType.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.TypeVarType.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.TypeVarLikeType\"",
        "offset": 9,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.TypeVarType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "return {",
        "target": "mypy.types.TypeVarType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 6,
        "src": "\"values\": [v.serialize() for v in self.values],",
        "target": "mypy.types.TypeVarType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"values\": [v.serialize() for v in self.values],",
        "target": "mypy.types.TypeVarType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.TypeVarLikeType\"",
        "offset": 8,
        "src": "def deserialize(cls, data: JsonDict) -> TypeVarType:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"TypeVarType\"",
        "target": "mypy.types.TypeVarType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "values=[deserialize_type(v) for v in data[\"values\"]],",
        "target": "mypy.types.TypeVarType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "values=[deserialize_type(v) for v in data[\"values\"]],",
        "target": "mypy.types.TypeVarType.deserialize"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 68,
        "src": "def copy_modified(",
        "target": "mypy.types.ParamSpecType.copy_modified"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"copy_modified\" is not using @override but is overriding a method in class \"mypy.types.TypeVarLikeType\"",
        "offset": 0,
        "src": "def copy_modified(",
        "target": "mypy.types.ParamSpecType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "id: Bogus[TypeVarId | int] = _dummy,",
        "target": "mypy.types.ParamSpecType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "prefix: Bogus[Parameters] = _dummy,",
        "target": "mypy.types.ParamSpecType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "default: Bogus[Type] = _dummy,",
        "target": "mypy.types.ParamSpecType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "id if id is not _dummy else self.id,",
        "target": "mypy.types.ParamSpecType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "default=default if default is not _dummy else self.default,",
        "target": "mypy.types.ParamSpecType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "prefix=prefix if prefix is not _dummy else self.prefix,",
        "target": "mypy.types.ParamSpecType.copy_modified"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.ParamSpecType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 11,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.ParamSpecType.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.ParamSpecType.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.TypeVarLikeType\"",
        "offset": 6,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.ParamSpecType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "return {",
        "target": "mypy.types.ParamSpecType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.TypeVarLikeType\"",
        "offset": 12,
        "src": "def deserialize(cls, data: JsonDict) -> ParamSpecType:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"ParamSpecType\"",
        "target": "mypy.types.ParamSpecType.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.TypeVarLikeType\"",
        "offset": 39,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.TypeVarTupleType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "return {",
        "target": "mypy.types.TypeVarTupleType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.TypeVarLikeType\"",
        "offset": 12,
        "src": "def deserialize(cls, data: JsonDict) -> TypeVarTupleType:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"TypeVarTupleType\"",
        "target": "mypy.types.TypeVarTupleType.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 11,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.TypeVarTupleType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.TypeVarTupleType.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.TypeVarTupleType.__eq__"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "def copy_modified(",
        "target": "mypy.types.TypeVarTupleType.copy_modified"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"copy_modified\" is not using @override but is overriding a method in class \"mypy.types.TypeVarLikeType\"",
        "offset": 0,
        "src": "def copy_modified(",
        "target": "mypy.types.TypeVarTupleType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "id: Bogus[TypeVarId | int] = _dummy,",
        "target": "mypy.types.TypeVarTupleType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "upper_bound: Bogus[Type] = _dummy,",
        "target": "mypy.types.TypeVarTupleType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "default: Bogus[Type] = _dummy,",
        "target": "mypy.types.TypeVarTupleType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "min_len: Bogus[int] = _dummy,",
        "target": "mypy.types.TypeVarTupleType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "self.id if id is _dummy else id,",
        "target": "mypy.types.TypeVarTupleType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "self.upper_bound if upper_bound is _dummy else upper_bound,",
        "target": "mypy.types.TypeVarTupleType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "self.default if default is _dummy else default,",
        "target": "mypy.types.TypeVarTupleType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "min_len=self.min_len if min_len is _dummy else min_len,",
        "target": "mypy.types.TypeVarTupleType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 65,
        "message": "Expression has type \"Any\"",
        "offset": 58,
        "src": "def copy_modified(self, args: Bogus[Sequence[Type] | None] = _dummy) -> UnboundType:",
        "target": "mypy.types.UnboundType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if args is _dummy:",
        "target": "mypy.types.UnboundType.copy_modified"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 13,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.UnboundType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.UnboundType.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.UnboundType.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 11,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.UnboundType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {",
        "target": "mypy.types.UnboundType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 3,
        "src": "\"args\": [a.serialize() for a in self.args],",
        "target": "mypy.types.UnboundType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"args\": [a.serialize() for a in self.args],",
        "target": "mypy.types.UnboundType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 6,
        "src": "def deserialize(cls, data: JsonDict) -> UnboundType:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"UnboundType\"",
        "target": "mypy.types.UnboundType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "[deserialize_type(a) for a in data[\"args\"]],",
        "target": "mypy.types.UnboundType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[deserialize_type(a) for a in data[\"args\"]],",
        "target": "mypy.types.UnboundType.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 31,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.CallableArgument.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 5,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.CallableArgument.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 21,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.TypeList.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 5,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.TypeList.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.TypeList.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.TypeList.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 25,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.UnpackType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.UnpackType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {\".class\": \"UnpackType\", \"type\": self.type.serialize()}",
        "target": "mypy.types.UnpackType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def deserialize(cls, data: JsonDict) -> UnpackType:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"UnpackType\"",
        "target": "mypy.types.UnpackType.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 4,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.UnpackType.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.UnpackType.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 44,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.AnyType.accept"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "original_any: Bogus[AnyType | None] = _dummy,",
        "target": "mypy.types.AnyType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "if original_any is _dummy:",
        "target": "mypy.types.AnyType.copy_modified"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 10,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.AnyType.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.AnyType.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.AnyType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {",
        "target": "mypy.types.AnyType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 8,
        "src": "def deserialize(cls, data: JsonDict) -> AnyType:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == cls.__name__",
        "target": "mypy.types.AnyType.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"describe\" is not using @override but is overriding a method in class \"mypy.types.AnyType\"",
        "offset": 59,
        "src": "def describe(self) -> str:",
        "target": "mypy.types.UntypedType.describe"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"can_be_true_default\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 33,
        "src": "def can_be_true_default(self) -> bool:",
        "target": "mypy.types.UninhabitedType.can_be_true_default"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"can_be_false_default\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def can_be_false_default(self) -> bool:",
        "target": "mypy.types.UninhabitedType.can_be_false_default"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.UninhabitedType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.UninhabitedType.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.UninhabitedType.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.UninhabitedType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {\".class\": \"UninhabitedType\", \"is_noreturn\": self.is_noreturn}",
        "target": "mypy.types.UninhabitedType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def deserialize(cls, data: JsonDict) -> UninhabitedType:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"UninhabitedType\"",
        "target": "mypy.types.UninhabitedType.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"can_be_true_default\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 15,
        "src": "def can_be_true_default(self) -> bool:",
        "target": "mypy.types.NoneType.can_be_true_default"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.NoneType.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.NoneType.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.NoneType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.NoneType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {\".class\": \"NoneType\"}",
        "target": "mypy.types.NoneType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def deserialize(cls, data: JsonDict) -> NoneType:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"NoneType\"",
        "target": "mypy.types.NoneType.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"is_singleton_type\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def is_singleton_type(self) -> bool:",
        "target": "mypy.types.NoneType.is_singleton_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 18,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.ErasedType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 18,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.DeletedType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.DeletedType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {\".class\": \"DeletedType\", \"source\": self.source}",
        "target": "mypy.types.DeletedType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def deserialize(cls, data: JsonDict) -> DeletedType:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"DeletedType\"",
        "target": "mypy.types.DeletedType.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 16,
        "src": "def __repr__(self) -> str:",
        "target": "mypy.types.TypeGuardType.__repr__"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "def copy_modified(self, type_guard: Bogus[Type] = _dummy) -> TypeGuardType:",
        "target": "mypy.types.TypeGuardType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "type_guard if type_guard is not _dummy else self.type_guard,",
        "target": "mypy.types.TypeGuardType.copy_modified"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 45,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.TypeGuardType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 6,
        "src": "def serialize(self) -> JsonDict | str:",
        "target": "mypy.types.TypeGuardType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {",
        "target": "mypy.types.TypeGuardType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 8,
        "src": "def deserialize(cls, data: JsonDict) -> TypeGuardType:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"TypeGuardType\"",
        "target": "mypy.types.TypeGuardType.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 29,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.ExtraAttrs.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.ExtraAttrs.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 8,
        "src": "def __repr__(self) -> str:",
        "target": "mypy.types.ExtraAttrs.__repr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 97,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.Instance.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.Instance.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 5,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.Instance.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 10,
        "src": "def serialize(self) -> JsonDict | str:",
        "target": "mypy.types.Instance.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 7,
        "src": "data[\"args\"] = [arg.serialize() for arg in self.args]",
        "target": "mypy.types.Instance.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 6,
        "src": "def deserialize(cls, data: JsonDict | str) -> Instance:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "assert data[\".class\"] == \"Instance\"",
        "target": "mypy.types.Instance.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 15,
        "src": "args: Bogus[list[Type]] = _dummy,",
        "target": "mypy.types.Instance.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "last_known_value: Bogus[LiteralType | None] = _dummy,",
        "target": "mypy.types.Instance.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "args if args is not _dummy else self.args,",
        "target": "mypy.types.Instance.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "if last_known_value is not _dummy",
        "target": "mypy.types.Instance.copy_modified"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"is_singleton_type\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 19,
        "src": "def is_singleton_type(self) -> bool:",
        "target": "mypy.types.Instance.is_singleton_type"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 125,
        "src": "arg_types: Bogus[Sequence[Type]] = _dummy,",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_kinds: Bogus[list[ArgKind]] = _dummy,",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_names: Bogus[Sequence[str | None]] = _dummy,",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "variables: Bogus[Sequence[TypeVarLikeType]] = _dummy,",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "is_ellipsis_args: Bogus[bool] = _dummy,",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "imprecise_arg_kinds: Bogus[bool] = _dummy,",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "arg_types=arg_types if arg_types is not _dummy else self.arg_types,",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_kinds=arg_kinds if arg_kinds is not _dummy else self.arg_kinds,",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_names=arg_names if arg_names is not _dummy else self.arg_names,",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "is_ellipsis_args if is_ellipsis_args is not _dummy else self.is_ellipsis_args",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "variables=variables if variables is not _dummy else self.variables,",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if imprecise_arg_kinds is not _dummy",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 89,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.Parameters.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.Parameters.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {",
        "target": "mypy.types.Parameters.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 2,
        "src": "\"arg_types\": [t.serialize() for t in self.arg_types],",
        "target": "mypy.types.Parameters.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"arg_types\": [t.serialize() for t in self.arg_types],",
        "target": "mypy.types.Parameters.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"arg_kinds\": [int(x.value) for x in self.arg_kinds],",
        "target": "mypy.types.Parameters.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"arg_kinds\": [int(x.value) for x in self.arg_kinds],",
        "target": "mypy.types.Parameters.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 2,
        "src": "\"variables\": [tv.serialize() for tv in self.variables],",
        "target": "mypy.types.Parameters.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"variables\": [tv.serialize() for tv in self.variables],",
        "target": "mypy.types.Parameters.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 5,
        "src": "def deserialize(cls, data: JsonDict) -> Parameters:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"Parameters\"",
        "target": "mypy.types.Parameters.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "[deserialize_type(t) for t in data[\"arg_types\"]],",
        "target": "mypy.types.Parameters.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[deserialize_type(t) for t in data[\"arg_types\"]],",
        "target": "mypy.types.Parameters.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "[ArgKind(x) for x in data[\"arg_kinds\"]],",
        "target": "mypy.types.Parameters.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[ArgKind(x) for x in data[\"arg_kinds\"]],",
        "target": "mypy.types.Parameters.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "variables=[cast(TypeVarLikeType, deserialize_type(v)) for v in data[\"variables\"]],",
        "target": "mypy.types.Parameters.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "variables=[cast(TypeVarLikeType, deserialize_type(v)) for v in data[\"variables\"]],",
        "target": "mypy.types.Parameters.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 4,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.Parameters.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 10,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.Parameters.__eq__"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 47,
        "src": "def __init__(",
        "target": "mypy.types.CallableType.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | None\")",
        "offset": 52,
        "src": "if def_extras:",
        "target": "mypy.types.CallableType.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "self.def_extras = def_extras",
        "target": "mypy.types.CallableType.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 8,
        "src": "if getattr(definition, \"arguments\", None):",
        "target": "mypy.types.CallableType.__init__"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 13,
        "src": "def copy_modified(",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "arg_types: Bogus[Sequence[Type]] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_kinds: Bogus[list[ArgKind]] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_names: Bogus[Sequence[str | None]] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ret_type: Bogus[Type] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "fallback: Bogus[Instance] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "name: Bogus[str | None] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "definition: Bogus[SymbolNode] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "variables: Bogus[Sequence[TypeVarLikeType]] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "is_ellipsis_args: Bogus[bool] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "implicit: Bogus[bool] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "special_sig: Bogus[str | None] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "from_type_type: Bogus[bool] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "bound_args: Bogus[list[Type | None]] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "def_extras: Bogus[dict[str, Any]] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "type_guard: Bogus[TypeGuardType | None] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "from_concatenate: Bogus[bool] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "imprecise_arg_kinds: Bogus[bool] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "unpack_kwargs: Bogus[bool] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "arg_types=arg_types if arg_types is not _dummy else self.arg_types,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_kinds=arg_kinds if arg_kinds is not _dummy else self.arg_kinds,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_names=arg_names if arg_names is not _dummy else self.arg_names,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ret_type=ret_type if ret_type is not _dummy else self.ret_type,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "fallback=fallback if fallback is not _dummy else self.fallback,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "name=name if name is not _dummy else self.name,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "definition=definition if definition is not _dummy else self.definition,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "variables=variables if variables is not _dummy else self.variables,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "is_ellipsis_args if is_ellipsis_args is not _dummy else self.is_ellipsis_args",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "implicit=implicit if implicit is not _dummy else self.implicit,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "special_sig=special_sig if special_sig is not _dummy else self.special_sig,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "from_type_type=from_type_type if from_type_type is not _dummy else self.from_type_type,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "bound_args=bound_args if bound_args is not _dummy else self.bound_args,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "def_extras=def_extras if def_extras is not _dummy else dict(self.def_extras),",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "def_extras=def_extras if def_extras is not _dummy else dict(self.def_extras),",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "def_extras=def_extras if def_extras is not _dummy else dict(self.def_extras),",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "def_extras=def_extras if def_extras is not _dummy else dict(self.def_extras),",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 72,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "def_extras=def_extras if def_extras is not _dummy else dict(self.def_extras),",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "type_guard=type_guard if type_guard is not _dummy else self.type_guard,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "from_concatenate if from_concatenate is not _dummy else self.from_concatenate",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "if imprecise_arg_kinds is not _dummy",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 64,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "unpack_kwargs=unpack_kwargs if unpack_kwargs is not _dummy else self.unpack_kwargs,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"is_type_obj\" is not using @override but is overriding a method in class \"mypy.types.FunctionLike\"",
        "offset": 30,
        "src": "def is_type_obj(self) -> bool:",
        "target": "mypy.types.CallableType.is_type_obj"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"type_object\" is not using @override but is overriding a method in class \"mypy.types.FunctionLike\"",
        "offset": 5,
        "src": "def type_object(self) -> mypy.nodes.TypeInfo:",
        "target": "mypy.types.CallableType.type_object"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 12,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.CallableType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"with_name\" is not using @override but is overriding a method in class \"mypy.types.FunctionLike\"",
        "offset": 3,
        "src": "def with_name(self, name: str) -> CallableType:",
        "target": "mypy.types.CallableType.with_name"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_name\" is not using @override but is overriding a method in class \"mypy.types.FunctionLike\"",
        "offset": 4,
        "src": "def get_name(self) -> str | None:",
        "target": "mypy.types.CallableType.get_name"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"items\" is not using @override but is overriding a method in class \"mypy.types.FunctionLike\"",
        "offset": 81,
        "src": "def items(self) -> list[CallableType]:",
        "target": "mypy.types"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 118,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.CallableType.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 19,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.CallableType.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 15,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 3,
        "src": "return {",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 2,
        "src": "\"arg_types\": [t.serialize() for t in self.arg_types],",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"arg_types\": [t.serialize() for t in self.arg_types],",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"arg_kinds\": [int(x.value) for x in self.arg_kinds],",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"arg_kinds\": [int(x.value) for x in self.arg_kinds],",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 6,
        "src": "\"variables\": [v.serialize() for v in self.variables],",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"variables\": [v.serialize() for v in self.variables],",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 3,
        "src": "\"bound_args\": [(None if t is None else t.serialize()) for t in self.bound_args],",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"bound_args\": [(None if t is None else t.serialize()) for t in self.bound_args],",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "\"def_extras\": dict(self.def_extras),",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 8,
        "src": "def deserialize(cls, data: JsonDict) -> CallableType:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"CallableType\"",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "[deserialize_type(t) for t in data[\"arg_types\"]],",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[deserialize_type(t) for t in data[\"arg_types\"]],",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "[ArgKind(x) for x in data[\"arg_kinds\"]],",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[ArgKind(x) for x in data[\"arg_kinds\"]],",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "variables=[cast(TypeVarLikeType, deserialize_type(v)) for v in data[\"variables\"]],",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "variables=[cast(TypeVarLikeType, deserialize_type(v)) for v in data[\"variables\"]],",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "bound_args=[(None if t is None else deserialize_type(t)) for t in data[\"bound_args\"]],",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "bound_args=[(None if t is None else deserialize_type(t)) for t in data[\"bound_args\"]],",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 65,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "bound_args=[(None if t is None else deserialize_type(t)) for t in data[\"bound_args\"]],",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"items\" is not using @override but is overriding a method in class \"mypy.types.FunctionLike\"",
        "offset": 38,
        "src": "def items(self) -> list[CallableType]:",
        "target": "mypy.types"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"is_type_obj\" is not using @override but is overriding a method in class \"mypy.types.FunctionLike\"",
        "offset": 6,
        "src": "def is_type_obj(self) -> bool:",
        "target": "mypy.types.Overloaded.is_type_obj"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"type_object\" is not using @override but is overriding a method in class \"mypy.types.FunctionLike\"",
        "offset": 5,
        "src": "def type_object(self) -> mypy.nodes.TypeInfo:",
        "target": "mypy.types.Overloaded.type_object"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"with_name\" is not using @override but is overriding a method in class \"mypy.types.FunctionLike\"",
        "offset": 5,
        "src": "def with_name(self, name: str) -> Overloaded:",
        "target": "mypy.types.Overloaded.with_name"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_name\" is not using @override but is overriding a method in class \"mypy.types.FunctionLike\"",
        "offset": 6,
        "src": "def get_name(self) -> str | None:",
        "target": "mypy.types.Overloaded.get_name"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 8,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.Overloaded.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.Overloaded.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.Overloaded.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 5,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.Overloaded.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {\".class\": \"Overloaded\", \"items\": [t.serialize() for t in self.items]}",
        "target": "mypy.types.Overloaded.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 0,
        "src": "return {\".class\": \"Overloaded\", \"items\": [t.serialize() for t in self.items]}",
        "target": "mypy.types.Overloaded.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "return {\".class\": \"Overloaded\", \"items\": [t.serialize() for t in self.items]}",
        "target": "mypy.types.Overloaded.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def deserialize(cls, data: JsonDict) -> Overloaded:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"Overloaded\"",
        "target": "mypy.types.Overloaded.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return Overloaded([CallableType.deserialize(t) for t in data[\"items\"]])",
        "target": "mypy.types.Overloaded.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return Overloaded([CallableType.deserialize(t) for t in data[\"items\"]])",
        "target": "mypy.types.Overloaded.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_name\" is not using @override but is overriding a method in class \"mypy.types.Overloaded\"",
        "offset": 10,
        "src": "def get_name(self) -> str:",
        "target": "mypy.types.NamedOverloaded.get_name"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Overloaded\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.NamedOverloaded.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {",
        "target": "mypy.types.NamedOverloaded.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 2,
        "src": "\"items\": [t.serialize() for t in self.items],",
        "target": "mypy.types.NamedOverloaded.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"items\": [t.serialize() for t in self.items],",
        "target": "mypy.types.NamedOverloaded.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Overloaded\"",
        "offset": 5,
        "src": "def deserialize(cls, data: JsonDict) -> NamedOverloaded:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"NamedOverloaded\"",
        "target": "mypy.types.NamedOverloaded.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return NamedOverloaded([CallableType.deserialize(t) for t in data[\"items\"]], data[\"_name\"])",
        "target": "mypy.types.NamedOverloaded.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return NamedOverloaded([CallableType.deserialize(t) for t in data[\"items\"]], data[\"_name\"])",
        "target": "mypy.types.NamedOverloaded.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"can_be_true_default\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 35,
        "src": "def can_be_true_default(self) -> bool:",
        "target": "mypy.types.TupleType.can_be_true_default"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"can_be_false_default\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 7,
        "src": "def can_be_false_default(self) -> bool:",
        "target": "mypy.types.TupleType.can_be_false_default"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 28,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.TupleType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.TupleType.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.TupleType.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 5,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.TupleType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {",
        "target": "mypy.types.TupleType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 2,
        "src": "\"items\": [t.serialize() for t in self.items],",
        "target": "mypy.types.TupleType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"items\": [t.serialize() for t in self.items],",
        "target": "mypy.types.TupleType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 6,
        "src": "def deserialize(cls, data: JsonDict) -> TupleType:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"TupleType\"",
        "target": "mypy.types.TupleType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "[deserialize_type(t) for t in data[\"items\"]],",
        "target": "mypy.types.TupleType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[deserialize_type(t) for t in data[\"items\"]],",
        "target": "mypy.types.TupleType.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 109,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.TypedDictType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.TypedDictType.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.TypedDictType.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 14,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.TypedDictType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {",
        "target": "mypy.types.TypedDictType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 2,
        "src": "\"items\": [[n, t.serialize()] for (n, t) in self.items.items()],",
        "target": "mypy.types.TypedDictType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"items\": [[n, t.serialize()] for (n, t) in self.items.items()],",
        "target": "mypy.types.TypedDictType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"items\": [[n, t.serialize()] for (n, t) in self.items.items()],",
        "target": "mypy.types.TypedDictType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"required_keys\": sorted(self.required_keys),",
        "target": "mypy.types.TypedDictType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"required_keys\": sorted(self.required_keys),",
        "target": "mypy.types.TypedDictType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 5,
        "src": "def deserialize(cls, data: JsonDict) -> TypedDictType:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"TypedDictType\"",
        "target": "mypy.types.TypedDictType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "{n: deserialize_type(t) for (n, t) in data[\"items\"]},",
        "target": "mypy.types.TypedDictType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "{n: deserialize_type(t) for (n, t) in data[\"items\"]},",
        "target": "mypy.types.TypedDictType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "{n: deserialize_type(t) for (n, t) in data[\"items\"]},",
        "target": "mypy.types.TypedDictType.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 128,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.RawExpressionType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 5,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.RawExpressionType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.RawExpressionType.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.RawExpressionType.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"can_be_false_default\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 42,
        "src": "def can_be_false_default(self) -> bool:",
        "target": "mypy.types.LiteralType.can_be_false_default"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"can_be_true_default\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def can_be_true_default(self) -> bool:",
        "target": "mypy.types.LiteralType.can_be_true_default"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.LiteralType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.LiteralType.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 5,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.LiteralType.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 33,
        "src": "def serialize(self) -> JsonDict | str:",
        "target": "mypy.types.LiteralType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {",
        "target": "mypy.types.LiteralType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 7,
        "src": "def deserialize(cls, data: JsonDict) -> LiteralType:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"LiteralType\"",
        "target": "mypy.types.LiteralType.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"is_singleton_type\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def is_singleton_type(self) -> bool:",
        "target": "mypy.types.LiteralType.is_singleton_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"can_be_true_default\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 26,
        "src": "def can_be_true_default(self) -> bool:",
        "target": "mypy.types.UnionType.can_be_true_default"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"can_be_false_default\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def can_be_false_default(self) -> bool:",
        "target": "mypy.types.UnionType.can_be_false_default"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.UnionType.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.UnionType.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 27,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.UnionType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 10,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.UnionType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {\".class\": \"UnionType\", \"items\": [t.serialize() for t in self.items]}",
        "target": "mypy.types.UnionType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 0,
        "src": "return {\".class\": \"UnionType\", \"items\": [t.serialize() for t in self.items]}",
        "target": "mypy.types.UnionType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "return {\".class\": \"UnionType\", \"items\": [t.serialize() for t in self.items]}",
        "target": "mypy.types.UnionType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def deserialize(cls, data: JsonDict) -> UnionType:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"UnionType\"",
        "target": "mypy.types.UnionType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return UnionType([deserialize_type(t) for t in data[\"items\"]])",
        "target": "mypy.types.UnionType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return UnionType([deserialize_type(t) for t in data[\"items\"]])",
        "target": "mypy.types.UnionType.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 23,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.IntersectionType.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.IntersectionType.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 26,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.IntersectionType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.IntersectionType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {\".class\": \"IntersectionType\", \"items\": [t.serialize() for t in self.items]}",
        "target": "mypy.types.IntersectionType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 0,
        "src": "return {\".class\": \"IntersectionType\", \"items\": [t.serialize() for t in self.items]}",
        "target": "mypy.types.IntersectionType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "return {\".class\": \"IntersectionType\", \"items\": [t.serialize() for t in self.items]}",
        "target": "mypy.types.IntersectionType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def deserialize(cls, data: JsonDict) -> IntersectionType:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"IntersectionType\"",
        "target": "mypy.types.IntersectionType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return IntersectionType([deserialize_type(t) for t in data[\"items\"]])",
        "target": "mypy.types.IntersectionType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return IntersectionType([deserialize_type(t) for t in data[\"items\"]])",
        "target": "mypy.types.IntersectionType.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 38,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.PartialType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 14,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.EllipsisType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 5,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.EllipsisType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 68,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.TypeType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.TypeType.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.TypeType.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 5,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypy.types.TypeType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return {\".class\": \"TypeType\", \"item\": self.item.serialize()}",
        "target": "mypy.types.TypeType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"deserialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 3,
        "src": "def deserialize(cls, data: JsonDict) -> Type:",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert data[\".class\"] == \"TypeType\"",
        "target": "mypy.types.TypeType.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 27,
        "src": "def accept(self, visitor: TypeVisitor[T]) -> T:",
        "target": "mypy.types.PlaceholderType.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 5,
        "src": "def __hash__(self) -> int:",
        "target": "mypy.types.PlaceholderType.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypy.types.PlaceholderType.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypy.types.Type\"",
        "offset": 5,
        "src": "def serialize(self) -> str:",
        "target": "mypy.types.PlaceholderType.serialize"
      },
      {
        "code": "helpful-string",
        "column": 22,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 3,
        "src": "assert False, f\"Internal error: unresolved placeholder type {self.fullname}\"",
        "target": "mypy.types.PlaceholderType.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 93,
        "src": "def visit_unbound_type(self, t: UnboundType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_list\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 6,
        "src": "def visit_type_list(self, t: TypeList) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_type_list"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_argument\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_callable_argument(self, t: CallableArgument) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_callable_argument"
      },
      {
        "code": "helpful-string",
        "column": 19,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 3,
        "src": "return f\"{t.constructor}({typ})\"",
        "target": "mypy.types.TypeStrVisitor.visit_callable_argument"
      },
      {
        "code": "helpful-string",
        "column": 19,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 2,
        "src": "return f\"{t.constructor}({typ}, {t.name})\"",
        "target": "mypy.types.TypeStrVisitor.visit_callable_argument"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 2,
        "src": "def visit_any(self, t: AnyType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_none_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_none_type(self, t: NoneType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_none_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_uninhabited_type(self, t: UninhabitedType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_erased_type(self, t: ErasedType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_deleted_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_deleted_type(self, t: DeletedType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_deleted_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_instance(self, t: Instance) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 43,
        "src": "def visit_type_var(self, t: TypeVarType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_type_var"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always false",
        "offset": 1,
        "src": "if t.name is None:",
        "target": "mypy.types.TypeStrVisitor.visit_type_var"
      },
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 2,
        "src": "s = f\"`{t.id}\"",
        "target": "mypy.types.TypeStrVisitor.visit_type_var"
      },
      {
        "code": "truthy-bool",
        "column": 30,
        "message": "Member \"upper_bound\" has type \"Type\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 13,
        "src": "if self.id_mapper and t.upper_bound:",
        "target": "mypy.types.TypeStrVisitor.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_param_spec(self, t: ParamSpecType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_param_spec"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always false",
        "offset": 5,
        "src": "if t.name is None:",
        "target": "mypy.types.TypeStrVisitor.visit_param_spec"
      },
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 2,
        "src": "s += f\"`{t.id}\"",
        "target": "mypy.types.TypeStrVisitor.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_parameters\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 10,
        "src": "def visit_parameters(self, t: Parameters) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_parameters"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 29,
        "src": "def visit_type_var_tuple(self, t: TypeVarTupleType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_type_var_tuple"
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always false",
        "offset": 1,
        "src": "if t.name is None:",
        "target": "mypy.types.TypeStrVisitor.visit_type_var_tuple"
      },
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 2,
        "src": "s = f\"`{t.id}\"",
        "target": "mypy.types.TypeStrVisitor.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 8,
        "src": "def visit_callable_type(self, t: CallableType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 108,
        "src": "def visit_overloaded(self, t: Overloaded) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_overloaded"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_tuple_type(self, t: TupleType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_tuple_type"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"partial_fallback\" has type \"Instance\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 3,
        "src": "if t.partial_fallback and t.partial_fallback.type:",
        "target": "mypy.types.TypeStrVisitor.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 8,
        "src": "def visit_typeddict_type(self, t: TypedDictType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_typeddict_type"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"fallback\" has type \"Instance\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 13,
        "src": "if t.fallback and t.fallback.type:",
        "target": "mypy.types.TypeStrVisitor.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raw_expression_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 5,
        "src": "def visit_raw_expression_type(self, t: RawExpressionType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_raw_expression_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_literal_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_literal_type(self, t: LiteralType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_literal_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_union_type(self, t: UnionType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_union_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_intersection_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_intersection_type(self, t: IntersectionType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_intersection_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_partial_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_partial_type(self, t: PartialType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_partial_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_ellipsis_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 8,
        "src": "def visit_ellipsis_type(self, t: EllipsisType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_ellipsis_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_type(self, t: TypeType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_type_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_placeholder_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 5,
        "src": "def visit_placeholder_type(self, t: PlaceholderType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_placeholder_type"
      },
      {
        "code": "helpful-string",
        "column": 15,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 1,
        "src": "return f\"<placeholder {t.fullname}>\"",
        "target": "mypy.types.TypeStrVisitor.visit_placeholder_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 2,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_type_alias_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unpack_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 9,
        "src": "def visit_unpack_type(self, t: UnpackType) -> str:",
        "target": "mypy.types.TypeStrVisitor.visit_unpack_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_placeholder_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 27,
        "src": "def visit_placeholder_type(self, t: PlaceholderType) -> Type:",
        "target": "mypy.types.TrivialSyntheticTypeTranslator.visit_placeholder_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_argument\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_callable_argument(self, t: CallableArgument) -> Type:",
        "target": "mypy.types.TrivialSyntheticTypeTranslator.visit_callable_argument"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_ellipsis_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_ellipsis_type(self, t: EllipsisType) -> Type:",
        "target": "mypy.types.TrivialSyntheticTypeTranslator.visit_ellipsis_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raw_expression_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_raw_expression_type(self, t: RawExpressionType) -> Type:",
        "target": "mypy.types.TrivialSyntheticTypeTranslator.visit_raw_expression_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_list\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_list(self, t: TypeList) -> Type:",
        "target": "mypy.types.TrivialSyntheticTypeTranslator.visit_type_list"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeTranslator\"",
        "offset": 9,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> Type:",
        "target": "mypy.types.UnrollAliasVisitor.visit_type_alias_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.typetraverser.TypeTraverserVisitor\"",
        "offset": 31,
        "src": "def visit_instance(self, typ: Instance) -> None:",
        "target": "mypy.types.LocationSetter.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 11,
        "src": "def visit_type_var(self, t: TypeVarType) -> bool:",
        "target": "mypy.types.HasTypeVars.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 3,
        "src": "def visit_type_var_tuple(self, t: TypeVarTupleType) -> bool:",
        "target": "mypy.types.HasTypeVars.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 3,
        "src": "def visit_param_spec(self, t: ParamSpecType) -> bool:",
        "target": "mypy.types.HasTypeVars.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.BoolTypeQuery\"",
        "offset": 13,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> bool:",
        "target": "mypy.types.HasRecursiveType.visit_type_alias_type"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 130,
        "src": "names: Final = globals().copy()",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 0,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "names.pop(\"NOT_READY\", None)",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 1,
        "src": "deserialize_map: Final = {",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "deserialize_map: Final = {",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "for key, obj in names.items()",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict_items[str, Any]\")",
        "offset": 0,
        "src": "for key, obj in names.items()",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(obj, type) and issubclass(obj, Type) and obj is not Type",
        "target": "mypy.types"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.expandtype.ExpandTypeVisitor\"",
        "offset": 53,
        "src": "def visit_union_type(self, t: UnionType) -> Type:",
        "target": "mypy.types.InstantiateAliasVisitor.visit_union_type"
      }
    ],
    "mypy/types_utils.py": [
      {
        "code": "helpful-string",
        "column": 29,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 64,
        "src": "assert target.alias, f\"Unfixed type alias {target.type_ref}\"",
        "target": "mypy.types_utils.is_invalid_recursive_alias"
      }
    ],
    "mypy/typetraverser.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_any\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 46,
        "src": "def visit_any(self, t: AnyType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_any"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_uninhabited_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_uninhabited_type(self, t: UninhabitedType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_uninhabited_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_none_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_none_type(self, t: NoneType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_none_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_erased_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_erased_type(self, t: ErasedType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_erased_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_deleted_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_deleted_type(self, t: DeletedType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_deleted_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_var(self, t: TypeVarType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_type_var"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_param_spec\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_param_spec(self, t: ParamSpecType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_param_spec"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_parameters\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_parameters(self, t: Parameters) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_parameters"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_var_tuple(self, t: TypeVarTupleType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_type_var_tuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_literal_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_literal_type(self, t: LiteralType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_literal_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_instance\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 5,
        "src": "def visit_instance(self, t: Instance) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_instance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_callable_type(self, t: CallableType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_callable_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_tuple_type(self, t: TupleType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_tuple_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_typeddict_type(self, t: TypedDictType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_typeddict_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_union_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 4,
        "src": "def visit_union_type(self, t: UnionType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_union_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_intersection_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_intersection_type(self, t: IntersectionType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_intersection_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_overloaded(self, t: Overloaded) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_overloaded"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_type(self, t: TypeType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_type_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_callable_argument\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 5,
        "src": "def visit_callable_argument(self, t: CallableArgument) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_callable_argument"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbound_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_unbound_type(self, t: UnboundType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_unbound_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_list\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_list(self, t: TypeList) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_type_list"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_ellipsis_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_ellipsis_type(self, t: EllipsisType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_ellipsis_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_placeholder_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_placeholder_type(self, t: PlaceholderType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_placeholder_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_partial_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_partial_type(self, t: PartialType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_partial_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raw_expression_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.SyntheticTypeVisitor\"",
        "offset": 3,
        "src": "def visit_raw_expression_type(self, t: RawExpressionType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_raw_expression_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 3,
        "src": "def visit_type_alias_type(self, t: TypeAliasType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_type_alias_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unpack_type\" is not using @override but is overriding a method in class \"mypy.type_visitor.TypeVisitor\"",
        "offset": 6,
        "src": "def visit_unpack_type(self, t: UnpackType) -> None:",
        "target": "mypy.typetraverser.TypeTraverserVisitor.visit_unpack_type"
      }
    ],
    "mypy/util.py": [
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 394,
        "src": "new.__dict__ = dict(old.__dict__)",
        "target": "mypy.util.replace_object_state"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "setattr(new, attr, getattr(old, attr))",
        "target": "mypy.util.replace_object_state"
      }
    ],
    "mypy/visitor.py": [
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 364,
        "src": "def visit_mypy_file(self, o: mypy.nodes.MypyFile) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_mypy_file"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "See https://kotlinisland.github.io/basedmypy/_refs.html#code-empty-body for more info",
        "offset": 0,
        "src": "def visit_mypy_file(self, o: mypy.nodes.MypyFile) -> T:",
        "target": null
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 6,
        "src": "def visit_var(self, o: mypy.nodes.Var) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_var"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 5,
        "src": "def visit_import(self, o: mypy.nodes.Import) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_import"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_import(self, o: mypy.nodes.Import) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_import"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_import_from(self, o: mypy.nodes.ImportFrom) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_import_from"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_from\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_import_from(self, o: mypy.nodes.ImportFrom) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_import_from"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_import_all(self, o: mypy.nodes.ImportAll) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_import_all"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_all\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_import_all(self, o: mypy.nodes.ImportAll) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_import_all"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 5,
        "src": "def visit_func_def(self, o: mypy.nodes.FuncDef) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_func_def(self, o: mypy.nodes.FuncDef) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_func_def"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_overloaded_func_def(self, o: mypy.nodes.OverloadedFuncDef) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_overloaded_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded_func_def\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_overloaded_func_def(self, o: mypy.nodes.OverloadedFuncDef) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_overloaded_func_def"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_class_def(self, o: mypy.nodes.ClassDef) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_class_def(self, o: mypy.nodes.ClassDef) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_class_def"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_global_decl(self, o: mypy.nodes.GlobalDecl) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_global_decl"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_global_decl\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_global_decl(self, o: mypy.nodes.GlobalDecl) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_global_decl"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_nonlocal_decl(self, o: mypy.nodes.NonlocalDecl) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_nonlocal_decl"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_nonlocal_decl\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_nonlocal_decl(self, o: mypy.nodes.NonlocalDecl) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_nonlocal_decl"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_decorator(self, o: mypy.nodes.Decorator) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_decorator"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_decorator\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_decorator(self, o: mypy.nodes.Decorator) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_decorator"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_type_alias(self, o: mypy.nodes.TypeAlias) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_type_alias"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_placeholder_node(self, o: mypy.nodes.PlaceholderNode) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_placeholder_node"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 5,
        "src": "def visit_block(self, o: mypy.nodes.Block) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_block"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_block\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_block(self, o: mypy.nodes.Block) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_block"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_expression_stmt(self, o: mypy.nodes.ExpressionStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_expression_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_expression_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_expression_stmt(self, o: mypy.nodes.ExpressionStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_expression_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_assignment_stmt(self, o: mypy.nodes.AssignmentStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_assignment_stmt(self, o: mypy.nodes.AssignmentStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_assignment_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_operator_assignment_stmt(self, o: mypy.nodes.OperatorAssignmentStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_operator_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_operator_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_operator_assignment_stmt(self, o: mypy.nodes.OperatorAssignmentStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_operator_assignment_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_while_stmt(self, o: mypy.nodes.WhileStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_while_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_while_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_while_stmt(self, o: mypy.nodes.WhileStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_while_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_for_stmt(self, o: mypy.nodes.ForStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_for_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_for_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_for_stmt(self, o: mypy.nodes.ForStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_for_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_return_stmt(self, o: mypy.nodes.ReturnStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_return_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_return_stmt(self, o: mypy.nodes.ReturnStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_return_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_assert_stmt(self, o: mypy.nodes.AssertStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_assert_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_assert_stmt(self, o: mypy.nodes.AssertStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_assert_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_del_stmt(self, o: mypy.nodes.DelStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_del_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_del_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_del_stmt(self, o: mypy.nodes.DelStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_del_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_if_stmt(self, o: mypy.nodes.IfStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_if_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_if_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_if_stmt(self, o: mypy.nodes.IfStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_if_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_break_stmt(self, o: mypy.nodes.BreakStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_break_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_break_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_break_stmt(self, o: mypy.nodes.BreakStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_break_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_continue_stmt(self, o: mypy.nodes.ContinueStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_continue_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_continue_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_continue_stmt(self, o: mypy.nodes.ContinueStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_continue_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_pass_stmt(self, o: mypy.nodes.PassStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_pass_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_pass_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_pass_stmt(self, o: mypy.nodes.PassStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_pass_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_raise_stmt(self, o: mypy.nodes.RaiseStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_raise_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raise_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_raise_stmt(self, o: mypy.nodes.RaiseStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_raise_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_try_stmt(self, o: mypy.nodes.TryStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_try_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_try_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_try_stmt(self, o: mypy.nodes.TryStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_try_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_with_stmt(self, o: mypy.nodes.WithStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_with_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_with_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_with_stmt(self, o: mypy.nodes.WithStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_with_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_match_stmt(self, o: mypy.nodes.MatchStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_match_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_match_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 0,
        "src": "def visit_match_stmt(self, o: mypy.nodes.MatchStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_match_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 5,
        "src": "def visit_int_expr(self, o: mypy.nodes.IntExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_int_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_int_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_int_expr(self, o: mypy.nodes.IntExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_int_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_str_expr(self, o: mypy.nodes.StrExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_str_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_str_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_str_expr(self, o: mypy.nodes.StrExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_str_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_bytes_expr(self, o: mypy.nodes.BytesExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_bytes_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_bytes_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_bytes_expr(self, o: mypy.nodes.BytesExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_bytes_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_float_expr(self, o: mypy.nodes.FloatExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_float_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_float_expr(self, o: mypy.nodes.FloatExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_float_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_complex_expr(self, o: mypy.nodes.ComplexExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_complex_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_complex_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_complex_expr(self, o: mypy.nodes.ComplexExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_complex_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_ellipsis(self, o: mypy.nodes.EllipsisExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_ellipsis"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_ellipsis\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_ellipsis(self, o: mypy.nodes.EllipsisExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_ellipsis"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_star_expr(self, o: mypy.nodes.StarExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_star_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_star_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_star_expr(self, o: mypy.nodes.StarExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_star_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_name_expr(self, o: mypy.nodes.NameExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_name_expr(self, o: mypy.nodes.NameExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_name_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_member_expr(self, o: mypy.nodes.MemberExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_member_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_member_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_member_expr(self, o: mypy.nodes.MemberExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_member_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_yield_from_expr(self, o: mypy.nodes.YieldFromExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_yield_from_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_from_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_yield_from_expr(self, o: mypy.nodes.YieldFromExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_yield_from_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_yield_expr(self, o: mypy.nodes.YieldExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_yield_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_yield_expr(self, o: mypy.nodes.YieldExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_yield_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_call_expr(self, o: mypy.nodes.CallExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_call_expr(self, o: mypy.nodes.CallExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_call_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_op_expr(self, o: mypy.nodes.OpExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_op_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_op_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_op_expr(self, o: mypy.nodes.OpExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_op_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_comparison_expr(self, o: mypy.nodes.ComparisonExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_comparison_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_comparison_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_comparison_expr(self, o: mypy.nodes.ComparisonExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_comparison_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_cast_expr(self, o: mypy.nodes.CastExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_cast_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_cast_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_cast_expr(self, o: mypy.nodes.CastExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_cast_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_assert_type_expr(self, o: mypy.nodes.AssertTypeExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_assert_type_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_type_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_assert_type_expr(self, o: mypy.nodes.AssertTypeExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_assert_type_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_reveal_expr(self, o: mypy.nodes.RevealExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_reveal_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_reveal_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_reveal_expr(self, o: mypy.nodes.RevealExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_reveal_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_super_expr(self, o: mypy.nodes.SuperExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_super_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_super_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_super_expr(self, o: mypy.nodes.SuperExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_super_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_assignment_expr(self, o: mypy.nodes.AssignmentExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_assignment_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_assignment_expr(self, o: mypy.nodes.AssignmentExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_assignment_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_unary_expr(self, o: mypy.nodes.UnaryExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_unary_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unary_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_unary_expr(self, o: mypy.nodes.UnaryExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_unary_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_list_expr(self, o: mypy.nodes.ListExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_list_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_list_expr(self, o: mypy.nodes.ListExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_list_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_dict_expr(self, o: mypy.nodes.DictExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_dict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_dict_expr(self, o: mypy.nodes.DictExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_dict_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_tuple_expr(self, o: mypy.nodes.TupleExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_tuple_expr(self, o: mypy.nodes.TupleExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_tuple_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_set_expr(self, o: mypy.nodes.SetExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_set_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_set_expr(self, o: mypy.nodes.SetExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_set_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_index_expr(self, o: mypy.nodes.IndexExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_index_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_index_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_index_expr(self, o: mypy.nodes.IndexExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_index_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_type_application(self, o: mypy.nodes.TypeApplication) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_type_application"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_application\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_type_application(self, o: mypy.nodes.TypeApplication) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_type_application"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_lambda_expr(self, o: mypy.nodes.LambdaExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_lambda_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_lambda_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_lambda_expr(self, o: mypy.nodes.LambdaExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_lambda_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_list_comprehension(self, o: mypy.nodes.ListComprehension) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_list_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_list_comprehension(self, o: mypy.nodes.ListComprehension) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_list_comprehension"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_set_comprehension(self, o: mypy.nodes.SetComprehension) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_set_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_set_comprehension(self, o: mypy.nodes.SetComprehension) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_set_comprehension"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_dictionary_comprehension(self, o: mypy.nodes.DictionaryComprehension) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_dictionary_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dictionary_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_dictionary_comprehension(self, o: mypy.nodes.DictionaryComprehension) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_dictionary_comprehension"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_generator_expr(self, o: mypy.nodes.GeneratorExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_generator_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_generator_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_generator_expr(self, o: mypy.nodes.GeneratorExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_generator_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_slice_expr(self, o: mypy.nodes.SliceExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_slice_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_slice_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_slice_expr(self, o: mypy.nodes.SliceExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_slice_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_conditional_expr(self, o: mypy.nodes.ConditionalExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_conditional_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_conditional_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_conditional_expr(self, o: mypy.nodes.ConditionalExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_conditional_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_type_var_expr(self, o: mypy.nodes.TypeVarExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_type_var_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_type_var_expr(self, o: mypy.nodes.TypeVarExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_type_var_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_paramspec_expr(self, o: mypy.nodes.ParamSpecExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_paramspec_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_paramspec_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_paramspec_expr(self, o: mypy.nodes.ParamSpecExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_paramspec_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_type_var_tuple_expr(self, o: mypy.nodes.TypeVarTupleExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_type_var_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_type_var_tuple_expr(self, o: mypy.nodes.TypeVarTupleExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_type_var_tuple_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_type_alias_expr(self, o: mypy.nodes.TypeAliasExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_type_alias_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_type_alias_expr(self, o: mypy.nodes.TypeAliasExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_type_alias_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_namedtuple_expr(self, o: mypy.nodes.NamedTupleExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_namedtuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_namedtuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_namedtuple_expr(self, o: mypy.nodes.NamedTupleExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_namedtuple_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_enum_call_expr(self, o: mypy.nodes.EnumCallExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_enum_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_enum_call_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_enum_call_expr(self, o: mypy.nodes.EnumCallExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_enum_call_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_typeddict_expr(self, o: mypy.nodes.TypedDictExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_typeddict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_typeddict_expr(self, o: mypy.nodes.TypedDictExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_typeddict_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_newtype_expr(self, o: mypy.nodes.NewTypeExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_newtype_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_newtype_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_newtype_expr(self, o: mypy.nodes.NewTypeExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_newtype_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit__promote_expr(self, o: mypy.nodes.PromoteExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit__promote_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit__promote_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit__promote_expr(self, o: mypy.nodes.PromoteExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit__promote_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_await_expr(self, o: mypy.nodes.AwaitExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_await_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_await_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_await_expr(self, o: mypy.nodes.AwaitExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_await_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_temp_node(self, o: mypy.nodes.TempNode) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_temp_node"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_temp_node\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 0,
        "src": "def visit_temp_node(self, o: mypy.nodes.TempNode) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_temp_node"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 5,
        "src": "def visit_as_pattern(self, o: mypy.patterns.AsPattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_as_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_as_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.PatternVisitor\"",
        "offset": 0,
        "src": "def visit_as_pattern(self, o: mypy.patterns.AsPattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_as_pattern"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_or_pattern(self, o: mypy.patterns.OrPattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_or_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_or_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.PatternVisitor\"",
        "offset": 0,
        "src": "def visit_or_pattern(self, o: mypy.patterns.OrPattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_or_pattern"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_value_pattern(self, o: mypy.patterns.ValuePattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_value_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_value_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.PatternVisitor\"",
        "offset": 0,
        "src": "def visit_value_pattern(self, o: mypy.patterns.ValuePattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_value_pattern"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_singleton_pattern(self, o: mypy.patterns.SingletonPattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_singleton_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_singleton_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.PatternVisitor\"",
        "offset": 0,
        "src": "def visit_singleton_pattern(self, o: mypy.patterns.SingletonPattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_singleton_pattern"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_sequence_pattern(self, o: mypy.patterns.SequencePattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_sequence_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_sequence_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.PatternVisitor\"",
        "offset": 0,
        "src": "def visit_sequence_pattern(self, o: mypy.patterns.SequencePattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_sequence_pattern"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_starred_pattern(self, o: mypy.patterns.StarredPattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_starred_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_starred_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.PatternVisitor\"",
        "offset": 0,
        "src": "def visit_starred_pattern(self, o: mypy.patterns.StarredPattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_starred_pattern"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_mapping_pattern(self, o: mypy.patterns.MappingPattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_mapping_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_mapping_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.PatternVisitor\"",
        "offset": 0,
        "src": "def visit_mapping_pattern(self, o: mypy.patterns.MappingPattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_mapping_pattern"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_class_pattern(self, o: mypy.patterns.ClassPattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_class_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.PatternVisitor\"",
        "offset": 0,
        "src": "def visit_class_pattern(self, o: mypy.patterns.ClassPattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_class_pattern"
      }
    ],
    "mypyc/analysis/attrdefined.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_branch\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 311,
        "src": "def visit_branch(self, op: Branch) -> tuple[set[str], set[str]]:",
        "target": "mypyc.analysis.attrdefined.AttributeMaybeDefinedVisitor.visit_branch"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_return(self, op: Return) -> tuple[set[str], set[str]]:",
        "target": "mypyc.analysis.attrdefined.AttributeMaybeDefinedVisitor.visit_return"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unreachable\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_unreachable(self, op: Unreachable) -> tuple[set[str], set[str]]:",
        "target": "mypyc.analysis.attrdefined.AttributeMaybeDefinedVisitor.visit_unreachable"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_register_op\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 3,
        "src": "def visit_register_op(self, op: RegisterOp) -> tuple[set[str], set[str]]:",
        "target": "mypyc.analysis.attrdefined.AttributeMaybeDefinedVisitor.visit_register_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 7,
        "src": "def visit_assign(self, op: Assign) -> tuple[set[str], set[str]]:",
        "target": "mypyc.analysis.attrdefined.AttributeMaybeDefinedVisitor.visit_assign"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign_multi\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 3,
        "src": "def visit_assign_multi(self, op: AssignMulti) -> tuple[set[str], set[str]]:",
        "target": "mypyc.analysis.attrdefined.AttributeMaybeDefinedVisitor.visit_assign_multi"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_mem\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 3,
        "src": "def visit_set_mem(self, op: SetMem) -> tuple[set[str], set[str]]:",
        "target": "mypyc.analysis.attrdefined.AttributeMaybeDefinedVisitor.visit_set_mem"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_branch\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 27,
        "src": "def visit_branch(self, op: Branch) -> tuple[set[str], set[str]]:",
        "target": "mypyc.analysis.attrdefined.AttributeMaybeUndefinedVisitor.visit_branch"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_return(self, op: Return) -> tuple[set[str], set[str]]:",
        "target": "mypyc.analysis.attrdefined.AttributeMaybeUndefinedVisitor.visit_return"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unreachable\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_unreachable(self, op: Unreachable) -> tuple[set[str], set[str]]:",
        "target": "mypyc.analysis.attrdefined.AttributeMaybeUndefinedVisitor.visit_unreachable"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_register_op\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 3,
        "src": "def visit_register_op(self, op: RegisterOp) -> tuple[set[str], set[str]]:",
        "target": "mypyc.analysis.attrdefined.AttributeMaybeUndefinedVisitor.visit_register_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 7,
        "src": "def visit_assign(self, op: Assign) -> tuple[set[str], set[str]]:",
        "target": "mypyc.analysis.attrdefined.AttributeMaybeUndefinedVisitor.visit_assign"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign_multi\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 3,
        "src": "def visit_assign_multi(self, op: AssignMulti) -> tuple[set[str], set[str]]:",
        "target": "mypyc.analysis.attrdefined.AttributeMaybeUndefinedVisitor.visit_assign_multi"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_mem\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 3,
        "src": "def visit_set_mem(self, op: SetMem) -> tuple[set[str], set[str]]:",
        "target": "mypyc.analysis.attrdefined.AttributeMaybeUndefinedVisitor.visit_set_mem"
      }
    ],
    "mypyc/analysis/dataflow.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__str__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 74,
        "src": "def __str__(self) -> str:",
        "target": "mypyc.analysis.dataflow.CFG.__str__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__str__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 91,
        "src": "def __str__(self) -> str:",
        "target": "mypyc.analysis.dataflow.AnalysisResult.__str__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_goto\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 8,
        "src": "def visit_goto(self, op: Goto) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_goto"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 8,
        "src": "def visit_assign(self, op: Assign) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign_multi\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 4,
        "src": "def visit_assign_multi(self, op: AssignMulti) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_mem\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 4,
        "src": "def visit_set_mem(self, op: SetMem) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_call(self, op: Call) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_call"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_method_call\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_method_call(self, op: MethodCall) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_method_call"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_error_value\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_load_error_value(self, op: LoadErrorValue) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_load_error_value"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_literal\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_load_literal(self, op: LoadLiteral) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_load_literal"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_get_attr\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_get_attr(self, op: GetAttr) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_get_attr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_attr\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_set_attr(self, op: SetAttr) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_set_attr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_static\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_load_static(self, op: LoadStatic) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_load_static"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_init_static\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_init_static(self, op: InitStatic) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_init_static"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_get\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_tuple_get(self, op: TupleGet) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_tuple_get"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_set\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_tuple_set(self, op: TupleSet) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_tuple_set"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_box\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_box(self, op: Box) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_box"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbox\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_unbox(self, op: Unbox) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_unbox"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_cast\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_cast(self, op: Cast) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_cast"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raise_standard_error\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_raise_standard_error(self, op: RaiseStandardError) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_raise_standard_error"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_c\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_call_c(self, op: CallC) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_call_c"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_truncate\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_truncate(self, op: Truncate) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_truncate"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_extend\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_extend(self, op: Extend) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_extend"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_global\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_load_global(self, op: LoadGlobal) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_load_global"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_int_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_int_op(self, op: IntOp) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_int_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_float_op(self, op: FloatOp) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_float_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_neg\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_float_neg(self, op: FloatNeg) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_float_neg"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_comparison_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_comparison_op(self, op: ComparisonOp) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_comparison_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_comparison_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_float_comparison_op(self, op: FloatComparisonOp) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_float_comparison_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_mem\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_load_mem(self, op: LoadMem) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_load_mem"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_get_element_ptr\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_get_element_ptr(self, op: GetElementPtr) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_get_element_ptr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_address\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_load_address(self, op: LoadAddress) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_load_address"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_keep_alive\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_keep_alive(self, op: KeepAlive) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_keep_alive"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unborrow\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_unborrow(self, op: Unborrow) -> GenAndKill[T]:",
        "target": "mypyc.analysis.dataflow.BaseAnalysisVisitor.visit_unborrow"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_branch\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 23,
        "src": "def visit_branch(self, op: Branch) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.DefinedVisitor.visit_branch"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_return(self, op: Return) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.DefinedVisitor.visit_return"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unreachable\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_unreachable(self, op: Unreachable) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.DefinedVisitor.visit_unreachable"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_register_op\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 3,
        "src": "def visit_register_op(self, op: RegisterOp) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.DefinedVisitor.visit_register_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 3,
        "src": "def visit_assign(self, op: Assign) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.DefinedVisitor.visit_assign"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign_multi\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 7,
        "src": "def visit_assign_multi(self, op: AssignMulti) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.DefinedVisitor.visit_assign_multi"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_mem\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 4,
        "src": "def visit_set_mem(self, op: SetMem) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.DefinedVisitor.visit_set_mem"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_branch\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 52,
        "src": "def visit_branch(self, op: Branch) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.BorrowedArgumentsVisitor.visit_branch"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_return(self, op: Return) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.BorrowedArgumentsVisitor.visit_return"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unreachable\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_unreachable(self, op: Unreachable) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.BorrowedArgumentsVisitor.visit_unreachable"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_register_op\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 3,
        "src": "def visit_register_op(self, op: RegisterOp) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.BorrowedArgumentsVisitor.visit_register_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 3,
        "src": "def visit_assign(self, op: Assign) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.BorrowedArgumentsVisitor.visit_assign"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign_multi\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 5,
        "src": "def visit_assign_multi(self, op: AssignMulti) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.BorrowedArgumentsVisitor.visit_assign_multi"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_mem\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 3,
        "src": "def visit_set_mem(self, op: SetMem) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.BorrowedArgumentsVisitor.visit_set_mem"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_branch\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 23,
        "src": "def visit_branch(self, op: Branch) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.UndefinedVisitor.visit_branch"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_return(self, op: Return) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.UndefinedVisitor.visit_return"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unreachable\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_unreachable(self, op: Unreachable) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.UndefinedVisitor.visit_unreachable"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_register_op\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 3,
        "src": "def visit_register_op(self, op: RegisterOp) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.UndefinedVisitor.visit_register_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 3,
        "src": "def visit_assign(self, op: Assign) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.UndefinedVisitor.visit_assign"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign_multi\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 3,
        "src": "def visit_assign_multi(self, op: AssignMulti) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.UndefinedVisitor.visit_assign_multi"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_mem\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 3,
        "src": "def visit_set_mem(self, op: SetMem) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.UndefinedVisitor.visit_set_mem"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_branch\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 34,
        "src": "def visit_branch(self, op: Branch) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.LivenessVisitor.visit_branch"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_return(self, op: Return) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.LivenessVisitor.visit_return"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unreachable\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 6,
        "src": "def visit_unreachable(self, op: Unreachable) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.LivenessVisitor.visit_unreachable"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_register_op\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 3,
        "src": "def visit_register_op(self, op: RegisterOp) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.LivenessVisitor.visit_register_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 7,
        "src": "def visit_assign(self, op: Assign) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.LivenessVisitor.visit_assign"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign_multi\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 3,
        "src": "def visit_assign_multi(self, op: AssignMulti) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.LivenessVisitor.visit_assign_multi"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_mem\" is not using @override but is overriding a method in class \"mypyc.analysis.dataflow.BaseAnalysisVisitor\"",
        "offset": 3,
        "src": "def visit_set_mem(self, op: SetMem) -> GenAndKill[Value]:",
        "target": "mypyc.analysis.dataflow.LivenessVisitor.visit_set_mem"
      },
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always true",
        "offset": 98,
        "src": "if new_before is None:",
        "target": "mypyc.analysis.dataflow.run_analysis"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 2,
        "src": "elif kind == MAYBE_ANALYSIS:",
        "target": "mypyc.analysis.dataflow.run_analysis"
      }
    ],
    "mypyc/analysis/ircheck.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 77,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypyc.analysis.ircheck.FnError.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 5,
        "src": "def __repr__(self) -> str:",
        "target": "mypyc.analysis.ircheck.FnError.__repr__"
      },
      {
        "code": "helpful-string",
        "column": 15,
        "message": "The type \"mypyc.ir.ops.Op\" doesn't define a __format__, __str__ or __repr__ method",
        "offset": 1,
        "src": "return f\"FnError(source={self.source}, desc={self.desc})\"",
        "target": "mypyc.analysis.ircheck.FnError.__repr__"
      },
      {
        "code": "helpful-string",
        "column": 15,
        "message": "The type \"mypyc.ir.ops.BasicBlock\" doesn't define a __format__, __str__ or __repr__ method",
        "offset": 0,
        "src": "return f\"FnError(source={self.source}, desc={self.desc})\"",
        "target": "mypyc.analysis.ircheck.FnError.__repr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_goto\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 155,
        "src": "def visit_goto(self, op: Goto) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_goto"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_branch\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_branch(self, op: Branch) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_branch"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_return(self, op: Return) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_return"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unreachable\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_unreachable(self, op: Unreachable) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_unreachable"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 5,
        "src": "def visit_assign(self, op: Assign) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_assign"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign_multi\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_assign_multi(self, op: AssignMulti) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_assign_multi"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_error_value\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 5,
        "src": "def visit_load_error_value(self, op: LoadErrorValue) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_load_error_value"
      },
      {
        "code": "helpful-string",
        "column": 30,
        "message": "The type \"type[object]\" doesn't define a __format__, __str__ or __repr__ method",
        "offset": 9,
        "src": "self.fail(op, f\"Invalid type for item of tuple literal: {type(x)})\")",
        "target": "mypyc.analysis.ircheck.OpChecker.check_tuple_items_valid_literals"
      },
      {
        "code": "helpful-string",
        "column": 30,
        "message": "The type \"type[object]\" doesn't define a __format__, __str__ or __repr__ method",
        "offset": 11,
        "src": "self.fail(op, f\"Invalid type for item of frozenset literal: {type(x)})\")",
        "target": "mypyc.analysis.ircheck.OpChecker.check_frozenset_items_valid_literals"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_literal\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 2,
        "src": "def visit_load_literal(self, op: LoadLiteral) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_load_literal"
      },
      {
        "code": "redundant-expr",
        "column": 13,
        "message": "Condition is always true",
        "offset": 19,
        "src": "elif isinstance(op.value, frozenset):",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_load_literal"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_get_attr\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 15,
        "src": "def visit_get_attr(self, op: GetAttr) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_get_attr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_attr\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 4,
        "src": "def visit_set_attr(self, op: SetAttr) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_set_attr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_static\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 5,
        "src": "def visit_load_static(self, op: LoadStatic) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_load_static"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_init_static\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_init_static(self, op: InitStatic) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_init_static"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_get\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_tuple_get(self, op: TupleGet) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_tuple_get"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_set\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 4,
        "src": "def visit_tuple_set(self, op: TupleSet) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_tuple_set"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_inc_ref\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 4,
        "src": "def visit_inc_ref(self, op: IncRef) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_inc_ref"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dec_ref\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 4,
        "src": "def visit_dec_ref(self, op: DecRef) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_dec_ref"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 4,
        "src": "def visit_call(self, op: Call) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_call"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_method_call\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 6,
        "src": "def visit_method_call(self, op: MethodCall) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_method_call"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_cast\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 15,
        "src": "def visit_cast(self, op: Cast) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_cast"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_box\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_box(self, op: Box) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_box"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbox\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_unbox(self, op: Unbox) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_unbox"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raise_standard_error\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_raise_standard_error(self, op: RaiseStandardError) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_raise_standard_error"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_c\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_call_c(self, op: CallC) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_call_c"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_truncate\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_truncate(self, op: Truncate) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_truncate"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_extend\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_extend(self, op: Extend) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_extend"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_global\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_load_global(self, op: LoadGlobal) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_load_global"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_int_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_int_op(self, op: IntOp) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_int_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_comparison_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 4,
        "src": "def visit_comparison_op(self, op: ComparisonOp) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_comparison_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 5,
        "src": "def visit_float_op(self, op: FloatOp) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_float_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_neg\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 4,
        "src": "def visit_float_neg(self, op: FloatNeg) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_float_neg"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_comparison_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_float_comparison_op(self, op: FloatComparisonOp) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_float_comparison_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_mem\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 4,
        "src": "def visit_load_mem(self, op: LoadMem) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_load_mem"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_mem\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_set_mem(self, op: SetMem) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_set_mem"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_get_element_ptr\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_get_element_ptr(self, op: GetElementPtr) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_get_element_ptr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_address\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_load_address(self, op: LoadAddress) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_load_address"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_keep_alive\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_keep_alive(self, op: KeepAlive) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_keep_alive"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unborrow\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_unborrow(self, op: Unborrow) -> None:",
        "target": "mypyc.analysis.ircheck.OpChecker.visit_unborrow"
      }
    ],
    "mypyc/analysis/selfleaks.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_goto\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 67,
        "src": "def visit_goto(self, op: Goto) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_goto"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_branch\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_branch(self, op: Branch) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_branch"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_return(self, op: Return) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_return"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unreachable\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 5,
        "src": "def visit_unreachable(self, op: Unreachable) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_unreachable"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_assign(self, op: Assign) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_assign"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign_multi\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 5,
        "src": "def visit_assign_multi(self, op: AssignMulti) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_assign_multi"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_mem\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_set_mem(self, op: SetMem) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_set_mem"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_call(self, op: Call) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_call"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_method_call\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 10,
        "src": "def visit_method_call(self, op: MethodCall) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_method_call"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_error_value\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_load_error_value(self, op: LoadErrorValue) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_load_error_value"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_literal\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_load_literal(self, op: LoadLiteral) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_load_literal"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_get_attr\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_get_attr(self, op: GetAttr) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_get_attr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_attr\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 7,
        "src": "def visit_set_attr(self, op: SetAttr) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_set_attr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_static\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 7,
        "src": "def visit_load_static(self, op: LoadStatic) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_load_static"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_init_static\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_init_static(self, op: InitStatic) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_init_static"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_get\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_tuple_get(self, op: TupleGet) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_tuple_get"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_set\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_tuple_set(self, op: TupleSet) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_tuple_set"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_box\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_box(self, op: Box) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_box"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbox\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_unbox(self, op: Unbox) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_unbox"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_cast\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_cast(self, op: Cast) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_cast"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raise_standard_error\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_raise_standard_error(self, op: RaiseStandardError) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_raise_standard_error"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_c\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_call_c(self, op: CallC) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_call_c"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_truncate\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_truncate(self, op: Truncate) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_truncate"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_extend\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_extend(self, op: Extend) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_extend"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_global\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_load_global(self, op: LoadGlobal) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_load_global"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_int_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_int_op(self, op: IntOp) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_int_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_comparison_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_comparison_op(self, op: ComparisonOp) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_comparison_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_float_op(self, op: FloatOp) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_float_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_neg\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_float_neg(self, op: FloatNeg) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_float_neg"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_comparison_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_float_comparison_op(self, op: FloatComparisonOp) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_float_comparison_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_mem\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_load_mem(self, op: LoadMem) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_load_mem"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_get_element_ptr\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_get_element_ptr(self, op: GetElementPtr) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_get_element_ptr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_address\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_load_address(self, op: LoadAddress) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_load_address"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_keep_alive\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_keep_alive(self, op: KeepAlive) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_keep_alive"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unborrow\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_unborrow(self, op: Unborrow) -> GenAndKill:",
        "target": "mypyc.analysis.selfleaks.SelfLeakedVisitor.visit_unborrow"
      }
    ],
    "mypyc/build.py": [
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 114,
        "src": "options.platform,",
        "target": "mypyc.build.emit_messages"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 292,
        "src": "def mypyc_build(",
        "target": "mypyc.build.mypyc_build"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 28,
        "src": "if not skip_cgen_input:",
        "target": "mypyc.build.mypyc_build"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "group_cfiles = skip_cgen_input",
        "target": "mypyc.build.mypyc_build"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 19,
        "src": "def mypycify(",
        "target": "mypyc.build.mypycify"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 70,
        "src": "skip_cgen_input=skip_cgen_input,",
        "target": "mypyc.build.mypycify"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 9,
        "src": "compiler: Any = ccompiler.new_compiler()",
        "target": "mypyc.build.mypycify"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "sysconfig.customize_compiler(compiler)",
        "target": "mypyc.build.mypycify"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "if compiler.compiler_type == \"unix\":",
        "target": "mypyc.build.mypycify"
      },
      {
        "code": "no-any-expr",
        "column": 9,
        "message": "Expression has type \"Any\"",
        "offset": 17,
        "src": "elif compiler.compiler_type == \"msvc\":",
        "target": "mypyc.build.mypycify"
      }
    ],
    "mypyc/codegen/emit.py": [
      {
        "code": "possibly-undefined",
        "column": 22,
        "message": "Name \"item_type\" may be undefined",
        "offset": 457,
        "src": "if isinstance(item_type, RTuple):",
        "target": "mypyc.codegen.emit"
      }
    ],
    "mypyc/codegen/emitclass.py": [
      {
        "code": "helpful-string",
        "column": 41,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 253,
        "src": "fields[f\"tp_{table_name}\"] = f\"&{table_struct_name}\"",
        "target": "mypyc.codegen.emitclass.generate_class"
      },
      {
        "code": "possibly-undefined",
        "column": 54,
        "message": "Name \"shadow_vtable_name\" may be undefined",
        "offset": 110,
        "src": "cl, setup_name, defaults_fn, vtable_name, shadow_vtable_name, emitter",
        "target": "mypyc.codegen.emitclass"
      }
    ],
    "mypyc/codegen/emitfunc.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_goto\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 195,
        "src": "def visit_goto(self, op: Goto) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_goto"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_branch\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 4,
        "src": "def visit_branch(self, op: Branch) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_branch"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 52,
        "src": "def visit_return(self, op: Return) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_return"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_set\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 4,
        "src": "def visit_tuple_set(self, op: TupleSet) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_tuple_set"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 10,
        "src": "def visit_assign(self, op: Assign) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_assign"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign_multi\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 12,
        "src": "def visit_assign_multi(self, op: AssignMulti) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_assign_multi"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_error_value\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 16,
        "src": "def visit_load_error_value(self, op: LoadErrorValue) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_load_error_value"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_literal\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 9,
        "src": "def visit_load_literal(self, op: LoadLiteral) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_load_literal"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_get_attr\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 45,
        "src": "def visit_get_attr(self, op: GetAttr) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_get_attr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_attr\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 73,
        "src": "def visit_set_attr(self, op: SetAttr) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_set_attr"
      },
      {
        "code": "possibly-undefined",
        "column": 20,
        "message": "Name \"dest\" may be undefined",
        "offset": 20,
        "src": "dest,",
        "target": "mypyc.codegen.emitfunc"
      },
      {
        "code": "possibly-undefined",
        "column": 39,
        "message": "Name \"dest\" may be undefined",
        "offset": 33,
        "src": "self.emitter.emit_line(f\"{dest} = 1;\")",
        "target": "mypyc.codegen.emitfunc"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_static\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 8,
        "src": "def visit_load_static(self, op: LoadStatic) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_load_static"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_init_static\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 8,
        "src": "def visit_init_static(self, op: InitStatic) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_init_static"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_get\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 9,
        "src": "def visit_tuple_get(self, op: TupleGet) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_tuple_get"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 13,
        "src": "def visit_call(self, op: Call) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_call"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_method_call\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 8,
        "src": "def visit_method_call(self, op: MethodCall) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_method_call"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_inc_ref\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 47,
        "src": "def visit_inc_ref(self, op: IncRef) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_inc_ref"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dec_ref\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 4,
        "src": "def visit_dec_ref(self, op: DecRef) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_dec_ref"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_box\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 4,
        "src": "def visit_box(self, op: Box) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_box"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_cast\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_cast(self, op: Cast) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_cast"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbox\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 25,
        "src": "def visit_unbox(self, op: Unbox) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_unbox"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unreachable\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_unreachable(self, op: Unreachable) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_unreachable"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raise_standard_error\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_raise_standard_error(self, op: RaiseStandardError) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_raise_standard_error"
      },
      {
        "code": "redundant-expr",
        "column": 17,
        "message": "Condition is always true",
        "offset": 6,
        "src": "elif isinstance(op.value, Value):",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_raise_standard_error"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_c\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 12,
        "src": "def visit_call_c(self, op: CallC) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_call_c"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_truncate\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 8,
        "src": "def visit_truncate(self, op: Truncate) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_truncate"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_extend\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 6,
        "src": "def visit_extend(self, op: Extend) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_extend"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_global\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 9,
        "src": "def visit_load_global(self, op: LoadGlobal) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_load_global"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_int_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 4,
        "src": "def visit_int_op(self, op: IntOp) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_int_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_comparison_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 10,
        "src": "def visit_comparison_op(self, op: ComparisonOp) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_comparison_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 22,
        "src": "def visit_float_op(self, op: FloatOp) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_float_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_neg\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 10,
        "src": "def visit_float_neg(self, op: FloatNeg) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_float_neg"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_comparison_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 5,
        "src": "def visit_float_comparison_op(self, op: FloatComparisonOp) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_float_comparison_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_mem\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 6,
        "src": "def visit_load_mem(self, op: LoadMem) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_load_mem"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_mem\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 7,
        "src": "def visit_set_mem(self, op: SetMem) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_set_mem"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_get_element_ptr\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 9,
        "src": "def visit_get_element_ptr(self, op: GetElementPtr) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_get_element_ptr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_address\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 12,
        "src": "def visit_load_address(self, op: LoadAddress) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_load_address"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_keep_alive\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 12,
        "src": "def visit_keep_alive(self, op: KeepAlive) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_keep_alive"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unborrow\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 4,
        "src": "def visit_unborrow(self, op: Unborrow) -> None:",
        "target": "mypyc.codegen.emitfunc.FunctionEmitterVisitor.visit_unborrow"
      }
    ],
    "mypyc/codegen/emitmodule.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"report_config_data\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 123,
        "src": "def report_config_data(self, ctx: ReportConfigContext) -> tuple[str | None, list[str]] | None:",
        "target": "mypyc.codegen.emitmodule.MypycPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 27,
        "src": "ir_data = json.loads(ir_json)",
        "target": "mypyc.codegen.emitmodule.MypycPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if compute_hash(meta_json) != ir_data[\"meta_hash\"]:",
        "target": "mypyc.codegen.emitmodule.MypycPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if compute_hash(meta_json) != ir_data[\"meta_hash\"]:",
        "target": "mypyc.codegen.emitmodule.MypycPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "for path, hash in ir_data[\"src_hashes\"].items():",
        "target": "mypyc.codegen.emitmodule.MypycPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for path, hash in ir_data[\"src_hashes\"].items():",
        "target": "mypyc.codegen.emitmodule.MypycPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "if hash != real_hash:",
        "target": "mypyc.codegen.emitmodule.MypycPlugin.report_config_data"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_additional_deps\" is not using @override but is overriding a method in class \"mypy.plugin.Plugin\"",
        "offset": 5,
        "src": "def get_additional_deps(self, file: MypyFile) -> list[tuple[int, str, int]]:",
        "target": "mypyc.codegen.emitmodule.MypycPlugin.get_additional_deps"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 211,
        "src": "cache_data = {",
        "target": "mypyc.codegen.emitmodule.load_scc_from_cache"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "k.fullname: json.loads(",
        "target": "mypyc.codegen.emitmodule.load_scc_from_cache"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 5,
        "src": "modules = deserialize_modules(cache_data, ctx)",
        "target": "mypyc.codegen.emitmodule.load_scc_from_cache"
      }
    ],
    "mypyc/codegen/literals.py": [
      {
        "code": "redundant-expr",
        "column": 13,
        "message": "Condition is always true",
        "offset": 66,
        "src": "elif isinstance(value, frozenset):",
        "target": "mypyc.codegen.literals.Literals.record_literal"
      },
      {
        "code": "redundant-expr",
        "column": 13,
        "message": "See https://kotlinisland.github.io/basedmypy/_refs.html#code-redundant-expr for more info",
        "offset": 0,
        "src": "elif isinstance(value, frozenset):",
        "target": null
      },
      {
        "code": "redundant-expr",
        "column": 11,
        "message": "Condition is always true",
        "offset": 39,
        "src": "if isinstance(value, frozenset):",
        "target": "mypyc.codegen.literals.Literals.literal_index"
      }
    ],
    "mypyc/common.py": [
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 34,
        "src": "SIZEOF_SIZE_T_SYSCONFIG: Final = sysconfig.get_config_var(\"SIZEOF_SIZE_T\")",
        "target": "mypyc.common"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "int(SIZEOF_SIZE_T_SYSCONFIG)",
        "target": "mypyc.common"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if SIZEOF_SIZE_T_SYSCONFIG is not None",
        "target": "mypyc.common"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "MAX_SHORT_INT: Final = 2 ** (8 * int(SIZEOF_SIZE_T) - 2) - 1",
        "target": "mypyc.common"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "MIN_SHORT_INT: Final = -(MAX_SHORT_INT) - 1",
        "target": "mypyc.common"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "MIN_SHORT_INT: Final = -(MAX_SHORT_INT) - 1",
        "target": "mypyc.common"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "MAX_LITERAL_SHORT_INT: Final = MAX_SHORT_INT",
        "target": "mypyc.common"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "MIN_LITERAL_SHORT_INT: Final = -MAX_LITERAL_SHORT_INT - 1",
        "target": "mypyc.common"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "MIN_LITERAL_SHORT_INT: Final = -MAX_LITERAL_SHORT_INT - 1",
        "target": "mypyc.common"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 28,
        "src": "JsonDict = Dict[str, Any]",
        "target": "mypyc.common"
      }
    ],
    "mypyc/crash.py": [
      {
        "code": "helpful-string",
        "column": 10,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 30,
        "src": "print(f\"{module_path}:{line}: {type(err).__name__}: {err}\")",
        "target": "mypyc.crash.crash_report"
      }
    ],
    "mypyc/ir/class_ir.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 197,
        "src": "def __repr__(self) -> str:",
        "target": "mypyc.ir.class_ir.ClassIR.__repr__"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 147,
        "src": "return {",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 16,
        "src": "\"attributes\": [(k, t.serialize()) for k, t in self.attributes.items()],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"attributes\": [(k, t.serialize()) for k, t in self.attributes.items()],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 3,
        "src": "\"method_decls\": [",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"method_decls\": [",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 5,
        "src": "\"methods\": [(k, m.id) for k, m in self.methods.items()],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"methods\": [(k, m.id) for k, m in self.methods.items()],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"glue_methods\": [",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"glue_methods\": [",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 5,
        "src": "\"property_types\": [(k, t.serialize()) for k, t in self.property_types.items()],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"property_types\": [(k, t.serialize()) for k, t in self.property_types.items()],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"properties\": list(self.properties),",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"properties\": list(self.properties),",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 3,
        "src": "\"trait_vtables\": [",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"trait_vtables\": [",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 5,
        "src": "\"traits\": [cir.fullname for cir in self.traits],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"traits\": [cir.fullname for cir in self.traits],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"mro\": [cir.fullname for cir in self.mro],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"mro\": [cir.fullname for cir in self.mro],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"base_mro\": [cir.fullname for cir in self.base_mro],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"base_mro\": [cir.fullname for cir in self.base_mro],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any] | None)\")",
        "offset": 1,
        "src": "\"children\": [cir.fullname for cir in self.children]",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"children\": [cir.fullname for cir in self.children]",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"list[Any] | None\")",
        "offset": 0,
        "src": "\"children\": [cir.fullname for cir in self.children]",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 4,
        "src": "\"attrs_with_defaults\": sorted(self.attrs_with_defaults),",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"attrs_with_defaults\": sorted(self.attrs_with_defaults),",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"_always_initialized_attrs\": sorted(self._always_initialized_attrs),",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"_always_initialized_attrs\": sorted(self._always_initialized_attrs),",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"_sometimes_initialized_attrs\": sorted(self._sometimes_initialized_attrs),",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"_sometimes_initialized_attrs\": sorted(self._sometimes_initialized_attrs),",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "fullname = data[\"module_name\"] + \".\" + data[\"name\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert fullname in ctx.classes, \"Class %s not in deser class map\" % fullname",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 76,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "assert fullname in ctx.classes, \"Class %s not in deser class map\" % fullname",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ir = ctx.classes[fullname]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 14,
        "src": "ir.attributes = {k: deserialize_type(t, ctx) for k, t in data[\"attributes\"]}",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.attributes = {k: deserialize_type(t, ctx) for k, t in data[\"attributes\"]}",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.attributes = {k: deserialize_type(t, ctx) for k, t in data[\"attributes\"]}",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ir.method_decls = {",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "k: ctx.functions[v].decl if isinstance(v, str) else FuncDecl.deserialize(v, ctx)",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "k: ctx.functions[v].decl if isinstance(v, str) else FuncDecl.deserialize(v, ctx)",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 85,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "k: ctx.functions[v].decl if isinstance(v, str) else FuncDecl.deserialize(v, ctx)",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "ir.methods = {k: ctx.functions[v] for k, v in data[\"methods\"]}",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.methods = {k: ctx.functions[v] for k, v in data[\"methods\"]}",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.methods = {k: ctx.functions[v] for k, v in data[\"methods\"]}",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ir.glue_methods = {",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(ClassIR, Any)\")",
        "offset": 1,
        "src": "(ctx.classes[c], k): ctx.functions[v] for (c, k), v in data[\"glue_methods\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "(ctx.classes[c], k): ctx.functions[v] for (c, k), v in data[\"glue_methods\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "(ctx.classes[c], k): ctx.functions[v] for (c, k), v in data[\"glue_methods\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "(ctx.classes[c], k): ctx.functions[v] for (c, k), v in data[\"glue_methods\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "ir.property_types = {k: deserialize_type(t, ctx) for k, t in data[\"property_types\"]}",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.property_types = {k: deserialize_type(t, ctx) for k, t in data[\"property_types\"]}",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.property_types = {k: deserialize_type(t, ctx) for k, t in data[\"property_types\"]}",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ir.properties = {",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "k: (ir.methods[k], ir.methods.get(PROPSET_PREFIX + k)) for k in data[\"properties\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "k: (ir.methods[k], ir.methods.get(PROPSET_PREFIX + k)) for k in data[\"properties\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "k: (ir.methods[k], ir.methods.get(PROPSET_PREFIX + k)) for k in data[\"properties\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 63,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "k: (ir.methods[k], ir.methods.get(PROPSET_PREFIX + k)) for k in data[\"properties\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "ir.trait_vtables = {",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ctx.classes[k]: deserialize_vtable(v, ctx) for k, v in data[\"trait_vtables\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ctx.classes[k]: deserialize_vtable(v, ctx) for k, v in data[\"trait_vtables\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "ir.traits = [ctx.classes[s] for s in data[\"traits\"]]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.traits = [ctx.classes[s] for s in data[\"traits\"]]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ir.mro = [ctx.classes[s] for s in data[\"mro\"]]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.mro = [ctx.classes[s] for s in data[\"mro\"]]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ir.base_mro = [ctx.classes[s] for s in data[\"base_mro\"]]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.base_mro = [ctx.classes[s] for s in data[\"base_mro\"]]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ir.children = data[\"children\"] and [ctx.classes[s] for s in data[\"children\"]]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "ir.children = data[\"children\"] and [ctx.classes[s] for s in data[\"children\"]]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.children = data[\"children\"] and [ctx.classes[s] for s in data[\"children\"]]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 25,
        "src": "return {",
        "target": "mypyc.ir.class_ir.serialize_vtable_entry"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 14,
        "src": "if data[\".class\"] == \"VTableMethod\":",
        "target": "mypyc.ir.class_ir.deserialize_vtable_entry"
      }
    ],
    "mypyc/ir/func_ir.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 41,
        "src": "def __repr__(self) -> str:",
        "target": "mypyc.ir.func_ir.RuntimeArg.__repr__"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 6,
        "src": "return {",
        "target": "mypyc.ir.func_ir.RuntimeArg.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 47,
        "src": "def __repr__(self) -> str:",
        "target": "mypyc.ir.func_ir.FuncSignature.__repr__"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 8,
        "src": "return {\"args\": [t.serialize() for t in args], \"ret_type\": self.ret_type.serialize()}",
        "target": "mypyc.ir.func_ir.FuncSignature.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 0,
        "src": "return {\"args\": [t.serialize() for t in args], \"ret_type\": self.ret_type.serialize()}",
        "target": "mypyc.ir.func_ir.FuncSignature.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "return {\"args\": [t.serialize() for t in args], \"ret_type\": self.ret_type.serialize()}",
        "target": "mypyc.ir.func_ir.FuncSignature.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "[RuntimeArg.deserialize(arg, ctx) for arg in data[\"args\"]],",
        "target": "mypyc.ir.func_ir.FuncSignature.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[RuntimeArg.deserialize(arg, ctx) for arg in data[\"args\"]],",
        "target": "mypyc.ir.func_ir.FuncSignature.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 90,
        "src": "return {",
        "target": "mypyc.ir.func_ir.FuncDecl.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 16,
        "src": "shortname = FuncDecl.compute_shortname(decl[\"class_name\"], decl[\"name\"])",
        "target": "mypyc.ir.func_ir.FuncDecl.get_id_from_json"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "shortname = FuncDecl.compute_shortname(decl[\"class_name\"], decl[\"name\"])",
        "target": "mypyc.ir.func_ir.FuncDecl.get_id_from_json"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "fullname = decl[\"module_name\"] + \".\" + shortname",
        "target": "mypyc.ir.func_ir.FuncDecl.get_id_from_json"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return get_id_from_name(decl[\"name\"], fullname, func_ir[\"line\"])",
        "target": "mypyc.ir.func_ir.FuncDecl.get_id_from_json"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return get_id_from_name(decl[\"name\"], fullname, func_ir[\"line\"])",
        "target": "mypyc.ir.func_ir.FuncDecl.get_id_from_json"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 77,
        "src": "def __repr__(self) -> str:",
        "target": "mypyc.ir.func_ir.FuncIR.__repr__"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 8,
        "src": "return {",
        "target": "mypyc.ir.func_ir.FuncIR.serialize"
      }
    ],
    "mypyc/ir/module_ir.py": [
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 32,
        "src": "return {",
        "target": "mypyc.ir.module_ir.ModuleIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 3,
        "src": "\"functions\": [f.serialize() for f in self.functions],",
        "target": "mypyc.ir.module_ir.ModuleIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"functions\": [f.serialize() for f in self.functions],",
        "target": "mypyc.ir.module_ir.ModuleIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"classes\": [c.serialize() for c in self.classes],",
        "target": "mypyc.ir.module_ir.ModuleIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"classes\": [c.serialize() for c in self.classes],",
        "target": "mypyc.ir.module_ir.ModuleIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"final_names\": [(k, t.serialize()) for k, t in self.final_names],",
        "target": "mypyc.ir.module_ir.ModuleIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"final_names\": [(k, t.serialize()) for k, t in self.final_names],",
        "target": "mypyc.ir.module_ir.ModuleIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "[ctx.functions[FuncDecl.get_id_from_json(f)] for f in data[\"functions\"]],",
        "target": "mypyc.ir.module_ir.ModuleIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[ctx.functions[FuncDecl.get_id_from_json(f)] for f in data[\"functions\"]],",
        "target": "mypyc.ir.module_ir.ModuleIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "[ClassIR.deserialize(c, ctx) for c in data[\"classes\"]],",
        "target": "mypyc.ir.module_ir.ModuleIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[ClassIR.deserialize(c, ctx) for c in data[\"classes\"]],",
        "target": "mypyc.ir.module_ir.ModuleIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "[(k, deserialize_type(t, ctx)) for k, t in data[\"final_names\"]],",
        "target": "mypyc.ir.module_ir.ModuleIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression type contains \"Any\" (has type \"(Any, RType)\")",
        "offset": 0,
        "src": "[(k, deserialize_type(t, ctx)) for k, t in data[\"final_names\"]],",
        "target": "mypyc.ir.module_ir.ModuleIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[(k, deserialize_type(t, ctx)) for k, t in data[\"final_names\"]],",
        "target": "mypyc.ir.module_ir.ModuleIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[(k, deserialize_type(t, ctx)) for k, t in data[\"final_names\"]],",
        "target": "mypyc.ir.module_ir.ModuleIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 21,
        "src": "for cls in mod[\"classes\"]:",
        "target": "mypyc.ir.module_ir.deserialize_modules"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ir = ClassIR(cls[\"name\"], cls[\"module_name\"])",
        "target": "mypyc.ir.module_ir.deserialize_modules"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir = ClassIR(cls[\"name\"], cls[\"module_name\"])",
        "target": "mypyc.ir.module_ir.deserialize_modules"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "for method in mod[\"functions\"]:",
        "target": "mypyc.ir.module_ir.deserialize_modules"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "func = FuncIR.deserialize(method, ctx)",
        "target": "mypyc.ir.module_ir.deserialize_modules"
      }
    ],
    "mypyc/ir/ops.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"is_void\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Value\"",
        "offset": 163,
        "src": "def is_void(self) -> bool:",
        "target": "mypyc.ir.ops"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __repr__(self) -> str:",
        "target": "mypyc.ir.ops.Register.__repr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 105,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.Assign.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"stolen\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def stolen(self) -> list[Value]:",
        "target": "mypyc.ir.ops.Assign.stolen"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.Assign.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 24,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.AssignMulti.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"stolen\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def stolen(self) -> list[Value]:",
        "target": "mypyc.ir.ops.AssignMulti.stolen"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.AssignMulti.accept"
      },
      {
        "code": "helpful-string",
        "column": 29,
        "message": "The type \"mypyc.ir.ops.ControlOp\" doesn't define a __format__, __str__ or __repr__ method",
        "offset": 13,
        "src": "raise AssertionError(f\"Invalid set_target({self}, {i})\")",
        "target": "mypyc.ir.ops.ControlOp.set_target"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"targets\" is not using @override but is overriding a method in class \"mypyc.ir.ops.ControlOp\"",
        "offset": 12,
        "src": "def targets(self) -> Sequence[BasicBlock]:",
        "target": "mypyc.ir.ops.Goto.targets"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"set_target\" is not using @override but is overriding a method in class \"mypyc.ir.ops.ControlOp\"",
        "offset": 3,
        "src": "def set_target(self, i: int, new: BasicBlock) -> None:",
        "target": "mypyc.ir.ops.Goto.set_target"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 4,
        "src": "def __repr__(self) -> str:",
        "target": "mypyc.ir.ops.Goto.__repr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.Goto.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.Goto.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"targets\" is not using @override but is overriding a method in class \"mypyc.ir.ops.ControlOp\"",
        "offset": 47,
        "src": "def targets(self) -> Sequence[BasicBlock]:",
        "target": "mypyc.ir.ops.Branch.targets"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"set_target\" is not using @override but is overriding a method in class \"mypyc.ir.ops.ControlOp\"",
        "offset": 3,
        "src": "def set_target(self, i: int, new: BasicBlock) -> None:",
        "target": "mypyc.ir.ops.Branch.set_target"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 7,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.Branch.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 6,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.Branch.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 13,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.Return.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"stolen\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def stolen(self) -> list[Value]:",
        "target": "mypyc.ir.ops.Return.stolen"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.Return.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 25,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.Unreachable.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.Unreachable.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"can_raise\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 25,
        "src": "def can_raise(self) -> bool:",
        "target": "mypyc.ir.ops.RegisterOp.can_raise"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 14,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.IncRef.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.IncRef.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 19,
        "src": "def __repr__(self) -> str:",
        "target": "mypyc.ir.ops.DecRef.__repr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.DecRef.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.DecRef.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 22,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.Call.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.Call.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 25,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.MethodCall.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.MethodCall.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 24,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.LoadErrorValue.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.LoadErrorValue.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 29,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.LoadLiteral.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.LoadLiteral.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 21,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.GetAttr.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.GetAttr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 29,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.SetAttr.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"stolen\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def stolen(self) -> list[Value]:",
        "target": "mypyc.ir.ops.SetAttr.stolen"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.SetAttr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 44,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.LoadStatic.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.LoadStatic.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 26,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.InitStatic.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.InitStatic.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 23,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.TupleSet.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"stolen\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def stolen(self) -> list[Value]:",
        "target": "mypyc.ir.ops.TupleSet.stolen"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.TupleSet.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 18,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.TupleGet.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.TupleGet.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 20,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.Cast.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"stolen\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def stolen(self) -> list[Value]:",
        "target": "mypyc.ir.ops.Cast.stolen"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 5,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.Cast.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 25,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.Box.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"stolen\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def stolen(self) -> list[Value]:",
        "target": "mypyc.ir.ops.Box.stolen"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.Box.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 20,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.Unbox.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.Unbox.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 29,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.RaiseStandardError.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.RaiseStandardError.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 37,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.CallC.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"stolen\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def stolen(self) -> list[Value]:",
        "target": "mypyc.ir.ops.CallC.stolen"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 7,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.CallC.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 21,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.Truncate.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"stolen\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def stolen(self) -> list[Value]:",
        "target": "mypyc.ir.ops.Truncate.stolen"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.Truncate.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 25,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.Extend.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"stolen\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def stolen(self) -> list[Value]:",
        "target": "mypyc.ir.ops.Extend.stolen"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.Extend.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 21,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.LoadGlobal.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.LoadGlobal.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 53,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.IntOp.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.IntOp.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 60,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.ComparisonOp.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.ComparisonOp.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 30,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.FloatOp.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.FloatOp.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 19,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.FloatNeg.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.FloatNeg.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 25,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.FloatComparisonOp.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.FloatComparisonOp.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 28,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.LoadMem.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.LoadMem.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 22,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.SetMem.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"stolen\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def stolen(self) -> list[Value]:",
        "target": "mypyc.ir.ops.SetMem.stolen"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.SetMem.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 20,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.GetElementPtr.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.GetElementPtr.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 22,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.LoadAddress.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 6,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.LoadAddress.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 36,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.KeepAlive.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"stolen\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def stolen(self) -> list[Value]:",
        "target": "mypyc.ir.ops.KeepAlive.stolen"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 5,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.KeepAlive.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"sources\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 36,
        "src": "def sources(self) -> list[Value]:",
        "target": "mypyc.ir.ops.Unborrow.sources"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"stolen\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def stolen(self) -> list[Value]:",
        "target": "mypyc.ir.ops.Unborrow.stolen"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.ops.Op\"",
        "offset": 3,
        "src": "def accept(self, visitor: OpVisitor[T]) -> T:",
        "target": "mypyc.ir.ops.Unborrow.accept"
      }
    ],
    "mypyc/ir/pprint.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_goto\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 73,
        "src": "def visit_goto(self, op: Goto) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_goto"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_branch\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 5,
        "src": "def visit_branch(self, op: Branch) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_branch"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 14,
        "src": "def visit_return(self, op: Return) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_return"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unreachable\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_unreachable(self, op: Unreachable) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_unreachable"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_assign(self, op: Assign) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_assign"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assign_multi\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_assign_multi(self, op: AssignMulti) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_assign_multi"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_error_value\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_load_error_value(self, op: LoadErrorValue) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_load_error_value"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_literal\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_load_literal(self, op: LoadLiteral) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_load_literal"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_get_attr\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 19,
        "src": "def visit_get_attr(self, op: GetAttr) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_get_attr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_attr\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 8,
        "src": "def visit_set_attr(self, op: SetAttr) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_set_attr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_static\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 9,
        "src": "def visit_load_static(self, op: LoadStatic) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_load_static"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_init_static\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 7,
        "src": "def visit_init_static(self, op: InitStatic) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_init_static"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_get\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 6,
        "src": "def visit_tuple_get(self, op: TupleGet) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_tuple_get"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_set\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_tuple_set(self, op: TupleSet) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_tuple_set"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_inc_ref\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 4,
        "src": "def visit_inc_ref(self, op: IncRef) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_inc_ref"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dec_ref\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 7,
        "src": "def visit_dec_ref(self, op: DecRef) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_dec_ref"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 7,
        "src": "def visit_call(self, op: Call) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_call"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_method_call\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 9,
        "src": "def visit_method_call(self, op: MethodCall) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_method_call"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_cast\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 7,
        "src": "def visit_cast(self, op: Cast) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_cast"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_box\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_box(self, op: Box) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_box"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unbox\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_unbox(self, op: Unbox) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_unbox"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raise_standard_error\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_raise_standard_error(self, op: RaiseStandardError) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_raise_standard_error"
      },
      {
        "code": "redundant-expr",
        "column": 17,
        "message": "Condition is always true",
        "offset": 4,
        "src": "elif isinstance(op.value, Value):",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_raise_standard_error"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_c\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 7,
        "src": "def visit_call_c(self, op: CallC) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_call_c"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_truncate\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 7,
        "src": "def visit_truncate(self, op: Truncate) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_truncate"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_extend\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_extend(self, op: Extend) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_extend"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_global\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 7,
        "src": "def visit_load_global(self, op: LoadGlobal) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_load_global"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_int_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 4,
        "src": "def visit_int_op(self, op: IntOp) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_int_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_comparison_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_comparison_op(self, op: ComparisonOp) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_comparison_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 11,
        "src": "def visit_float_op(self, op: FloatOp) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_float_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_neg\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_float_neg(self, op: FloatNeg) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_float_neg"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_comparison_op\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_float_comparison_op(self, op: FloatComparisonOp) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_float_comparison_op"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_mem\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_load_mem(self, op: LoadMem) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_load_mem"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_mem\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_set_mem(self, op: SetMem) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_set_mem"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_get_element_ptr\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_get_element_ptr(self, op: GetElementPtr) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_get_element_ptr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_load_address\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 3,
        "src": "def visit_load_address(self, op: LoadAddress) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_load_address"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_keep_alive\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 11,
        "src": "def visit_keep_alive(self, op: KeepAlive) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_keep_alive"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unborrow\" is not using @override but is overriding a method in class \"mypyc.ir.ops.OpVisitor\"",
        "offset": 9,
        "src": "def visit_unborrow(self, op: Unborrow) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.visit_unborrow"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "def format(self, fmt: str, *args: Any) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 14,
        "src": "arglist = list(args)",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "arglist = list(args)",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 8,
        "src": "arg = arglist.pop(0)",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "arg = arglist.pop(0)",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "assert isinstance(arg, Value)",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "result.append(\"%d\" % arg)",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "result.append(\"%f\" % arg)",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "assert isinstance(arg, BasicBlock)",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "assert isinstance(arg, RType)",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "result.append(str(arg))",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      }
    ],
    "mypyc/ir/rtypes.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__str__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 72,
        "src": "def __str__(self) -> str:",
        "target": "mypyc.ir.rtypes.RType.__str__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __repr__(self) -> str:",
        "target": "mypyc.ir.rtypes.RType.__repr__"
      },
      {
        "code": "no-any-expr",
        "column": 9,
        "message": "Expression has type \"Any\"",
        "offset": 26,
        "src": "elif data[\".class\"] == \"RTuple\":",
        "target": "mypyc.ir.rtypes.deserialize_type"
      },
      {
        "code": "no-any-expr",
        "column": 9,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif data[\".class\"] == \"RUnion\":",
        "target": "mypyc.ir.rtypes.deserialize_type"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 48,
        "src": "def accept(self, visitor: RTypeVisitor[T]) -> T:",
        "target": "mypyc.ir.rtypes.RVoid.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 3,
        "src": "def serialize(self) -> str:",
        "target": "mypyc.ir.rtypes.RVoid.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypyc.ir.rtypes.RVoid.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypyc.ir.rtypes.RVoid.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 70,
        "src": "def accept(self, visitor: RTypeVisitor[T]) -> T:",
        "target": "mypyc.ir.rtypes.RPrimitive.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 3,
        "src": "def serialize(self) -> str:",
        "target": "mypyc.ir.rtypes.RPrimitive.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 3,
        "src": "def __repr__(self) -> str:",
        "target": "mypyc.ir.rtypes.RPrimitive.__repr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypyc.ir.rtypes.RPrimitive.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypyc.ir.rtypes.RPrimitive.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rinstance\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 332,
        "src": "def visit_rinstance(self, t: RInstance) -> str:",
        "target": "mypyc.ir.rtypes.TupleNameVisitor.visit_rinstance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_runion\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 3,
        "src": "def visit_runion(self, t: RUnion) -> str:",
        "target": "mypyc.ir.rtypes.TupleNameVisitor.visit_runion"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rprimitive\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 3,
        "src": "def visit_rprimitive(self, t: RPrimitive) -> str:",
        "target": "mypyc.ir.rtypes.TupleNameVisitor.visit_rprimitive"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rtuple\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 18,
        "src": "def visit_rtuple(self, t: RTuple) -> str:",
        "target": "mypyc.ir.rtypes.TupleNameVisitor.visit_rtuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rstruct\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 4,
        "src": "def visit_rstruct(self, t: RStruct) -> str:",
        "target": "mypyc.ir.rtypes.TupleNameVisitor.visit_rstruct"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rarray\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 3,
        "src": "def visit_rarray(self, t: RArray) -> str:",
        "target": "mypyc.ir.rtypes.TupleNameVisitor.visit_rarray"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rvoid\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 3,
        "src": "def visit_rvoid(self, t: RVoid) -> str:",
        "target": "mypyc.ir.rtypes.TupleNameVisitor.visit_rvoid"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 34,
        "src": "def accept(self, visitor: RTypeVisitor[T]) -> T:",
        "target": "mypyc.ir.rtypes.RTuple.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__str__\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 3,
        "src": "def __str__(self) -> str:",
        "target": "mypyc.ir.rtypes.RTuple.__str__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 3,
        "src": "def __repr__(self) -> str:",
        "target": "mypyc.ir.rtypes.RTuple.__repr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypyc.ir.rtypes.RTuple.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypyc.ir.rtypes.RTuple.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypyc.ir.rtypes.RTuple.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "return {\".class\": \"RTuple\", \"types\": types}",
        "target": "mypyc.ir.rtypes.RTuple.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "types = [deserialize_type(t, ctx) for t in data[\"types\"]]",
        "target": "mypyc.ir.rtypes.RTuple.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "types = [deserialize_type(t, ctx) for t in data[\"types\"]]",
        "target": "mypyc.ir.rtypes.RTuple.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 100,
        "src": "def accept(self, visitor: RTypeVisitor[T]) -> T:",
        "target": "mypyc.ir.rtypes.RStruct.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__str__\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 3,
        "src": "def __str__(self) -> str:",
        "target": "mypyc.ir.rtypes.RStruct.__str__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 7,
        "src": "def __repr__(self) -> str:",
        "target": "mypyc.ir.rtypes.RStruct.__repr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 6,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypyc.ir.rtypes.RStruct.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 8,
        "src": "def __hash__(self) -> int:",
        "target": "mypyc.ir.rtypes.RStruct.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypyc.ir.rtypes.RStruct.serialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 33,
        "src": "def accept(self, visitor: RTypeVisitor[T]) -> T:",
        "target": "mypyc.ir.rtypes.RInstance.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 18,
        "src": "def __repr__(self) -> str:",
        "target": "mypyc.ir.rtypes.RInstance.__repr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypyc.ir.rtypes.RInstance.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypyc.ir.rtypes.RInstance.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 3,
        "src": "def serialize(self) -> str:",
        "target": "mypyc.ir.rtypes.RInstance.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"dict[RType, Any | None]\")",
        "offset": 27,
        "src": "unique_items = dict.fromkeys(items)",
        "target": "mypyc.ir.rtypes.RUnion.make_simplified_union"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[RType, Any | None]\")",
        "offset": 1,
        "src": "if len(unique_items) > 1:",
        "target": "mypyc.ir.rtypes.RUnion.make_simplified_union"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"dict[RType, Any | None]\")",
        "offset": 1,
        "src": "return RUnion(list(unique_items))",
        "target": "mypyc.ir.rtypes.RUnion.make_simplified_union"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"dict[RType, Any | None]\")",
        "offset": 2,
        "src": "return next(iter(unique_items))",
        "target": "mypyc.ir.rtypes.RUnion.make_simplified_union"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 2,
        "src": "def accept(self, visitor: RTypeVisitor[T]) -> T:",
        "target": "mypyc.ir.rtypes.RUnion.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 3,
        "src": "def __repr__(self) -> str:",
        "target": "mypyc.ir.rtypes.RUnion.__repr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__str__\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 3,
        "src": "def __str__(self) -> str:",
        "target": "mypyc.ir.rtypes.RUnion.__str__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 4,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypyc.ir.rtypes.RUnion.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __hash__(self) -> int:",
        "target": "mypyc.ir.rtypes.RUnion.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypyc.ir.rtypes.RUnion.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "return {\".class\": \"RUnion\", \"types\": types}",
        "target": "mypyc.ir.rtypes.RUnion.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "types = [deserialize_type(t, ctx) for t in data[\"types\"]]",
        "target": "mypyc.ir.rtypes.RUnion.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "types = [deserialize_type(t, ctx) for t in data[\"types\"]]",
        "target": "mypyc.ir.rtypes.RUnion.deserialize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"accept\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 48,
        "src": "def accept(self, visitor: RTypeVisitor[T]) -> T:",
        "target": "mypyc.ir.rtypes.RArray.accept"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__str__\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 3,
        "src": "def __str__(self) -> str:",
        "target": "mypyc.ir.rtypes.RArray.__str__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__repr__\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 3,
        "src": "def __repr__(self) -> str:",
        "target": "mypyc.ir.rtypes.RArray.__repr__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__eq__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 3,
        "src": "def __eq__(self, other: object) -> bool:",
        "target": "mypyc.ir.rtypes.RArray.__eq__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"__hash__\" is not using @override but is overriding a method in class \"builtins.object\"",
        "offset": 7,
        "src": "def __hash__(self) -> int:",
        "target": "mypyc.ir.rtypes.RArray.__hash__"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"serialize\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RType\"",
        "offset": 3,
        "src": "def serialize(self) -> JsonDict:",
        "target": "mypyc.ir.rtypes.RArray.serialize"
      }
    ],
    "mypyc/irbuild/builder.py": [
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 248,
        "src": "with self.catch_errors(node.line):",
        "target": "mypyc.irbuild.builder.IRBuilder.accept"
      },
      {
        "code": "helpful-string",
        "column": 22,
        "message": "The string for \"None\" isn't helpful in a user-facing or semantic string",
        "offset": 297,
        "src": "error_msg=f'value for final name \"{error_name}\" was not set',",
        "target": "mypyc.irbuild.builder.IRBuilder.load_final_static"
      },
      {
        "code": "redundant-expr",
        "column": 13,
        "message": "Condition is always true",
        "offset": 18,
        "src": "elif isinstance(val, complex):",
        "target": "mypyc.irbuild.builder.IRBuilder.load_literal_value"
      },
      {
        "code": "redundant-expr",
        "column": 23,
        "message": "Condition is always false",
        "offset": 67,
        "src": "if star_idx is not None:",
        "target": "mypyc.irbuild.builder.IRBuilder.get_assignment_target"
      },
      {
        "code": "unreachable",
        "column": 24,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "self.error(\"Two starred expressions in assignment\", line)",
        "target": "mypyc.irbuild.builder.IRBuilder.get_assignment_target"
      },
      {
        "code": "redundant-expr",
        "column": 15,
        "message": "Condition is always true",
        "offset": 21,
        "src": "if reg is not None:",
        "target": "mypyc.irbuild.builder.IRBuilder.read"
      },
      {
        "code": "possibly-undefined",
        "column": 19,
        "message": "Name \"fullname\" may be undefined",
        "offset": 357,
        "src": "return fullname, final_var, native",
        "target": "mypyc.irbuild.builder"
      },
      {
        "code": "possibly-undefined",
        "column": 40,
        "message": "Name \"native\" may be undefined",
        "offset": 0,
        "src": "return fullname, final_var, native",
        "target": "mypyc.irbuild.builder"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 309,
        "src": "def catch_errors(self, line: int) -> Any:",
        "target": "mypyc.irbuild.builder.IRBuilder.catch_errors"
      }
    ],
    "mypyc/irbuild/classdef.py": [
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 129,
        "src": "with builder.catch_errors(stmt.line):",
        "target": "mypyc.irbuild.classdef.transform_class_def"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "with builder.catch_errors(stmt.line):",
        "target": "mypyc.irbuild.classdef.transform_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"add_method\" is not using @override but is overriding a method in class \"mypyc.irbuild.classdef.ClassBuilder\"",
        "offset": 88,
        "src": "def add_method(self, fdef: FuncDef) -> None:",
        "target": "mypyc.irbuild.classdef.NonExtClassBuilder.add_method"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"add_attr\" is not using @override but is overriding a method in class \"mypyc.irbuild.classdef.ClassBuilder\"",
        "offset": 3,
        "src": "def add_attr(self, lvalue: NameExpr, stmt: AssignmentStmt) -> None:",
        "target": "mypyc.irbuild.classdef.NonExtClassBuilder.add_attr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"finalize\" is not using @override but is overriding a method in class \"mypyc.irbuild.classdef.ClassBuilder\"",
        "offset": 6,
        "src": "def finalize(self, ir: ClassIR) -> None:",
        "target": "mypyc.irbuild.classdef.NonExtClassBuilder.finalize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"add_method\" is not using @override but is overriding a method in class \"mypyc.irbuild.classdef.ClassBuilder\"",
        "offset": 35,
        "src": "def add_method(self, fdef: FuncDef) -> None:",
        "target": "mypyc.irbuild.classdef.ExtClassBuilder.add_method"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"add_attr\" is not using @override but is overriding a method in class \"mypyc.irbuild.classdef.ClassBuilder\"",
        "offset": 3,
        "src": "def add_attr(self, lvalue: NameExpr, stmt: AssignmentStmt) -> None:",
        "target": "mypyc.irbuild.classdef.ExtClassBuilder.add_attr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"finalize\" is not using @override but is overriding a method in class \"mypyc.irbuild.classdef.ClassBuilder\"",
        "offset": 15,
        "src": "def finalize(self, ir: ClassIR) -> None:",
        "target": "mypyc.irbuild.classdef.ExtClassBuilder.finalize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"skip_attr_default\" is not using @override but is overriding a method in class \"mypyc.irbuild.classdef.ExtClassBuilder\"",
        "offset": 33,
        "src": "def skip_attr_default(self, name: str, stmt: AssignmentStmt) -> bool:",
        "target": "mypyc.irbuild.classdef.DataClassBuilder.skip_attr_default"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"add_attr\" is not using @override but is overriding a method in class \"mypyc.irbuild.classdef.ExtClassBuilder\"",
        "offset": 11,
        "src": "def add_attr(self, lvalue: NameExpr, stmt: AssignmentStmt) -> None:",
        "target": "mypyc.irbuild.classdef.DataClassBuilder.add_attr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"finalize\" is not using @override but is overriding a method in class \"mypyc.irbuild.classdef.ExtClassBuilder\"",
        "offset": 9,
        "src": "def finalize(self, ir: ClassIR) -> None:",
        "target": "mypyc.irbuild.classdef.DataClassBuilder.finalize"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"skip_attr_default\" is not using @override but is overriding a method in class \"mypyc.irbuild.classdef.DataClassBuilder\"",
        "offset": 44,
        "src": "def skip_attr_default(self, name: str, stmt: AssignmentStmt) -> bool:",
        "target": "mypyc.irbuild.classdef.AttrsClassBuilder.skip_attr_default"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"get_type_annotation\" is not using @override but is overriding a method in class \"mypyc.irbuild.classdef.DataClassBuilder\"",
        "offset": 3,
        "src": "def get_type_annotation(self, stmt: AssignmentStmt) -> TypeInfo | None:",
        "target": "mypyc.irbuild.classdef.AttrsClassBuilder.get_type_annotation"
      }
    ],
    "mypyc/irbuild/env_class.py": [
      {
        "code": "helpful-string",
        "column": 44,
        "message": "The type \"mypyc.ir.ops.Value\" doesn't define a __format__, __str__ or __repr__ method",
        "offset": 129,
        "src": "assert isinstance(env.type, RInstance), f\"{env} must be of type RInstance\"",
        "target": "mypyc.irbuild.env_class.load_outer_env"
      }
    ],
    "mypyc/irbuild/expression.py": [
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression has type \"Any\"",
        "offset": 214,
        "src": "index = builder.builder.load_int(fields.index(expr.name))",
        "target": "mypyc.irbuild.expression.transform_member_expr"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 398,
        "src": "end = builder.load_int(MAX_SHORT_INT)",
        "target": "mypyc.irbuild.expression.try_gen_slice_op"
      },
      {
        "code": "redundant-expr",
        "column": 13,
        "message": "Condition is always true",
        "offset": 255,
        "src": "elif isinstance(rhs, Expression):",
        "target": "mypyc.irbuild.expression.translate_printf_style_formatting"
      }
    ],
    "mypyc/irbuild/for_helpers.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"need_cleanup\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 551,
        "src": "def need_cleanup(self) -> bool:",
        "target": "mypyc.irbuild.for_helpers.ForIterable.need_cleanup"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_condition\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 14,
        "src": "def gen_condition(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForIterable.gen_condition"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"begin_body\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 10,
        "src": "def begin_body(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForIterable.begin_body"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_step\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 10,
        "src": "def gen_step(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForIterable.gen_step"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_cleanup\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 4,
        "src": "def gen_cleanup(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForIterable.gen_cleanup"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_condition\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 23,
        "src": "def gen_condition(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForAsyncIterable.gen_condition"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"begin_body\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 34,
        "src": "def begin_body(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForAsyncIterable.begin_body"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_step\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 10,
        "src": "def gen_step(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForAsyncIterable.gen_step"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_condition\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 38,
        "src": "def gen_condition(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForSequence.gen_condition"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"begin_body\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 21,
        "src": "def begin_body(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForSequence.begin_body"
      },
      {
        "code": "truthy-bool",
        "column": 15,
        "message": "\"value_box\" has type \"Value\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 10,
        "src": "assert value_box",
        "target": "mypyc.irbuild.for_helpers.ForSequence.begin_body"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_step\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 10,
        "src": "def gen_step(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForSequence.gen_step"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"need_cleanup\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 34,
        "src": "def need_cleanup(self) -> bool:",
        "target": "mypyc.irbuild.for_helpers.ForDictionaryCommon.need_cleanup"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_condition\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 19,
        "src": "def gen_condition(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForDictionaryCommon.gen_condition"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_step\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 17,
        "src": "def gen_step(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForDictionaryCommon.gen_step"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_cleanup\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 14,
        "src": "def gen_cleanup(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForDictionaryCommon.gen_cleanup"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"begin_body\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 11,
        "src": "def begin_body(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForDictionaryKeys.begin_body"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"begin_body\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 19,
        "src": "def begin_body(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForDictionaryValues.begin_body"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"begin_body\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 19,
        "src": "def begin_body(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForDictionaryItems.begin_body"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_condition\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 46,
        "src": "def gen_condition(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForRange.gen_condition"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_step\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 10,
        "src": "def gen_step(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForRange.gen_step"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_step\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 37,
        "src": "def gen_step(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForInfiniteCounter.gen_step"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"need_cleanup\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 16,
        "src": "def need_cleanup(self) -> bool:",
        "target": "mypyc.irbuild.for_helpers.ForEnumerate.need_cleanup"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_condition\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 16,
        "src": "def gen_condition(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForEnumerate.gen_condition"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"begin_body\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 4,
        "src": "def begin_body(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForEnumerate.begin_body"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_step\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 4,
        "src": "def gen_step(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForEnumerate.gen_step"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_cleanup\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 4,
        "src": "def gen_cleanup(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForEnumerate.gen_cleanup"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"need_cleanup\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 8,
        "src": "def need_cleanup(self) -> bool:",
        "target": "mypyc.irbuild.for_helpers.ForZip.need_cleanup"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_condition\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 17,
        "src": "def gen_condition(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForZip.gen_condition"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"begin_body\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 6,
        "src": "def begin_body(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForZip.begin_body"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_step\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 4,
        "src": "def gen_step(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForZip.gen_step"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_cleanup\" is not using @override but is overriding a method in class \"mypyc.irbuild.for_helpers.ForGenerator\"",
        "offset": 4,
        "src": "def gen_cleanup(self) -> None:",
        "target": "mypyc.irbuild.for_helpers.ForZip.gen_cleanup"
      }
    ],
    "mypyc/irbuild/function.py": [
      {
        "code": "possibly-undefined",
        "column": 33,
        "message": "Name \"func_ir\" may be undefined",
        "offset": 348,
        "src": "builder.functions.append(func_ir)",
        "target": "mypyc.irbuild.function"
      },
      {
        "code": "possibly-undefined",
        "column": 11,
        "message": "Name \"func_ir\" may be undefined",
        "offset": 5,
        "src": "return func_ir, func_reg",
        "target": "mypyc.irbuild.function"
      }
    ],
    "mypyc/irbuild/ll_builder.py": [
      {
        "code": "redundant-expr",
        "column": 13,
        "message": "Condition is always true",
        "offset": 489,
        "src": "elif is_uint8_rprimitive(target_type):",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.coerce_int_to_fixed_width"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression has type \"Any\"",
        "offset": 40,
        "src": "c1 = self.add(ComparisonOp(src, Integer(MAX_SHORT_INT, src_type), ComparisonOp.SLE))",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.coerce_fixed_width_to_int"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "c2 = self.add(ComparisonOp(src, Integer(MIN_SHORT_INT, src_type), ComparisonOp.SGE))",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.coerce_fixed_width_to_int"
      },
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always true",
        "offset": 228,
        "src": "if star_result is None:",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder._construct_varargs"
      },
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always true",
        "offset": 4,
        "src": "if star2_result is None:",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder._construct_varargs"
      },
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always false",
        "offset": 51,
        "src": "if maybe_pos and maybe_named and seen_empty_reg:",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder._construct_varargs"
      },
      {
        "code": "unreachable",
        "column": 20,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "pos_block, named_block = BasicBlock(), BasicBlock()",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder._construct_varargs"
      },
      {
        "code": "possibly-undefined",
        "column": 27,
        "message": "Name \"skip\" may be undefined",
        "offset": 25,
        "src": "assert skip is not out",
        "target": "mypyc.irbuild.ll_builder"
      },
      {
        "code": "possibly-undefined",
        "column": 35,
        "message": "Name \"coerced_args\" may be undefined",
        "offset": 90,
        "src": "self.add(KeepAlive(coerced_args))",
        "target": "mypyc.irbuild.ll_builder"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 302,
        "src": "if value > MAX_LITERAL_SHORT_INT or value < MIN_LITERAL_SHORT_INT:",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.load_int"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if value > MAX_LITERAL_SHORT_INT or value < MIN_LITERAL_SHORT_INT:",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.load_int"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if value > MAX_LITERAL_SHORT_INT or value < MIN_LITERAL_SHORT_INT:",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.load_int"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if value > MAX_LITERAL_SHORT_INT or value < MIN_LITERAL_SHORT_INT:",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.load_int"
      },
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always true",
        "offset": 457,
        "src": "if result is None:",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.make_dict"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 5,
        "src": "self.translate_special_method_call(",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.make_dict"
      },
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always true",
        "offset": 5,
        "src": "if result is None:",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.make_dict"
      },
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always false",
        "offset": 280,
        "src": "if matching:",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.matching_call_c"
      },
      {
        "code": "unreachable",
        "column": 20,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "assert matching.priority != desc.priority, \"Ambiguous:\\n1) {}\\n2) {}\".format(",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.matching_call_c"
      },
      {
        "code": "redundant-expr",
        "column": 17,
        "message": "Condition is always true",
        "offset": 107,
        "src": "elif is_uint8_rprimitive(type):",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.fixed_width_int_op"
      },
      {
        "code": "redundant-expr",
        "column": 17,
        "message": "Condition is always true",
        "offset": 20,
        "src": "elif is_uint8_rprimitive(type):",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.fixed_width_int_op"
      },
      {
        "code": "possibly-undefined",
        "column": 36,
        "message": "Name \"false_block\" may be undefined",
        "offset": 195,
        "src": "self.activate_block(false_block)",
        "target": "mypyc.irbuild.ll_builder"
      }
    ],
    "mypyc/irbuild/main.py": [
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 47,
        "src": "F = TypeVar(\"F\", bound=Callable[..., Any])",
        "target": "mypyc.irbuild.main"
      },
      {
        "code": "no-any-explicit",
        "column": 22,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "strict_optional_dec = cast(Callable[[F], F], state.strict_optional_set(True))",
        "target": "mypyc.irbuild.main"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"[F: (...) -> Any] (F) -> F\")",
        "offset": 0,
        "src": "strict_optional_dec = cast(Callable[[F], F], state.strict_optional_set(True))",
        "target": "mypyc.irbuild.main"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"[F: (...) -> Any] (F) -> F\")",
        "offset": 3,
        "src": "@strict_optional_dec  # Turn on strict optional for any type manipulations we do",
        "target": "mypyc.irbuild.main"
      }
    ],
    "mypyc/irbuild/match.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_match_stmt\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 87,
        "src": "def visit_match_stmt(self, m: MatchStmt) -> None:",
        "target": "mypyc.irbuild.match.MatchVisitor.visit_match_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_value_pattern\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 12,
        "src": "def visit_value_pattern(self, pattern: ValuePattern) -> None:",
        "target": "mypyc.irbuild.match.MatchVisitor.visit_value_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_or_pattern\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 9,
        "src": "def visit_or_pattern(self, pattern: OrPattern) -> None:",
        "target": "mypyc.irbuild.match.MatchVisitor.visit_or_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_pattern\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 17,
        "src": "def visit_class_pattern(self, pattern: ClassPattern) -> None:",
        "target": "mypyc.irbuild.match.MatchVisitor.visit_class_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_as_pattern\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 67,
        "src": "def visit_as_pattern(self, pattern: AsPattern) -> None:",
        "target": "mypyc.irbuild.match.MatchVisitor.visit_as_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_singleton_pattern\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 14,
        "src": "def visit_singleton_pattern(self, pattern: SingletonPattern) -> None:",
        "target": "mypyc.irbuild.match.MatchVisitor.visit_singleton_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_mapping_pattern\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 12,
        "src": "def visit_mapping_pattern(self, pattern: MappingPattern) -> None:",
        "target": "mypyc.irbuild.match.MatchVisitor.visit_mapping_pattern"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_sequence_pattern\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 42,
        "src": "def visit_sequence_pattern(self, seq_pattern: SequencePattern) -> None:",
        "target": "mypyc.irbuild.match.MatchVisitor.visit_sequence_pattern"
      }
    ],
    "mypyc/irbuild/nonlocalcontrol.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_break\" is not using @override but is overriding a method in class \"mypyc.irbuild.nonlocalcontrol.NonlocalControl\"",
        "offset": 57,
        "src": "def gen_break(self, builder: IRBuilder, line: int) -> None:",
        "target": "mypyc.irbuild.nonlocalcontrol.BaseNonlocalControl.gen_break"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_continue\" is not using @override but is overriding a method in class \"mypyc.irbuild.nonlocalcontrol.NonlocalControl\"",
        "offset": 3,
        "src": "def gen_continue(self, builder: IRBuilder, line: int) -> None:",
        "target": "mypyc.irbuild.nonlocalcontrol.BaseNonlocalControl.gen_continue"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_return\" is not using @override but is overriding a method in class \"mypyc.irbuild.nonlocalcontrol.NonlocalControl\"",
        "offset": 3,
        "src": "def gen_return(self, builder: IRBuilder, value: Value, line: int) -> None:",
        "target": "mypyc.irbuild.nonlocalcontrol.BaseNonlocalControl.gen_return"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_break\" is not using @override but is overriding a method in class \"mypyc.irbuild.nonlocalcontrol.NonlocalControl\"",
        "offset": 14,
        "src": "def gen_break(self, builder: IRBuilder, line: int) -> None:",
        "target": "mypyc.irbuild.nonlocalcontrol.LoopNonlocalControl.gen_break"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_continue\" is not using @override but is overriding a method in class \"mypyc.irbuild.nonlocalcontrol.NonlocalControl\"",
        "offset": 3,
        "src": "def gen_continue(self, builder: IRBuilder, line: int) -> None:",
        "target": "mypyc.irbuild.nonlocalcontrol.LoopNonlocalControl.gen_continue"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_return\" is not using @override but is overriding a method in class \"mypyc.irbuild.nonlocalcontrol.NonlocalControl\"",
        "offset": 3,
        "src": "def gen_return(self, builder: IRBuilder, value: Value, line: int) -> None:",
        "target": "mypyc.irbuild.nonlocalcontrol.LoopNonlocalControl.gen_return"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_return\" is not using @override but is overriding a method in class \"mypyc.irbuild.nonlocalcontrol.BaseNonlocalControl\"",
        "offset": 7,
        "src": "def gen_return(self, builder: IRBuilder, value: Value, line: int) -> None:",
        "target": "mypyc.irbuild.nonlocalcontrol.GeneratorNonlocalControl.gen_return"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_break\" is not using @override but is overriding a method in class \"mypyc.irbuild.nonlocalcontrol.NonlocalControl\"",
        "offset": 36,
        "src": "def gen_break(self, builder: IRBuilder, line: int) -> None:",
        "target": "mypyc.irbuild.nonlocalcontrol.CleanupNonlocalControl.gen_break"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_continue\" is not using @override but is overriding a method in class \"mypyc.irbuild.nonlocalcontrol.NonlocalControl\"",
        "offset": 4,
        "src": "def gen_continue(self, builder: IRBuilder, line: int) -> None:",
        "target": "mypyc.irbuild.nonlocalcontrol.CleanupNonlocalControl.gen_continue"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_return\" is not using @override but is overriding a method in class \"mypyc.irbuild.nonlocalcontrol.NonlocalControl\"",
        "offset": 4,
        "src": "def gen_return(self, builder: IRBuilder, value: Value, line: int) -> None:",
        "target": "mypyc.irbuild.nonlocalcontrol.CleanupNonlocalControl.gen_return"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_break\" is not using @override but is overriding a method in class \"mypyc.irbuild.nonlocalcontrol.NonlocalControl\"",
        "offset": 12,
        "src": "def gen_break(self, builder: IRBuilder, line: int) -> None:",
        "target": "mypyc.irbuild.nonlocalcontrol.TryFinallyNonlocalControl.gen_break"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_continue\" is not using @override but is overriding a method in class \"mypyc.irbuild.nonlocalcontrol.NonlocalControl\"",
        "offset": 3,
        "src": "def gen_continue(self, builder: IRBuilder, line: int) -> None:",
        "target": "mypyc.irbuild.nonlocalcontrol.TryFinallyNonlocalControl.gen_continue"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_return\" is not using @override but is overriding a method in class \"mypyc.irbuild.nonlocalcontrol.NonlocalControl\"",
        "offset": 3,
        "src": "def gen_return(self, builder: IRBuilder, value: Value, line: int) -> None:",
        "target": "mypyc.irbuild.nonlocalcontrol.TryFinallyNonlocalControl.gen_return"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_cleanup\" is not using @override but is overriding a method in class \"mypyc.irbuild.nonlocalcontrol.CleanupNonlocalControl\"",
        "offset": 25,
        "src": "def gen_cleanup(self, builder: IRBuilder, line: int) -> None:",
        "target": "mypyc.irbuild.nonlocalcontrol.ExceptNonlocalControl.gen_cleanup"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"gen_cleanup\" is not using @override but is overriding a method in class \"mypyc.irbuild.nonlocalcontrol.CleanupNonlocalControl\"",
        "offset": 15,
        "src": "def gen_cleanup(self, builder: IRBuilder, line: int) -> None:",
        "target": "mypyc.irbuild.nonlocalcontrol.FinallyNonlocalControl.gen_cleanup"
      }
    ],
    "mypyc/irbuild/prebuildvisitor.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 85,
        "src": "def visit(self, o: Node) -> bool:",
        "target": "mypyc.irbuild.prebuildvisitor.PreBuildVisitor.visit"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_block\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 5,
        "src": "def visit_block(self, block: Block) -> None:",
        "target": "mypyc.irbuild.prebuildvisitor.PreBuildVisitor.visit_block"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_decorator\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 5,
        "src": "def visit_decorator(self, dec: Decorator) -> None:",
        "target": "mypyc.irbuild.prebuildvisitor.PreBuildVisitor.visit_decorator"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 27,
        "src": "def visit_func_def(self, fdef: FuncDef) -> None:",
        "target": "mypyc.irbuild.prebuildvisitor.PreBuildVisitor.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_lambda_expr\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 5,
        "src": "def visit_lambda_expr(self, expr: LambdaExpr) -> None:",
        "target": "mypyc.irbuild.prebuildvisitor.PreBuildVisitor.visit_lambda_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 3,
        "src": "def visit_func(self, func: FuncItem) -> None:",
        "target": "mypyc.irbuild.prebuildvisitor.PreBuildVisitor.visit_func"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 17,
        "src": "def visit_import(self, imp: Import) -> None:",
        "target": "mypyc.irbuild.prebuildvisitor.PreBuildVisitor.visit_import"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.traverser.ExtendedTraverserVisitor\"",
        "offset": 8,
        "src": "def visit_name_expr(self, expr: NameExpr) -> None:",
        "target": "mypyc.irbuild.prebuildvisitor.PreBuildVisitor.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_var\" is not using @override but is overriding a method in class \"mypy.visitor.NodeVisitor\"",
        "offset": 4,
        "src": "def visit_var(self, var: Var) -> None:",
        "target": "mypyc.irbuild.prebuildvisitor.PreBuildVisitor.visit_var"
      }
    ],
    "mypyc/irbuild/prepare.py": [
      {
        "code": "redundant-expr",
        "column": 9,
        "message": "Condition is always true",
        "offset": 184,
        "src": "elif isinstance(node, Decorator):",
        "target": "mypyc.irbuild.prepare.prepare_method_def"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 67,
        "src": "attrs = get_mypyc_attrs(cdef)",
        "target": "mypyc.irbuild.prepare.prepare_class_def"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "if attrs.get(\"allow_interpreted_subclasses\") is True:",
        "target": "mypyc.irbuild.prepare.prepare_class_def"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "if attrs.get(\"allow_interpreted_subclasses\") is True:",
        "target": "mypyc.irbuild.prepare.prepare_class_def"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "if attrs.get(\"serializable\") is True:",
        "target": "mypyc.irbuild.prepare.prepare_class_def"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "if attrs.get(\"serializable\") is True:",
        "target": "mypyc.irbuild.prepare.prepare_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_decorator\" is not using @override but is overriding a method in class \"mypy.traverser.TraverserVisitor\"",
        "offset": 269,
        "src": "def visit_decorator(self, dec: Decorator) -> None:",
        "target": "mypyc.irbuild.prepare.SingledispatchVisitor.visit_decorator"
      },
      {
        "code": "redundant-expr",
        "column": 23,
        "message": "Condition is always false",
        "offset": 14,
        "src": "if last_non_register is not None:",
        "target": "mypyc.irbuild.prepare.SingledispatchVisitor.visit_decorator"
      },
      {
        "code": "unreachable",
        "column": 24,
        "message": "Statement is unreachable",
        "offset": 5,
        "src": "self.errors.error(",
        "target": "mypyc.irbuild.prepare.SingledispatchVisitor.visit_decorator"
      }
    ],
    "mypyc/irbuild/statement.py": [
      {
        "code": "possibly-undefined",
        "column": 7,
        "message": "Name \"next_block\" may be undefined",
        "offset": 509,
        "src": "if next_block:",
        "target": "mypyc.irbuild.statement"
      }
    ],
    "mypyc/irbuild/util.py": [
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 78,
        "src": "def get_mypyc_attr_literal(e: Expression) -> Any:",
        "target": "mypyc.irbuild.util.get_mypyc_attr_literal"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 26,
        "src": "def get_mypyc_attrs(stmt: ClassDef | Decorator) -> dict[str, Any]:",
        "target": "mypyc.irbuild.util.get_mypyc_attrs"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 2,
        "src": "attrs: dict[str, Any] = {}",
        "target": "mypyc.irbuild.util.get_mypyc_attrs"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 7,
        "src": "attrs[arg.value] = True",
        "target": "mypyc.irbuild.util.get_mypyc_attrs"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "attrs[name] = get_mypyc_attr_literal(arg)",
        "target": "mypyc.irbuild.util.get_mypyc_attrs"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "attrs[name] = get_mypyc_attr_literal(arg)",
        "target": "mypyc.irbuild.util.get_mypyc_attrs"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "return attrs",
        "target": "mypyc.irbuild.util.get_mypyc_attrs"
      }
    ],
    "mypyc/irbuild/visitor.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_class_def\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 166,
        "src": "def visit_class_def(self, cdef: ClassDef) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_class_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 3,
        "src": "def visit_import(self, node: Import) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_import"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_from\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 3,
        "src": "def visit_import_from(self, node: ImportFrom) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_import_from"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_import_all\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 3,
        "src": "def visit_import_all(self, node: ImportAll) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_import_all"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_func_def\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 3,
        "src": "def visit_func_def(self, fdef: FuncDef) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_overloaded_func_def\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 3,
        "src": "def visit_overloaded_func_def(self, o: OverloadedFuncDef) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_overloaded_func_def"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_decorator\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 3,
        "src": "def visit_decorator(self, dec: Decorator) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_decorator"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_block\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 3,
        "src": "def visit_block(self, block: Block) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_block"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_expression_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 5,
        "src": "def visit_expression_stmt(self, stmt: ExpressionStmt) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_expression_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_return_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 3,
        "src": "def visit_return_stmt(self, stmt: ReturnStmt) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_return_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 4,
        "src": "def visit_assignment_stmt(self, stmt: AssignmentStmt) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_operator_assignment_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 3,
        "src": "def visit_operator_assignment_stmt(self, stmt: OperatorAssignmentStmt) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_operator_assignment_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_if_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 3,
        "src": "def visit_if_stmt(self, stmt: IfStmt) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_if_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_while_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 3,
        "src": "def visit_while_stmt(self, stmt: WhileStmt) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_while_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_for_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 3,
        "src": "def visit_for_stmt(self, stmt: ForStmt) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_for_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_break_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 3,
        "src": "def visit_break_stmt(self, stmt: BreakStmt) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_break_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_continue_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 4,
        "src": "def visit_continue_stmt(self, stmt: ContinueStmt) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_continue_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_raise_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 4,
        "src": "def visit_raise_stmt(self, stmt: RaiseStmt) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_raise_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_try_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 4,
        "src": "def visit_try_stmt(self, stmt: TryStmt) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_try_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_with_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 3,
        "src": "def visit_with_stmt(self, stmt: WithStmt) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_with_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_pass_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 3,
        "src": "def visit_pass_stmt(self, stmt: PassStmt) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_pass_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 3,
        "src": "def visit_assert_stmt(self, stmt: AssertStmt) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_assert_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_del_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 3,
        "src": "def visit_del_stmt(self, stmt: DelStmt) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_del_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_global_decl\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 3,
        "src": "def visit_global_decl(self, stmt: GlobalDecl) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_global_decl"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_nonlocal_decl\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 4,
        "src": "def visit_nonlocal_decl(self, stmt: NonlocalDecl) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_nonlocal_decl"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_match_stmt\" is not using @override but is overriding a method in class \"mypy.visitor.StatementVisitor\"",
        "offset": 4,
        "src": "def visit_match_stmt(self, stmt: MatchStmt) -> None:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_match_stmt"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_name_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 5,
        "src": "def visit_name_expr(self, expr: NameExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_name_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_member_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_member_expr(self, expr: MemberExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_member_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_super_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_super_expr(self, expr: SuperExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_super_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_call_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_call_expr(self, expr: CallExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_unary_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_unary_expr(self, expr: UnaryExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_unary_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_op_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_op_expr(self, expr: OpExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_op_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_index_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_index_expr(self, expr: IndexExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_index_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_conditional_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_conditional_expr(self, expr: ConditionalExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_conditional_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_comparison_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_comparison_expr(self, expr: ComparisonExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_comparison_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_int_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_int_expr(self, expr: IntExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_int_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_float_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_float_expr(self, expr: FloatExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_float_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_complex_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_complex_expr(self, expr: ComplexExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_complex_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_str_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_str_expr(self, expr: StrExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_str_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_bytes_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_bytes_expr(self, expr: BytesExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_bytes_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_ellipsis\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_ellipsis(self, expr: EllipsisExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_ellipsis"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_list_expr(self, expr: ListExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_list_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_tuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_tuple_expr(self, expr: TupleExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_dict_expr(self, expr: DictExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_dict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_set_expr(self, expr: SetExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_set_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_list_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_list_comprehension(self, expr: ListComprehension) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_list_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_set_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_set_comprehension(self, expr: SetComprehension) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_set_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_dictionary_comprehension\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_dictionary_comprehension(self, expr: DictionaryComprehension) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_dictionary_comprehension"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_slice_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_slice_expr(self, expr: SliceExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_slice_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_generator_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_generator_expr(self, expr: GeneratorExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_generator_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_lambda_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_lambda_expr(self, expr: LambdaExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_lambda_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_yield_expr(self, expr: YieldExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_yield_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_yield_from_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_yield_from_expr(self, o: YieldFromExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_yield_from_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_await_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_await_expr(self, o: AwaitExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_await_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assignment_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_assignment_expr(self, o: AssignmentExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_assignment_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_enum_call_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 5,
        "src": "def visit_enum_call_expr(self, o: EnumCallExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_enum_call_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit__promote_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit__promote_expr(self, o: PromoteExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit__promote_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_namedtuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_namedtuple_expr(self, o: NamedTupleExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_namedtuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_newtype_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_newtype_expr(self, o: NewTypeExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_newtype_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_temp_node\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_temp_node(self, o: TempNode) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_temp_node"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_alias_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_type_alias_expr(self, o: TypeAliasExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_type_alias_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_application\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_type_application(self, o: TypeApplication) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_type_application"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_type_var_expr(self, o: TypeVarExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_type_var_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_paramspec_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_paramspec_expr(self, o: ParamSpecExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_paramspec_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_type_var_tuple_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_type_var_tuple_expr(self, o: TypeVarTupleExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_type_var_tuple_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_typeddict_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_typeddict_expr(self, o: TypedDictExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_typeddict_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_reveal_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_reveal_expr(self, o: RevealExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_reveal_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_cast_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 6,
        "src": "def visit_cast_expr(self, o: CastExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_cast_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_assert_type_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_assert_type_expr(self, o: AssertTypeExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_assert_type_expr"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_star_expr\" is not using @override but is overriding a method in class \"mypy.visitor.ExpressionVisitor\"",
        "offset": 3,
        "src": "def visit_star_expr(self, o: StarExpr) -> Value:",
        "target": "mypyc.irbuild.visitor.IRBuilderVisitor.visit_star_expr"
      }
    ],
    "mypyc/rt_subtype.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rinstance\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 50,
        "src": "def visit_rinstance(self, left: RInstance) -> bool:",
        "target": "mypyc.rt_subtype.RTSubtypeVisitor.visit_rinstance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_runion\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 3,
        "src": "def visit_runion(self, left: RUnion) -> bool:",
        "target": "mypyc.rt_subtype.RTSubtypeVisitor.visit_runion"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rprimitive\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 3,
        "src": "def visit_rprimitive(self, left: RPrimitive) -> bool:",
        "target": "mypyc.rt_subtype.RTSubtypeVisitor.visit_rprimitive"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rtuple\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 7,
        "src": "def visit_rtuple(self, left: RTuple) -> bool:",
        "target": "mypyc.rt_subtype.RTSubtypeVisitor.visit_rtuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rstruct\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 7,
        "src": "def visit_rstruct(self, left: RStruct) -> bool:",
        "target": "mypyc.rt_subtype.RTSubtypeVisitor.visit_rstruct"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rarray\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 3,
        "src": "def visit_rarray(self, left: RArray) -> bool:",
        "target": "mypyc.rt_subtype.RTSubtypeVisitor.visit_rarray"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rvoid\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 3,
        "src": "def visit_rvoid(self, left: RVoid) -> bool:",
        "target": "mypyc.rt_subtype.RTSubtypeVisitor.visit_rvoid"
      }
    ],
    "mypyc/sametype.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rinstance\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 50,
        "src": "def visit_rinstance(self, left: RInstance) -> bool:",
        "target": "mypyc.sametype.SameTypeVisitor.visit_rinstance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_runion\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 3,
        "src": "def visit_runion(self, left: RUnion) -> bool:",
        "target": "mypyc.sametype.SameTypeVisitor.visit_runion"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rprimitive\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 13,
        "src": "def visit_rprimitive(self, left: RPrimitive) -> bool:",
        "target": "mypyc.sametype.SameTypeVisitor.visit_rprimitive"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rtuple\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 3,
        "src": "def visit_rtuple(self, left: RTuple) -> bool:",
        "target": "mypyc.sametype.SameTypeVisitor.visit_rtuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rstruct\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 7,
        "src": "def visit_rstruct(self, left: RStruct) -> bool:",
        "target": "mypyc.sametype.SameTypeVisitor.visit_rstruct"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rarray\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 3,
        "src": "def visit_rarray(self, left: RArray) -> bool:",
        "target": "mypyc.sametype.SameTypeVisitor.visit_rarray"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rvoid\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 3,
        "src": "def visit_rvoid(self, left: RVoid) -> bool:",
        "target": "mypyc.sametype.SameTypeVisitor.visit_rvoid"
      }
    ],
    "mypyc/subtype.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rinstance\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 50,
        "src": "def visit_rinstance(self, left: RInstance) -> bool:",
        "target": "mypyc.subtype.SubtypeVisitor.visit_rinstance"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_runion\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 3,
        "src": "def visit_runion(self, left: RUnion) -> bool:",
        "target": "mypyc.subtype.SubtypeVisitor.visit_runion"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rprimitive\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 3,
        "src": "def visit_rprimitive(self, left: RPrimitive) -> bool:",
        "target": "mypyc.subtype.SubtypeVisitor.visit_rprimitive"
      },
      {
        "code": "redundant-expr",
        "column": 13,
        "message": "Condition is always true",
        "offset": 11,
        "src": "elif is_fixed_width_rtype(left):",
        "target": "mypyc.subtype.SubtypeVisitor.visit_rprimitive"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rtuple\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 5,
        "src": "def visit_rtuple(self, left: RTuple) -> bool:",
        "target": "mypyc.subtype.SubtypeVisitor.visit_rtuple"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rstruct\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 9,
        "src": "def visit_rstruct(self, left: RStruct) -> bool:",
        "target": "mypyc.subtype.SubtypeVisitor.visit_rstruct"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rarray\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 3,
        "src": "def visit_rarray(self, left: RArray) -> bool:",
        "target": "mypyc.subtype.SubtypeVisitor.visit_rarray"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"visit_rvoid\" is not using @override but is overriding a method in class \"mypyc.ir.rtypes.RTypeVisitor\"",
        "offset": 3,
        "src": "def visit_rvoid(self, left: RVoid) -> bool:",
        "target": "mypyc.subtype.SubtypeVisitor.visit_rvoid"
      }
    ],
    "mypyc/test/test_alwaysdefined.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 26,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypyc.test.test_alwaysdefined.TestAlwaysDefined.run_case"
      }
    ],
    "mypyc/test/test_analysis.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 32,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypyc.test.test_analysis.TestAnalysis.run_case"
      }
    ],
    "mypyc/test/test_cheader.py": [
      {
        "code": "redundant-expr",
        "column": 19,
        "message": "Condition is always false",
        "offset": 35,
        "src": "if isinstance(ops, CFunctionDescription):",
        "target": "mypyc.test.test_cheader.TestHeaderInclusion.test_primitives_included_in_header"
      },
      {
        "code": "unreachable",
        "column": 20,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "ops = [ops]",
        "target": "mypyc.test.test_cheader.TestHeaderInclusion.test_primitives_included_in_header"
      }
    ],
    "mypyc/test/test_commandline.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 33,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypyc.test.test_commandline.TestCommandLine.run_case"
      }
    ],
    "mypyc/test/test_emit.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 12,
        "src": "def setUp(self) -> None:",
        "target": "mypyc.test.test_emit.TestEmitter.setUp"
      }
    ],
    "mypyc/test/test_emitfunc.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 78,
        "src": "def setUp(self) -> None:",
        "target": "mypyc.test.test_emitfunc.TestFunctionEmitterVisitor.setUp"
      },
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 802,
        "src": "def setUp(self) -> None:",
        "target": "mypyc.test.test_emitfunc.TestGenerateFunction.setUp"
      }
    ],
    "mypyc/test/test_emitwrapper.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 13,
        "src": "def setUp(self) -> None:",
        "target": "mypyc.test.test_emitwrapper.TestArgCheck.setUp"
      }
    ],
    "mypyc/test/test_exceptions.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 35,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypyc.test.test_exceptions.TestExceptionTransform.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 19,
        "src": "actual.append(\"hot blocks: %s\" % sorted(b.label for b in common))",
        "target": "mypyc.test.test_exceptions.TestExceptionTransform.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 63,
        "message": "Expression type contains \"Any\" (has type \"Generator[Any, None, None]\")",
        "offset": 0,
        "src": "actual.append(\"hot blocks: %s\" % sorted(b.label for b in common))",
        "target": "mypyc.test.test_exceptions.TestExceptionTransform.run_case"
      }
    ],
    "mypyc/test/test_external.py": [
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"[_FT: (...) -> Any] (_FT) -> _FT\")",
        "offset": 17,
        "src": "@unittest.skipIf(sys.platform.startswith(\"win\"), \"rt tests don't work on windows\")",
        "target": "mypyc.test.test_external"
      }
    ],
    "mypyc/test/test_irbuild.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 66,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypyc.test.test_irbuild.TestGenOps.run_case"
      }
    ],
    "mypyc/test/test_ircheck.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 47,
        "src": "def setUp(self) -> None:",
        "target": "mypyc.test.test_ircheck.TestIrcheck.setUp"
      }
    ],
    "mypyc/test/test_refcount.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 37,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypyc.test.test_refcount.TestRefCountTransform.run_case"
      }
    ],
    "mypyc/test/test_run.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"run_case\" is not using @override but is overriding a method in class \"mypy.test.data.DataSuite\"",
        "offset": 143,
        "src": "def run_case(self, testcase: DataDrivenTestCase) -> None:",
        "target": "mypyc.test.test_run.TestRun.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Untyped\"",
        "offset": 44,
        "src": "bench = testcase.config.getoption(\"--bench\", False) and \"Benchmark\" in testcase.name",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"Any (unannotated) | bool\")",
        "offset": 0,
        "src": "bench = testcase.config.getoption(\"--bench\", False) and \"Benchmark\" in testcase.name",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 46,
        "src": "self.get_separate(\"\\n\".join(testcase.input), incremental_step)",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "self.get_separate(\"\\n\".join(testcase.input), incremental_step)",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 5,
        "src": "groups = construct_groups(sources, separate, len(module_names) > 1)",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 36,
        "src": "module_paths, separate, cfiles, self.multi_file, opt_level, debug_level",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Untyped\"",
        "offset": 5,
        "src": "if testcase.config.getoption(\"--mypyc-showc\"):",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"Any (unannotated) | bool\")",
        "offset": 18,
        "src": "env[\"MYPYC_RUN_BENCH\"] = \"1\" if bench else \"0\"",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-untyped-usage",
        "column": 8,
        "message": "Usage of untyped name \"debugger\" in typed context",
        "offset": 2,
        "src": "debugger = testcase.config.getoption(\"debugger\")",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Untyped\"",
        "offset": 0,
        "src": "debugger = testcase.config.getoption(\"debugger\")",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Untyped\"",
        "offset": 1,
        "src": "if debugger:",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Untyped\"",
        "offset": 1,
        "src": "if debugger == \"lldb\":",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any (unannotated)\"",
        "offset": 0,
        "src": "if debugger == \"lldb\":",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Untyped\"",
        "offset": 2,
        "src": "elif debugger == \"gdb\":",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any (unannotated)\"",
        "offset": 0,
        "src": "elif debugger == \"gdb\":",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Untyped\"",
        "offset": 22,
        "src": "if testcase.config.getoption(\"--mypyc-showc\"):",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 2,
        "src": "if proc.returncode != 0:",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "if proc.returncode != 0:",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": -1,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "print(\"*** Exit status: %d\" % proc.returncode)",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 0,
        "src": "print(\"*** Exit status: %d\" % proc.returncode)",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any (unannotated) | bool\")",
        "offset": 3,
        "src": "if bench:",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 32,
        "src": "assert proc.returncode == 0",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "assert proc.returncode == 0",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 2,
        "src": "def get_separate(self, program_text: str, incremental_step: int) -> Any:",
        "target": "mypyc.test.test_run.TestRun.get_separate"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "return ast.literal_eval(safe(m.group(1)))",
        "target": "mypyc.test.test_run.TestRun.get_separate"
      }
    ],
    "mypyc/test/test_serialization.py": [
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 19,
        "src": "def get_dict(x: Any) -> dict[str, Any]:",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if hasattr(x, \"__mypyc_attrs__\"):",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return {k: getattr(x, k) for k in x.__mypyc_attrs__ if hasattr(x, k)}",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "return {k: getattr(x, k) for k in x.__mypyc_attrs__ if hasattr(x, k)}",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return {k: getattr(x, k) for k in x.__mypyc_attrs__ if hasattr(x, k)}",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return {k: getattr(x, k) for k in x.__mypyc_attrs__ if hasattr(x, k)}",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return {k: getattr(x, k) for k in x.__mypyc_attrs__ if hasattr(x, k)}",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return {k: getattr(x, k) for k in x.__mypyc_attrs__ if hasattr(x, k)}",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return {k: getattr(x, k) for k in x.__mypyc_attrs__ if hasattr(x, k)}",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 71,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return {k: getattr(x, k) for k in x.__mypyc_attrs__ if hasattr(x, k)}",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 74,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return {k: getattr(x, k) for k in x.__mypyc_attrs__ if hasattr(x, k)}",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "return dict(x.__dict__)",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def get_function_dict(x: FuncIR) -> dict[str, Any]:",
        "target": "mypyc.test.test_serialization.get_function_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "d = get_dict(x)",
        "target": "mypyc.test.test_serialization.get_function_dict"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "d.pop(\"blocks\", None)",
        "target": "mypyc.test.test_serialization.get_function_dict"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "d.pop(\"env\", None)",
        "target": "mypyc.test.test_serialization.get_function_dict"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return d",
        "target": "mypyc.test.test_serialization.get_function_dict"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def assert_blobs_same(x: Any, y: Any, trail: tuple[Any, ...]) -> None:",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 16,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 0,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"(str, type[Any], type[Any])\")",
        "offset": 0,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 0,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 66,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 70,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 0,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 75,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(x, (FuncDecl, FuncIR, ClassIR)):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert x.fullname == y.fullname, f\"Name mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "assert x.fullname == y.fullname, f\"Name mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert x.fullname == y.fullname, f\"Name mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "elif isinstance(x, dict):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert len(x.keys()) == len(y.keys()), f\"Keys mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert len(x.keys()) == len(y.keys()), f\"Keys mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"((Any, Any), Any)\")",
        "offset": 1,
        "src": "for (xk, xv), (yk, yv) in zip(x.items(), y.items()):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for (xk, xv), (yk, yv) in zip(x.items(), y.items()):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"zip[((Any, Any), Any)]\")",
        "offset": 0,
        "src": "for (xk, xv), (yk, yv) in zip(x.items(), y.items()):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for (xk, xv), (yk, yv) in zip(x.items(), y.items()):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert_blobs_same(xk, yk, trail + (\"keys\",))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert_blobs_same(xk, yk, trail + (\"keys\",))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert_blobs_same(xv, yv, trail + (xk,))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert_blobs_same(xv, yv, trail + (xk,))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "elif isinstance(x, dict):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert x.keys() == y.keys(), f\"Keys mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "assert x.keys() == y.keys(), f\"Keys mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert x.keys() == y.keys(), f\"Keys mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "assert_blobs_same(x[k], y[k], trail + (k,))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert_blobs_same(x[k], y[k], trail + (k,))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "elif isinstance(x, Iterable) and not isinstance(x, (str, set)):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(int, (Any, Any))\")",
        "offset": 4,
        "src": "for i, (xv, yv) in enumerate(zip(x, y)):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(Any, Any)\")",
        "offset": 0,
        "src": "for i, (xv, yv) in enumerate(zip(x, y)):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for i, (xv, yv) in enumerate(zip(x, y)):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"enumerate[(Any, Any)]\")",
        "offset": 0,
        "src": "for i, (xv, yv) in enumerate(zip(x, y)):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"zip[(Any, Any)]\")",
        "offset": 0,
        "src": "for i, (xv, yv) in enumerate(zip(x, y)):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for i, (xv, yv) in enumerate(zip(x, y)):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert_blobs_same(xv, yv, trail + (i,))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert_blobs_same(xv, yv, trail + (i,))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "elif isinstance(x, RType):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert is_same_type(x, y), f\"RType mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert is_same_type(x, y), f\"RType mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "elif isinstance(x, FuncSignature):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert is_same_signature(x, y), f\"Signature mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert is_same_signature(x, y), f\"Signature mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "assert x == y, f\"Value mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "assert x == y, f\"Value mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert x == y, f\"Value mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 15,
        "src": "assert_blobs_same(get_dict(cls1), get_dict(cls2), (ir1.fullname, cls1.fullname))",
        "target": "mypyc.test.test_serialization.assert_modules_same"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "assert_blobs_same(get_dict(cls1), get_dict(cls2), (ir1.fullname, cls1.fullname))",
        "target": "mypyc.test.test_serialization.assert_modules_same"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 4,
        "src": "get_function_dict(fn1), get_function_dict(fn2), (ir1.fullname, fn1.fullname)",
        "target": "mypyc.test.test_serialization.assert_modules_same"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "get_function_dict(fn1), get_function_dict(fn2), (ir1.fullname, fn1.fullname)",
        "target": "mypyc.test.test_serialization.assert_modules_same"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "assert_blobs_same(get_dict(fn1.decl), get_dict(fn2.decl), (ir1.fullname, fn1.fullname))",
        "target": "mypyc.test.test_serialization.assert_modules_same"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "assert_blobs_same(get_dict(fn1.decl), get_dict(fn2.decl), (ir1.fullname, fn1.fullname))",
        "target": "mypyc.test.test_serialization.assert_modules_same"
      }
    ],
    "mypyc/test/test_tuplename.py": [
      {
        "code": "explicit-override",
        "column": 4,
        "message": "Method \"setUp\" is not using @override but is overriding a method in class \"unittest.case.TestCase\"",
        "offset": 18,
        "src": "def setUp(self) -> None:",
        "target": "mypyc.test.test_tuplename.TestTupleNames.setUp"
      }
    ],
    "mypyc/test/testutil.py": [
      {
        "code": "possibly-undefined",
        "column": 11,
        "message": "Name \"default_builtins\" may be undefined",
        "offset": 66,
        "src": "if default_builtins:",
        "target": "mypyc.test.testutil"
      },
      {
        "code": "possibly-undefined",
        "column": 22,
        "message": "Name \"builtins\" may be undefined",
        "offset": 2,
        "src": "os.remove(builtins)",
        "target": "mypyc.test.testutil"
      },
      {
        "code": "possibly-undefined",
        "column": 7,
        "message": "Name \"default_builtins\" may be undefined",
        "offset": 19,
        "src": "if default_builtins:",
        "target": "mypyc.test.testutil"
      },
      {
        "code": "possibly-undefined",
        "column": 18,
        "message": "Name \"builtins\" may be undefined",
        "offset": 2,
        "src": "os.remove(builtins)",
        "target": "mypyc.test.testutil"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"False | Untyped\")",
        "offset": 96,
        "src": "if expected_output != actual and testcase.config.getoption(\"--update-data\", False):",
        "target": "mypyc.test.testutil.assert_test_output"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Untyped\"",
        "offset": 0,
        "src": "if expected_output != actual and testcase.config.getoption(\"--update-data\", False):",
        "target": "mypyc.test.testutil.assert_test_output"
      }
    ]
  },
  "format": "1.7",
  "targets": [
    "package:mypy",
    "package:mypyc"
  ]
}